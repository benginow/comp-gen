* You've found the place for doing cycle estimations

I'm starting out by just trying to get a single thing working manually. I have things
setup to produce the final diospyros =kernel.c= file. I now want to setup a minimal harness to see if I can get Xtensa simulation working.

** Instructions for setting up Xtensa

You first need to download a =XtensaTools=. You can find this on the XPG site under any version number in the tools directory. Put this directory somewhere and extract it. This becomes the root directory of the Xtensa installation.

I have it set up like:
#+begin_example
xtensa/
  RI-2021.8-linux/
    XtensaTools/    # home for the all of the Xtensa utilities
    config/         # the Core Registry. Keeps configuration about what cores are installed
#+end_example

You can have other versions of the tools installed in the parent =xtensa= directory.

Next you need to install core specific configuration. These can be found on the XPG site for some version in the =reference-cores= directory. I've been using Fusion G3 because that's what Diospyros uses.

The file that you download will be an =.xws= file. This is really just a renamed zip archive. Extract it with =unzip=. This will create a =__downloads= directory. Find the core archive in this directory (it is easy to find). Extract that tar file. Inside the resulting directory is an =install= script. Run this script and pass in the location of the XtensaTools directory for the corresponding version when prompted.

That's it! Now running =xt-clang= and corresponding compilers should just "work". They'll use whatever core you have set as default. I think you can also specify the name of a particular core on the command line.

Here is the command to start the license server:

#+begin_src async-shell :dir ~/Research/xtensa :results silent :name lmgrd
LM_LICENSE_FILE=licenses/LICENSE ./x64_lsb/lmgrd
#+end_src

** q-prod

copy the kernel here

#+begin_src async-shell :var IP=(ec2/get-ip "exp") :results silent
rsync -e 'ssh -o StrictHostKeyChecking=no' -v \
      ubuntu@$IP:~/q-prod-out/kernel.c \
      q-prod/dios-egg-kernel.c
#+end_src

#+begin_src async-shell :results silent :ansi t :dir q-prod :name q-prod
XTENSA=~/Research/xtensa/RI-2021.8-linux/XtensaTools
XTCLANG=$XTENSA/bin/xt-clang++
XTRUN=$XTENSA/bin/xt-run

$XTCLANG -std=c++11 -O3 -LNO:SIMD -w -DXCHAL_HAVE_FUSIONG_SP_VFPU=1 -DOUTFILE='"q-prod.out"' \
	 -I /usr/include/eigen3 \
	 -I ~/Research/xtensa/fusiong3_library/include \
	 -I ~/Research/xtensa/fusiong3_library/include_private \
	 egg-kernel.c harness.c -o q-prod.o

$XTRUN q-prod.o
#+end_src

** mat-mul

I need to add these flags to the compile command
=-DA_ROWS=$(A_ROWS) -DA_COLS=$(A_COLS)=

copy the kernel here
#+begin_src async-shell :var IP=(ec2/get-ip "exp") :results silent :name cycles
rsync -e 'ssh -o StrictHostKeyChecking=no' -v \
      ubuntu@$IP:~/mat-mul-out/kernel.c \
      mat-mul/egg-kernel.c
#+end_src

#+begin_src async-shell :results silent :ansi t :dir mat-mul :name cycles
XTENSA=~/Research/xtensa/RI-2021.8-linux/XtensaTools
XTCLANG=$XTENSA/bin/xt-clang++
XTRUN=$XTENSA/bin/xt-run
KERNEL=egg-kernel.c
# KERNEL=~/Research/comp-gen/experiments/original-dios/results/mat-mul/2x2_2x2_4r/egg-kernel.c 

$XTCLANG -std=c++11 -O3 -mlongcalls -LNO:SIMD -w -mtext-section-literals \
         -DXCHAL_HAVE_FUSIONG_SP_VFPU=1 \
         -DA_ROWS='4' -DA_COLS='4' \
         -DB_ROWS='4' -DB_COLS='4' \
         -I /usr/include/eigen3 \
         -I ~/Research/xtensa/fusiong3_library/include \
         -I ~/Research/xtensa/fusiong3_library/include_private \
         $KERNEL harness.c -o mat-mul.o

$XTRUN mat-mul.o
#+end_src

** 2d-conv

Copy the file over:

#+begin_src async-shell :name cycles :var IP=(ec2/get-ip "exp") :results silent
rsync -e 'ssh -o StrictHostKeyChecking=no' -v \
      ubuntu@$IP:~/2d-conv-out/kernel.c \
      2d-conv/comp-gen-kernel.c
#+end_src

Run the xtensa simulator on it.

#+begin_src async-shell :name sim :results silent :ansi t :dir 2d-conv :name cycles
XTENSA=~/Research/xtensa/RI-2021.8-linux/XtensaTools
XTCLANG=$XTENSA/bin/xt-clang++
XTRUN=$XTENSA/bin/xt-run
KERNEL=comp-gen-kernel.c
# KERNEL=~/Research/diospyros/fix-backend-out/kernel.c

$XTCLANG -std=c++11 -O3 -mlongcalls -LNO:SIMD -w -mtext-section-literals \
         -DXCHAL_HAVE_FUSIONG_SP_VFPU=1 \
         -DOUTFILE='"2d-conv.out"' \
         -DI_ROWS='3' -DI_COLS='3' \
         -DF_ROWS='3' -DF_COLS='3' \
         -I /usr/include/eigen3 \
         -I ~/Research/xtensa/fusiong3_library/include \
         -I ~/Research/xtensa/fusiong3_library/include_private \
         $KERNEL harness.c -o 2d-conv.o

$XTRUN 2d-conv.o
#+end_src

** TODO qr-decomp

This benchmark is giant and takes forever to complete. Even starting the runner is incredibly slow. It seems like in the original Dios evaluation, they have a separate process for running the large memory programs and it takes upwards of 4.5 hours to complete. That's not ideal.

* Data

** Looking at how e-graph is growing based on ruleset

Using the ruleset =expanding.json=. This is the ruleset where I've used Ruler 2.0 to generate just normal arithmetic rules up to depth 3, removed all the "non-expansion" rules and then manually added the vector compilation rules.

This is for =2d-conv=

#+name: 2d-conv-expanding
| iter |      search |        apply |   enodes | eclasses |
|------+-------------+--------------+----------+----------|
|    0 | 0.014394228 |  0.474613063 |   173540 |    58618 |
|    1 | 0.978857021 |  26.69292254 |  5984991 |   483136 |
|    2 | 3.340895762 |   45.7094559 | 12234387 |   861286 |
|    3 | 4.908809593 | 34.940109989 | 13190192 |   974679 |
|    4 | 5.413900343 | 34.731200248 | 13599639 |  1032562 |
|    5 | 5.719339313 | 35.245221067 | 13840583 |  1057859 |
|    6 | 5.793327618 | 34.945761604 | 13951192 |  1065963 |
|    7 | 6.115901912 | 35.080558204 | 13975748 |  1065963 |
|    8 | 5.867310351 | 34.519687711 | 13975748 |  1065963 |

And this is the table for using =manual_rules.json=.

| iter |       search | apply        | enodes  | eclasses |   | ------+---------+----------+--------------+-------------- |
|    0 |   0.52814723 | 20.186553761 | 5351792 | 1257325  |   |                                                           |
|    1 | 28.275128165 | dnf          | dnf     | dnf      |   |                                                           |

Well that one didn't even get past the first iteration. Here's for =rules.json=.

#+name: 2d-conv-rules
| iter |      search |        apply |   enodes | eclasses |
|------+-------------+--------------+----------+----------|
|    0 | 0.001417728 |  0.039550018 |    21244 |     9307 |
|    1 | 0.204570658 |  5.523102448 |  1584012 |   389298 |
|    2 | 2.652106883 | 50.953702258 | 11072618 |  1046329 |
|    3 | 6.367701421 | 94.489983124 | 22170759 |  1334273 |
|    4 | 6.961618305 | 62.414715545 | 22298735 |  1334273 |
|    5 | 6.709916788 | 61.691662932 | 22298735 |  1334273 |

What happens when the iterations for the first phase are 3 instead of 2? 

=expanding.json=:
| iter | search             |        apply |   enodes | eclasses |
|------+--------------------+--------------+----------+----------|
|    0 | 2.2267050680000002 | 94.615348931 | 22398479 |  5291230 |
|    1 | killed             |              |          |          |

=rules.json=:
| iter |             search |        apply |  enodes | eclasses |
|------+--------------------+--------------+---------+----------|
|    0 |        0.002882457 |  0.089417886 |   44589 |    16935 |
|    1 | 1.1553220180000001 | 41.801752809 | 9287979 |  1841504 |
|    2 |        71.03608476 |              |         |          |

Well that just straight up doesn't work? I thought this did work? Maybe it works for =q-prod=?

=rules.json= (expansion iter=2):
#+name: q-prod-rules
| iter |       search |         apply |    enodes | eclasses |
|------+--------------+---------------+-----------+----------|
|    0 |  0.003289253 |   0.087861545 |     40076 |    13194 |
|    1 |    0.4940899 |  14.097727038 |   3491672 |   389368 |
|    2 |  4.382978251 | 108.309431318 |  22406861 |  2242549 |
|    3 | 21.961383955 | 509.715477098 |  93835967 |  4255447 |
|    4 | 32.882815934 | 516.881415174 | 121591083 |  5186668 |
|    5 | 39.845039008 | 579.464795449 | 148036094 |  5487499 |
|    6 | 40.947749726 | 506.179938106 | 148796585 |  5487679 |
|    7 | 39.604264858 | 499.249599669 | 148797017 |  5487679 |
|    8 | 39.773607888 | 495.748338123 | 148797017 |  5487679 |

=expanding.json=: (expansion iter=2)
#+name: q-prod-expanding
| iter |             search |         apply |   enodes | eclasses |
|------+--------------------+---------------+----------+----------|
|    0 |        0.004915533 |   0.147002059 |    69679 |    31754 |
|    1 |        0.923069946 |  29.454689936 |  6588293 |   621366 |
|    2 | 5.8174557159999996 | 118.615584968 | 26212795 |  1168475 |
|    3 |        8.361541658 | 103.133977164 | 30353946 |  1467215 |
|    4 |        9.924798331 |  96.731343429 | 32306248 |  1793088 |
|    5 |       11.991250729 | 100.797493646 | 34176327 |  2051353 |
|    6 |       14.050943633 |  104.57464641 | 35590348 |  2287209 |
|    7 |       14.867557774 | 106.430438446 | 36700255 |  2452669 |
|    8 |       15.945125517 | 113.027889121 | 37740552 |  2581089 |
|    9 |       17.062338049 | 109.568791432 | 38198441 |  2612457 |
|   10 |       16.684745949 | 110.268900637 | 38394245 |  2639187 |
|   11 |       17.041021852 | 110.898836666 | 38516315 |  2645943 |
|   12 |          17.914887 | 114.840112695 | 38555735 |  2647311 |
|   13 |       17.774444006 | 114.964675838 | 38561261 |  2647707 |
|   14 |       17.121141341 | 109.669074948 | 38562089 |  2647887 |
|   15 |       17.054257338 | 109.208855336 | 38562089 |  2647887 |

*** Making some graphs

#+header: :var data=q-prod-expanding
#+header: :file ruleset-analysis.png
#+begin_src R :session *ruleset* :colnames yes :results graphics file
library(tidyverse)

data %>%
  ggplot(aes(x = iter)) +
  geom_line(aes(y = search / apply, color="s/a")) +
  geom_line(aes(y = eclasses / enodes, color="c/n")) +
  scale_color_discrete()
#+end_src

#+RESULTS:
[[file:ruleset-analysis.png]]

** Cycle Estimates compared with Dios

| X | Benchmark              | Cost | Stock Cycles | Comp Gen Cycles |
|---+------------------------+------+--------------+-----------------|
|   | 2d-conv/3x3_2x2_4r     |      |           58 |              68 |
|   | 2d-conv/3x3_3x3_4r     |      |          135 |             dnf |
|   | 2d-conv/3x5_3x3_4r     |      |          155 |                 |
|   | 2d-conv/4x4_3x3_4r     |      |          179 |                 |
|   | 2d-conv/8x8_3x3_4r     |      |          450 |                 |
|   | 2d-conv/10x10_2x2_4r   |      |          284 |                 |
|   | 2d-conv/10x10_2x2_4r   |      |          284 |                 |
|   | 2d-conv/10x10_3x3_4r   |      |          713 |                 |
|   | 2d-conv/10x10_4x4_4r   |      |         1517 |                 |
|   | 2d-conv/16x16_2x2_4r   |      |          741 |                 |
|   | 2d-conv/16x16_3x3_4r   |      |         1938 |                 |
|   | 2d-conv/16x16_4x4_4r   |      |         8402 |                 |
| D | mat-mul/2x2_2x2_4r     |      |           33 |              33 |
| D | mat-mul/2x3_3x3_4r     |      |           40 |              40 |
| D | mat-mul/3x3_3x3_4r     |      |           44 |              50 |
| I | mat-mul/4x4_4x4_4r     |      |           48 |             dnf |
|   | mat-mul/8x8_8x8_4r     |      |          207 |                 |
|   | mat-mul/10x10_10x10_4r |      |          724 |                 |
|   | mat-mul/16x16_16x16_4r |      |        14115 |                 |
| F | q-prod/4r              |      |           63 |              66 |
|   | qr-decomp/3_4r         |      |          616 |             dnf |
|   | qr-decomp/4_4r         |      |          586 |                 |

** expanding vs standard

| Benchmark              | Expanding | Ruler  |
|------------------------+-----------+--------|
| 2d-conv/3x3_2x2_4r     | y         | y      |
| 2d-conv/3x3_3x3_4r     | y         | y      |
| 2d-conv/3x5_3x3_4r     | killed    | killed |
| 2d-conv/4x4_3x3_4r     | killed    | killed |
| 2d-conv/8x8_3x3_4r     | killed    | killed |
| 2d-conv/10x10_2x2_4r   | killed    | killed |
| 2d-conv/10x10_3x3_4r   | killed    | killed |
| 2d-conv/10x10_4x4_4r   | killed    | killed |
| 2d-conv/16x16_2x2_4r   | killed    | killed |
| 2d-conv/16x16_3x3_4r   | killed    | killed |
| 2d-conv/16x16_4x4_4r   | killed    | killed |
| mat-mul/2x2_2x2_4r     | y         | y      |
| mat-mul/2x3_3x3_4r     | y         | y      |
| mat-mul/3x3_3x3_4r     | y         | y      |
| mat-mul/4x4_4x4_4r     | killed    | y      |
| mat-mul/8x8_8x8_4r     | killed    | killed |
| mat-mul/10x10_10x10_4r |           |        |
| mat-mul/16x16_16x16_4r |           |        |
| q-prod/4r              | y         | y      |
| qr-decomp/3_4r         | killed    | killed |
| qr-decomp/4_4r         | killed    | killed |

** some tables

| Benchmark              | Ruleset | Looping |
|------------------------+---------+---------|
| mat-mul/2x2_2x2_4r     |         |         |
| mat-mul/2x3_3x3_4r     |         |         |
| mat-mul/3x3_3x3_4r     |         |         |
| mat-mul/4x4_4x4_4r     |         |         |
| mat-mul/8x8_8x8_4r     |         |         |
| mat-mul/10x10_10x10_4r |         |         |
| mat-mul/16x16_16x16_4r |         |         |

** egraph cost for all benchmarks, new cost vs old cost with looping (expanding rules)

| Benchmark              | Ruleset   | Looping |    Cost |
|------------------------+-----------+---------+---------|
| mat-mul/2x2_2x2_4r     |           |         |         |
| mat-mul/2x3_3x3_4r     |           |         |         |
| mat-mul/3x3_3x3_4r     |           |         |         |
| mat-mul/4x4_4x4_4r     |           |         |         |
| mat-mul/8x8_8x8_4r     |           |         |         |
| mat-mul/10x10_10x10_4r |           |         |         |
| mat-mul/16x16_16x16_4r | expansion | y       | 2546.98 |
|                        | ruler     | y       | 2829.72 |
   
This is showing that when we have this looping config, the greedy cost function is essential

#+begin_src R :session cycest :results none
library(tidyverse)
library(extrafont)
#+end_src

#+begin_src R :session cycest :colnames yes :results graphics file :file greedy_cost.svg
data <- read.csv("greedy_cost_works.csv")

# fix the order of the df in place
data$params <- factor(data$params, levels=rev(unique(data$params)))

data %>%
  filter(benchmark == "2d-conv") %>%
  ggplot(aes(fill=costfn, x=params, y=egraph_cost)) +
  geom_bar(position="dodge", stat="identity", color="black") +
  ## geom_text(
  ##   aes(label=round(egraph_cost)),
  ##   color="black",
  ##   size=3.5,
  ##   position=position_dodge(0.9)) +
  labs(x="Params", y="EGraph Cost", fill="Cost Function") +
  coord_flip() + theme_minimal() +
  theme(
    legend.position = c(0.80, 0.90),
    legend.background = element_rect(fill = "white"),
    text = element_text(size=16, face="bold")
  )
  ## theme(axis.text.x = element_text(angle = 45, vjust = 0.9, hjust=1))
#+end_src

#+RESULTS:
[[file:greedy_cost.svg]]

Shows how the cost evolves over different iterations. This is ignoring phase differences

#+begin_src R :session cycest :colnames yes :results graphics file :file iter_cost.svg
data <- read.csv("2d-conv-3x3_3x3_iter.csv")

data %>%
  group_by(pruning) %>%
  mutate(cost = cost / max(cost)) %>%
  ggplot(aes(x=index, y=cost, group=pruning, color=pruning)) +
  geom_line() + geom_point() +
  theme_minimal() +
  labs(x="Iteration", y="Cost / max(Cost)", color="Cost Function") +
  theme(
    legend.position = c(0.80, 0.90),
    legend.background = element_rect(fill = "white"),
    text = element_text(size=16, face="bold")
  )
#+end_src

#+RESULTS:
[[file:iter_cost.svg]]

Plot the size of the graph over time.

#+begin_src R :session cycest :colnames yes :results graphics file :file iter_size.svg
data <- read.csv("2d-conv-3x3_3x3_iter.csv")
data %>%
  group_by(costfn) %>%
  mutate(cost = cost / max(cost)) %>%
  ggplot(aes(
    x=log10(nodes),
    y=cost,
    group=costfn,
    color=costfn,
    linetype=costfn,
  )) +
  geom_path(size=1.5, arrow=arrow()) + geom_point(size=4) +
  scale_color_discrete(labels=c("Pruning", "No pruning")) +
  labs(
    x="Log10(Node Count)",
    y="Normalized Cost",
    color="Cost Function"
  ) +
  guides(linetype="none") +
  theme_minimal() +
  theme(
    legend.position = c(0.85, 0.9),
    legend.background = element_rect(fill = "white"),
    text = element_text(size=16, face="bold")
  )
#+end_src

#+RESULTS:
[[file:iter_size.svg]]

Try plotting something like the ratio of cost to size of graph.

#+begin_src R :session cycest :colnames yes :results graphics file :file scheduler-backoff.png
data <- read.csv("~/Research/comp-gen/server/completed/2d-conv_3x3_3x3/20/data.csv")

data %>%
  filter(name == "nodes" | name == "cost" & iteration != "report") %>%
  pivot_wider(
    names_from = name,
    values_from = value
  ) %>%
  mutate(
    cost = as.numeric(cost),
    nodes = as.numeric(nodes),
  ) %>%
  ggplot(aes(
    x=log10(nodes),
    y=cost/max(cost)
  )) +
  geom_path(linewidth=1.5) + geom_point(size=2) +
  ylim(0, 1) +
  theme_minimal() + theme(
    legend.position = c(0.85, 0.9),
    legend.background = element_rect(fill = "white"),
    text = element_text(size=16, face="bold")
  )
#+end_src

#+RESULTS:
[[file:scheduler-backoff.png]]

Cycle counts, stock dios vs compgen

#+begin_src R :session cycest :colnames yes :results graphics file :file cycles-performance.svg
data <- read.csv("cycles.csv")

data$benchmark <- factor(data$benchmark, levels=unique(data$benchmark))

data %>%
  group_by(benchmark) %>%
  mutate(
    stock_norm = 1,
    compgen_norm = compgen / stock
  ) %>%
  pivot_longer(
    cols = !benchmark,
    names_to = "compiler",
    values_to = "cycles"
  ) %>% 
  filter(compiler == "stock_norm" | compiler == "compgen_norm") %>%
  ggplot(aes(
    x=benchmark,
    y=cycles,
    fill=compiler
  )) +
  geom_bar(position="dodge", stat="identity") +
  ylim(0, 1.5) +
  scale_fill_discrete(labels=c("Compgen", "Stock Dios")) +
  labs(y="Normalized Cycles", fill="Compiler") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, vjust = 0.9, hjust=1),
    axis.title.x = element_blank(),
    legend.position = c(0.85, 0.9),
    legend.background = element_rect(fill = "white"),
    text = element_text(size=16, face="bold")
  )
#+end_src

#+RESULTS:
[[file:cycles-performance.svg]]

#+begin_src R :session cycest :colnames yes
data <- read.csv("~/Research/comp-gen/server/completed/2d-conv_3x3_3x3/13/data.csv")
data %>%
  filter((name == "nodes" | name == "cost") & iteration != "report") %>%
  pivot_wider(
    names_from=name,
    values_from=value
  ) %>%
  select(cost, nodes) %>%
  mutate(type="pruning", iteration=row_number()) %>%
  select(iteration, type, name, value)
#+end_src

#+RESULTS:
: Could not parse R result

