warning: unnecessary parentheses around `if` condition
   --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/enumo/ruleset.rs:482:16
    |
482 |             if (loop_block_start - beginning > time_limit){
    |                ^                                         ^
    |
    = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
    |
482 -             if (loop_block_start - beginning > time_limit){
482 +             if loop_block_start - beginning > time_limit {
    |

warning: unused import: `log::debug`
  --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/enumo/scheduler.rs:44:13
   |
44 |         use log::debug;
   |             ^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `iter::FromIterator`
 --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/enumo/sexp.rs:1:25
  |
1 | use std::{str::FromStr, iter::FromIterator};
  |                         ^^^^^^^^^^^^^^^^^^

warning: unused import: `fmt::Display`
 --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/enumo/sexp.rs:2:34
  |
2 | use std::{collections::VecDeque, fmt::Display};
  |                                  ^^^^^^^^^^^^

warning: unused imports: `Mutex`, `RwLock`
 --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/enumo/workload.rs:6:25
  |
6 | use std::sync::{atomic, Mutex, RwLock};
  |                         ^^^^^  ^^^^^^

warning: unused import: `lazy_static::lazy_static`
 --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/enumo/workload.rs:7:5
  |
7 | use lazy_static::lazy_static;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::cell::RefCell`
 --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/enumo/workload.rs:8:5
  |
8 | use std::cell::RefCell;
  |     ^^^^^^^^^^^^^^^^^^

warning: the item `Display` is imported redundantly
  --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/language.rs:2:18
   |
2  |     fmt::{Debug, Display},
   |                  ^^^^^^^
...
10 | use crate::*;
   |     -------- the item `Display` is already imported here

warning: unused import: `log::debug`
  --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/language.rs:69:13
   |
69 |         use log::debug;
   |             ^^^^^^^^^^

warning: unused import: `File`
 --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/logger.rs:2:29
  |
2 |     fs::{self, OpenOptions, File},
  |                             ^^^^

warning: unused import: `io::Write`
 --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/recipe_utils.rs:1:26
  |
1 | use std::{time::Instant, io::Write};
  |                          ^^^^^^^^^

warning: the item `Instant` is imported redundantly
  --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/recipe_utils.rs:36:9
   |
1  | use std::{time::Instant, io::Write};
   |           ------------- the item `Instant` is already imported here
...
36 |     use std::time::Instant;
   |         ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::fs::File`
  --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/recipe_utils.rs:38:9
   |
38 |     use std::fs::File;
   |         ^^^^^^^^^^^^^

warning: unused variable: `recexpr_x`
  --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/language.rs:83:13
   |
83 |         let recexpr_x = to.clone().simplest;
   |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_recexpr_x`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `recexpr_y`
  --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/language.rs:84:13
   |
84 |         let recexpr_y = from.clone().simplest;
   |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_recexpr_y`

warning: associated functions `substitute_inner` and `substitute` are never used
   --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/enumo/workload.rs:205:19
    |
87  | impl Workload {
    | ------------- associated functions in this implementation
...
205 |     pub(crate) fn substitute_inner(name: std::string::String, peg: Sexp, hole: Sexp) -> Vec<Sexp> {
    |                   ^^^^^^^^^^^^^^^^
...
222 |     pub(crate) fn substitute(name: std::string::String, peg: Sexp, hole: Sexp) -> Sexp {
    |                   ^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: `ruler` (lib) generated 16 warnings (run `cargo fix --lib -p ruler` to apply 11 suggestions)
warning: unused import: `ptr::null`
 --> /Users/benginow/Projects/isaria/comp-gen/comp-gen/src/config.rs:1:26
  |
1 | use std::{path::PathBuf, ptr::null};
  |                          ^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `ruler::Phase`
 --> /Users/benginow/Projects/isaria/comp-gen/comp-gen/src/config.rs:3:5
  |
3 | use ruler::Phase;
  |     ^^^^^^^^^^^^

warning: unused import: `egg`
 --> /Users/benginow/Projects/isaria/comp-gen/comp-gen/src/phases.rs:2:5
  |
2 | use egg::*;
  |     ^^^

warning: unused import: `egg`
 --> /Users/benginow/Projects/isaria/comp-gen/comp-gen/src/run.rs:4:5
  |
4 | use egg::*;
  |     ^^^

warning: `comp-gen` (lib) generated 4 warnings (run `cargo fix --lib -p comp-gen` to apply 2 suggestions)
   Compiling dios-lang v0.1.0 (/Users/benginow/Projects/isaria/comp-gen/dios-lang)
warning: the item `egg` is imported redundantly
 --> src/cost.rs:1:11
  |
1 | use egg::{self, CostFunction, Language};
  |           ^^^^ the item `egg` is already defined here
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `egg::*`
 --> src/error.rs:1:5
  |
1 | use egg::*;
  |     ^^^^^^

warning: unused import: `ruler::SynthLanguage`
 --> src/fuzz.rs:5:5
  |
5 |     ruler::SynthLanguage,
  |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `egg::*`
 --> src/handwritten.rs:1:5
  |
1 | use egg::*;
  |     ^^^^^^

warning: unused imports: `FromOp`, `define_language`
 --> src/lang.rs:1:11
  |
1 | use egg::{define_language, Id, Language, FromOp, EGraph};
  |           ^^^^^^^^^^^^^^^                ^^^^^^

warning: unused import: `self`
 --> src/lang.rs:6:23
  |
6 | use comp_gen::ruler::{self, SynthLanguage, enumo::*, map, self_product, SynthAnalysis, CVec, ValidationResult};
  |                       ^^^^

warning: unused import: `ToPrimitive`
  --> src/lang.rs:10:27
   |
10 | use num::{integer::Roots, ToPrimitive};
   |                           ^^^^^^^^^^^

warning: unused import: `log::debug`
 --> src/synthesis.rs:4:5
  |
4 | use log::debug;
  |     ^^^^^^^^^^

warning: unused imports: `ToPrimitive`, `integer::Roots`
 --> src/synthesis.rs:5:11
  |
5 | use num::{integer::Roots, ToPrimitive};
  |           ^^^^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `std::thread::JoinHandle`
  --> src/synthesis.rs:12:5
   |
12 | use std::thread::JoinHandle;
   |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `synth`
  --> src/synthesis.rs:14:19
   |
14 | use crate::{lang, synth, Res};
   |                   ^^^^^

warning: unused import: `generate_rules`
  --> src/synthesis.rs:15:19
   |
15 | use crate::util::{generate_rules, handpicked, handpicked_thinner, iter_dios_lt, iter_dios_eq, vals, vars};
   |                   ^^^^^^^^^^^^^^

warning: unused import: `core::time::Duration`
   --> src/synthesis.rs:238:9
    |
238 |     use core::time::Duration;
    |         ^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `FromOp`, `define_language`
 --> src/desugared_lang.rs:1:17
  |
1 | use egg::{self, define_language, Id, Language, FromOp};
  |                 ^^^^^^^^^^^^^^^                ^^^^^^

warning: the item `egg` is imported redundantly
 --> src/desugared_lang.rs:1:11
  |
1 | use egg::{self, define_language, Id, Language, FromOp};
  |           ^^^^ the item `egg` is already defined here

warning: unused import: `enumo::*`
 --> src/desugared_lang.rs:7:11
  |
7 |     self, enumo::*, ValidationResult,
  |           ^^^^^^^^

warning: unused imports: `Res`, `desugared_workloads::*`, `util`
  --> src/desugared_lang.rs:15:29
   |
15 | use crate::{desugared_lang, desugared_workloads::*, smt::SmtEquals, Res, util};
   |                             ^^^^^^^^^^^^^^^^^^^^^^                  ^^^  ^^^^

warning: unused imports: `EGraph`, `Id`
 --> src/desugared_synthesis.rs:4:11
  |
4 | use egg::{EGraph, Id};
  |           ^^^^^^  ^^

warning: unused import: `log::debug`
 --> src/desugared_synthesis.rs:5:5
  |
5 | use log::debug;
  |     ^^^^^^^^^^

warning: unused import: `rand::Rng`
 --> src/desugared_synthesis.rs:6:5
  |
6 | use rand::Rng;
  |     ^^^^^^^^^

warning: unused import: `rand_pcg::Pcg32`
 --> src/desugared_synthesis.rs:7:5
  |
7 | use rand_pcg::Pcg32;
  |     ^^^^^^^^^^^^^^^

warning: unused imports: `CVec`, `SynthAnalysis`, `SynthLanguage`, `map`, `self_product`
 --> src/desugared_synthesis.rs:9:5
  |
9 |     map, self_product, CVec, SynthAnalysis, SynthLanguage
  |     ^^^  ^^^^^^^^^^^^  ^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^

warning: unused import: `smt::SmtEquals`
  --> src/desugared_synthesis.rs:12:53
   |
12 | use crate::{desugared_lang, desugared_workloads::*, smt::SmtEquals, Res, util::*};
   |                                                     ^^^^^^^^^^^^^^

warning: unused import: `ValidationResult`
  --> src/desugared_synthesis.rs:73:25
   |
73 |         self, enumo::*, ValidationResult,
   |                         ^^^^^^^^^^^^^^^^

warning: unused imports: `EGraph`, `Id`
  --> src/desugared_synthesis.rs:75:15
   |
75 |     use egg::{EGraph, Id};
   |               ^^^^^^  ^^

warning: unused import: `log::debug`
  --> src/desugared_synthesis.rs:76:9
   |
76 |     use log::debug;
   |         ^^^^^^^^^^

warning: unused import: `rand::Rng`
  --> src/desugared_synthesis.rs:77:9
   |
77 |     use rand::Rng;
   |         ^^^^^^^^^

warning: unused import: `rand_pcg::Pcg32`
  --> src/desugared_synthesis.rs:78:9
   |
78 |     use rand_pcg::Pcg32;
   |         ^^^^^^^^^^^^^^^

warning: unused imports: `CVec`, `SynthAnalysis`, `SynthLanguage`, `map`, `self_product`
  --> src/desugared_synthesis.rs:80:9
   |
80 |         map, self_product, CVec, SynthAnalysis, SynthLanguage
   |         ^^^  ^^^^^^^^^^^^  ^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^

warning: unused imports: `Res`, `desugared_lang`, `desugared_workloads::*`, `smt::SmtEquals`
  --> src/desugared_synthesis.rs:82:17
   |
82 |     use crate::{desugared_lang, desugared_workloads::*, smt::SmtEquals, Res};
   |                 ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^  ^^^

warning: unused imports: `default_compiler_config`, `self`
  --> src/main.rs:19:24
   |
19 | use comp_gen::config::{self, default_compiler_config};
   |                        ^^^^  ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `egg::*`
  --> src/main.rs:20:5
   |
20 | use egg::*;
   |     ^^^^^^

warning: unreachable statement
  --> src/fuzz.rs:34:9
   |
31 |         return false;
   |         ------------ any code following this expression is unreachable
...
34 |         let mut rng = Lcg64Xsh32::new(0,0);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused import: `egg`
 --> src/desugar.rs:3:5
  |
3 | use egg::*;
  |     ^^^

warning: unused import: `Language`
 --> src/desugared_lang.rs:1:38
  |
1 | use egg::{self, define_language, Id, Language, FromOp};
  |                                      ^^^^^^^^

warning: variable `length` is assigned to, but never used
  --> src/fuzz.rs:79:17
   |
79 |         let mut length = 0;
   |                 ^^^^^^
   |
   = note: consider using `_length` instead
   = note: `#[warn(unused_variables)]` on by default

warning: value assigned to `length` is never read
  --> src/fuzz.rs:95:13
   |
95 |             length = cvec.len();
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?
   = note: `#[warn(unused_assignments)]` on by default

warning: unused variable: `lhs`
  --> src/fuzz.rs:25:9
   |
25 |         lhs: &egg::Pattern<Self>,
   |         ^^^ help: if this is intentional, prefix it with an underscore: `_lhs`

warning: unused variable: `rhs`
  --> src/fuzz.rs:26:9
   |
26 |         rhs: &egg::Pattern<Self>,
   |         ^^^ help: if this is intentional, prefix it with an underscore: `_rhs`

warning: unused variable: `graph`
   --> src/synthesis.rs:169:13
    |
169 |     let mut graph: HashMap<String, HashSet<String>> = HashMap::new();
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_graph`

warning: variable does not need to be mutable
   --> src/synthesis.rs:169:9
    |
169 |     let mut graph: HashMap<String, HashSet<String>> = HashMap::new();
    |         ----^^^^^
    |         |
    |         help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: type `Operations` is more private than the item `SynthesisConfig::operation_matching`
  --> src/synthesis.rs:39:5
   |
39 |     pub operation_matching: Operations,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ field `SynthesisConfig::operation_matching` is reachable at visibility `pub(crate)`
   |
note: but type `Operations` is only usable at visibility `pub(self)`
  --> src/synthesis.rs:30:1
   |
30 | enum Operations {
   | ^^^^^^^^^^^^^^^
   = note: `#[warn(private_interfaces)]` on by default

warning: field `nested` is never read
  --> src/main.rs:34:5
   |
32 | struct Cmdline {
   |        ------- field in this struct
33 |     #[argh(subcommand)]
34 |     nested: Commands,
   |     ^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: field `0` is never read
  --> src/main.rs:41:11
   |
41 |     Synth(SynthOpts),
   |     ----- ^^^^^^^^^
   |     |
   |     field in this variant
   |
help: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field
   |
41 |     Synth(()),
   |           ~~

warning: field `0` is never read
  --> src/main.rs:43:13
   |
43 |     Compile(CompileOpts),
   |     ------- ^^^^^^^^^^^
   |     |
   |     field in this variant
   |
help: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field
   |
43 |     Compile(()),
   |             ~~

warning: fields `output`, `config`, `synth`, and `checkpoint` are never read
  --> src/main.rs:51:5
   |
49 | pub struct SynthOpts {
   |            --------- fields in this struct
50 |     #[argh(positional)]
51 |     output: String,
   |     ^^^^^^
...
55 |     config: Option<synthesis::DiosConfig>,
   |     ^^^^^^
...
59 |     synth: Option<synthesis::SynthesisConfig>,
   |     ^^^^^
...
63 |     checkpoint: Option<PathBuf>,
   |     ^^^^^^^^^^
   |
   = note: `SynthOpts` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: multiple fields are never read
   --> src/main.rs:95:5
    |
92  | struct CompileOpts {
    |        ----------- fields in this struct
...
95  |     input: String,
    |     ^^^^^
...
99  |     dios_example_bin: PathBuf,
    |     ^^^^^^^^^^^^^^^^
...
103 |     dios_bin: PathBuf,
    |     ^^^^^^^^
...
107 |     dios_params: PathBuf,
    |     ^^^^^^^^^^^
...
111 |     vector_width: usize,
    |     ^^^^^^^^^^^^
...
115 |     rules: PathBuf,
    |     ^^^^^
...
119 |     pre_desugared: bool,
    |     ^^^^^^^^^^^^^
...
123 |     config: Option<comp_gen::config::CompilerConfiguration>,
    |     ^^^^^^
...
127 |     output_dir: Option<PathBuf>,
    |     ^^^^^^^^^^
...
131 |     costfn: String,
    |     ^^^^^^
    |
    = note: `CompileOpts` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: function `synth` is never used
   --> src/main.rs:148:4
    |
148 | fn synth(synth_opts: SynthOpts) -> Res<()> {
    |    ^^^^^

warning: function `compile` is never used
   --> src/main.rs:174:4
    |
174 | fn compile(opts: CompileOpts) -> Res<()> {
    |    ^^^^^^^

warning: associated functions `dios`, `alternative`, and `accurate` are never used
  --> src/cost.rs:26:12
   |
25 | impl VecCostFn {
   | -------------- associated functions in this implementation
26 |     pub fn dios() -> Self {
   |            ^^^^
...
40 |     pub fn alternative() -> Self {
   |            ^^^^^^^^^^^
...
54 |     pub fn accurate() -> Self {
   |            ^^^^^^^^

warning: associated function `dios` is never used
  --> src/cost.rs:84:12
   |
83 | impl VecCostFnDesugared {
   | ----------------------- associated function in this implementation
84 |     pub fn dios() -> Self {
   |            ^^^^

warning: function `build_litvec_rule_desugared` is never used
 --> src/handwritten.rs:6:8
  |
6 | pub fn build_litvec_rule_desugared(vec_width: usize) -> Vec<egg::Rewrite<VecLangDesugared, ()>> {
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `build_litvec_rule` is never used
  --> src/handwritten.rs:44:8
   |
44 | pub fn build_litvec_rule(vec_width: usize) -> Vec<egg::Rewrite<VecLang, ()>> {
   |        ^^^^^^^^^^^^^^^^^

warning: function `list_to_concats` is never used
 --> src/rewriteconcats.rs:6:8
  |
6 | pub fn list_to_concats(vec_width: usize, input: &str) -> io::Result<String> {
  |        ^^^^^^^^^^^^^^^

warning: function `to_value` is never used
 --> src/stringconversion.rs:7:4
  |
7 | fn to_value(s: &str, erase: bool) -> lexpr::Value {
  |    ^^^^^^^^

warning: function `to_egg` is never used
  --> src/stringconversion.rs:24:4
   |
24 | fn to_egg(
   |    ^^^^^^

warning: function `convert_string` is never used
  --> src/stringconversion.rs:99:8
   |
99 | pub fn convert_string(input: &str) -> io::Result<String> {
   |        ^^^^^^^^^^^^^^

warning: function `vecs_eq` is never used
  --> src/synthesis.rs:90:8
   |
90 | pub fn vecs_eq(lvec: &CVec<lang::VecLang>, rvec: &CVec<lang::VecLang>) -> bool {
   |        ^^^^^^^

warning: function `arity_shorting` is never used
   --> src/synthesis.rs:102:4
    |
102 | fn arity_shorting(depth: usize, values: Workload, variable_names: Workload, operations: Vec<Vec<String>>) -> Workload {
    |    ^^^^^^^^^^^^^^

warning: function `seed` is never used
   --> src/synthesis.rs:127:4
    |
127 | fn seed() -> ruler::enumo::Ruleset<lang::VecLang> {
    |    ^^^^

warning: function `generate_workload` is never used
   --> src/synthesis.rs:141:4
    |
141 | fn generate_workload(depth: usize, vals: Workload, vars: Workload,  filters: Vec<Filter>, ops: Vec<Vec<String>>, arity_truncation: bool, ...
    |    ^^^^^^^^^^^^^^^^^

warning: function `randomly_generate_operation_sets` is never used
   --> src/synthesis.rs:164:4
    |
164 | fn randomly_generate_operation_sets(set_size: usize, ops: Vec<Vec<String>>) -> Vec<(Vec<Vec<String>>, usize)> {
    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `ruleset_gen` is never used
   --> src/synthesis.rs:184:4
    |
184 | fn ruleset_gen(rules: &mut Ruleset<lang::VecLang>, 
    |    ^^^^^^^^^^^

warning: function `run` is never used
   --> src/synthesis.rs:232:8
    |
232 | pub fn run(
    |        ^^^

warning: associated functions `int1`, `bool2`, `vec3`, and `vec1_op` are never used
   --> src/desugared_lang.rs:133:8
    |
132 | impl desugared_lang::Value {
    | -------------------------- associated functions in this implementation
133 |     fn int1<F>(arg: &Self, f: F) -> Option<desugared_lang::Value>
    |        ^^^^
...
156 |     fn bool2<F>(lhs: &Self, rhs: &Self, f: F) -> Option<desugared_lang::Value>
    |        ^^^^^
...
193 |     fn vec3<F>(v1: &Self, v2: &Self, v3: &Self, f: F) -> Option<desugared_lang::Value>
    |        ^^^^
...
217 |     fn vec1_op<F>(vec: &Self, f: F) -> Option<desugared_lang::Value>
    |        ^^^^^^^

warning: function `sum_rules` is never used
  --> src/desugared_synthesis.rs:14:4
   |
14 | fn sum_rules(
   |    ^^^^^^^^^

warning: function `debugging_workload` is never used
  --> src/desugared_synthesis.rs:84:8
   |
84 |     fn debugging_workload() -> Workload {
   |        ^^^^^^^^^^^^^^^^^^

warning: function `workload_sum` is never used
 --> src/desugared_workloads.rs:6:8
  |
6 | pub fn workload_sum(ops: Vec<Vec<String>>) -> Workload {
  |        ^^^^^^^^^^^^

warning: function `number_of_terms` is never used
  --> src/util.rs:49:4
   |
49 | fn number_of_terms(operations: Vec<Vec<String>>, depth: usize, vars: usize) -> u64 {
   |    ^^^^^^^^^^^^^^^

warning: function `vectors` is never used
  --> src/util.rs:85:16
   |
85 | pub (crate) fn vectors() -> Workload {
   |                ^^^^^^^

warning: function `interesting_vectors_sum` is never used
  --> src/util.rs:95:15
   |
95 | pub(crate) fn interesting_vectors_sum(_scalar_ops: Vec<Vec<String>>) -> Workload {
   |               ^^^^^^^^^^^^^^^^^^^^^^^

warning: function `vals` is never used
   --> src/util.rs:109:15
    |
109 | pub(crate) fn vals() -> Workload {
    |               ^^^^

warning: function `vars` is never used
   --> src/util.rs:114:15
    |
114 | pub(crate) fn vars() -> Workload {
    |               ^^^^

warning: function `scalar_exprs` is never used
   --> src/util.rs:119:15
    |
119 | pub(crate) fn scalar_exprs(scalar_ops: Vec<Vec<String>>) -> Workload {
    |               ^^^^^^^^^^^^

warning: function `iter_dios` is never used
   --> src/util.rs:139:15
    |
139 | pub(crate) fn iter_dios(depth: usize, values: Workload, variable_names: Workload, filters: Vec<Filter>, operations: Vec<Vec<String>>) -> ...
    |               ^^^^^^^^^

warning: function `iter_dios_lt` is never used
   --> src/util.rs:161:15
    |
161 | pub(crate) fn iter_dios_lt(depth: usize, values: Workload, variable_names: Workload, filters: &mut Vec<Filter>, operations: Vec<Vec<Strin...
    |               ^^^^^^^^^^^^

warning: function `iter_dios_eq` is never used
   --> src/util.rs:168:15
    |
168 | pub(crate) fn iter_dios_eq(depth: usize, values: Workload, variable_names: Workload, filters: &mut Vec<Filter>, operations: Vec<Vec<Strin...
    |               ^^^^^^^^^^^^

warning: function `handpicked_thinner` is never used
   --> src/util.rs:175:15
    |
175 | pub(crate) fn handpicked_thinner() -> Vec<(Vec<Vec<String>>, usize)> {
    |               ^^^^^^^^^^^^^^^^^^

warning: function `handpicked` is never used
   --> src/util.rs:197:15
    |
197 | pub(crate) fn handpicked() -> Vec<(Vec<Vec<String>>, usize)> {
    |               ^^^^^^^^^^

warning: `dios-lang` (bin "dios-lang") generated 79 warnings (run `cargo fix --bin "dios-lang"` to apply 31 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 4.44s
warning: the following packages contain code that will be rejected by a future version of Rust: svg v0.7.2
note: to see what the problems were, use the option `--future-incompat-report`, or run `cargo report future-incompatibilities --id 1`
     Running `target/debug/dios-lang`
running desugared rules
vector filler is Set([List([Atom("Vec"), Atom("a"), Atom("b"), Atom("c"), Atom("d")]), List([Atom("Vec"), Atom("c"), Atom("b"), Atom("a"), Atom("d")]), List([Atom("Vec"), Atom("a"), Atom("d"), Atom("c"), Atom("b")]), List([Atom("Vec"), Atom("b"), Atom("a"), Atom("c"), Atom("d")]), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("d"), Atom("c")]), List([Atom("Vec"), Atom("d"), Atom("b"), Atom("c"), Atom("a")]), List([Atom("Vec"), Atom("d"), Atom("a"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("c"), Atom("0")]), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("0"), Atom("c")]), List([Atom("Vec"), Atom("a"), Atom("0"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("0"), Atom("a"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("0"), Atom("0"), Atom("a"), Atom("b")]), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("0"), Atom("0")]), List([Atom("Vec"), Atom("a"), Atom("0"), Atom("0"), Atom("0")])])
shfl workload
shuffles: ["(Vec 1 0 2 3)", "(Vec 0 1 3 2)", "(Vec 3 1 2 0)", "(Vec 0 3 2 1)", "(Vec 0 2 1 3)", "(Vec 2 1 0 3)", "(Vec 3 0 1 2)", "(Vec 1 2 3 0)"]
vector exprs: [List([Atom("Vec"), Atom("a"), Atom("b"), Atom("c"), Atom("d")]), List([Atom("Vec"), Atom("c"), Atom("b"), Atom("a"), Atom("d")]), List([Atom("Vec"), Atom("a"), Atom("d"), Atom("c"), Atom("b")]), List([Atom("Vec"), Atom("b"), Atom("a"), Atom("c"), Atom("d")]), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("d"), Atom("c")]), List([Atom("Vec"), Atom("d"), Atom("b"), Atom("c"), Atom("a")]), List([Atom("Vec"), Atom("d"), Atom("a"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("c"), Atom("0")]), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("0"), Atom("c")]), List([Atom("Vec"), Atom("a"), Atom("0"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("0"), Atom("a"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("0"), Atom("0"), Atom("a"), Atom("b")]), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("0"), Atom("0")]), List([Atom("Vec"), Atom("a"), Atom("0"), Atom("0"), Atom("0")])]
Shuffle workload is: [
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "b",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "a",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "b",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "a",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "b",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "a",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "b",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "a",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "b",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "a",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "b",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "a",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "3",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "b",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "a",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "b",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "d",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "a",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "d",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "c",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "b",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Shfl",
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "a",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
            List(
                [
                    Atom(
                        "Vec",
                    ),
                    Atom(
                        "1",
                    ),
                    Atom(
                        "2",
                    ),
                    Atom(
                        "3",
                    ),
                    Atom(
                        "0",
                    ),
                ],
            ),
        ],
    ),
    List(
        [
            Atom(
                "Vec",
            ),
            Atom(
                "a",
            ),
            Atom(
                "b",
            ),
            Atom(
                "c",
            ),
            Atom(
                "d",
            ),
        ],
    ),
    List(
        [
            Atom(
                "Vec",
            ),
            Atom(
                "c",
            ),
            Atom(
                "b",
            ),
            Atom(
                "a",
            ),
            Atom(
                "d",
            ),
        ],
    ),
    List(
        [
            Atom(
                "Vec",
            ),
            Atom(
                "a",
            ),
            Atom(
                "d",
            ),
            Atom(
                "c",
            ),
            Atom(
                "b",
            ),
        ],
    ),
    List(
        [
            Atom(
                "Vec",
            ),
            Atom(
                "b",
            ),
            Atom(
                "a",
            ),
            Atom(
                "c",
            ),
            Atom(
                "d",
            ),
        ],
    ),
    List(
        [
            Atom(
                "Vec",
            ),
            Atom(
                "a",
            ),
            Atom(
                "b",
            ),
            Atom(
                "d",
            ),
            Atom(
                "c",
            ),
        ],
    ),
    List(
        [
            Atom(
                "Vec",
            ),
            Atom(
                "d",
            ),
            Atom(
                "b",
            ),
            Atom(
                "c",
            ),
            Atom(
                "a",
            ),
        ],
    ),
    List(
        [
            Atom(
                "Vec",
            ),
            Atom(
                "d",
            ),
            Atom(
                "a",
            ),
            Atom(
                "b",
            ),
            Atom(
                "c",
            ),
        ],
    ),
    List(
        [
            Atom(
                "Vec",
            ),
            Atom(
                "a",
            ),
            Atom(
                "b",
            ),
            Atom(
                "c",
            ),
            Atom(
                "0",
            ),
        ],
    ),
    List(
        [
            Atom(
                "Vec",
            ),
            Atom(
                "a",
            ),
            Atom(
                "b",
            ),
            Atom(
                "0",
            ),
            Atom(
                "c",
            ),
        ],
    ),
    List(
        [
            Atom(
                "Vec",
            ),
            Atom(
                "a",
            ),
            Atom(
                "0",
            ),
            Atom(
                "b",
            ),
            Atom(
                "c",
            ),
        ],
    ),
    List(
        [
            Atom(
                "Vec",
            ),
            Atom(
                "0",
            ),
            Atom(
                "a",
            ),
            Atom(
                "b",
            ),
            Atom(
                "c",
            ),
        ],
    ),
    List(
        [
            Atom(
                "Vec",
            ),
            Atom(
                "0",
            ),
            Atom(
                "0",
            ),
            Atom(
                "a",
            ),
            Atom(
                "b",
            ),
        ],
    ),
    List(
        [
            Atom(
                "Vec",
            ),
            Atom(
                "a",
            ),
            Atom(
                "b",
            ),
            Atom(
                "0",
            ),
            Atom(
                "0",
            ),
        ],
    ),
    List(
        [
            Atom(
                "Vec",
            ),
            Atom(
                "a",
            ),
            Atom(
                "0",
            ),
            Atom(
                "0",
            ),
            Atom(
                "0",
            ),
        ],
    ),
]
h
shuffle workload looks like this: [List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("c"), Atom("d")]), List([Atom("Vec"), Atom("1"), Atom("0"), Atom("2"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("c"), Atom("b"), Atom("a"), Atom("d")]), List([Atom("Vec"), Atom("1"), Atom("0"), Atom("2"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("d"), Atom("c"), Atom("b")]), List([Atom("Vec"), Atom("1"), Atom("0"), Atom("2"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("b"), Atom("a"), Atom("c"), Atom("d")]), List([Atom("Vec"), Atom("1"), Atom("0"), Atom("2"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("d"), Atom("c")]), List([Atom("Vec"), Atom("1"), Atom("0"), Atom("2"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("d"), Atom("b"), Atom("c"), Atom("a")]), List([Atom("Vec"), Atom("1"), Atom("0"), Atom("2"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("d"), Atom("a"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("1"), Atom("0"), Atom("2"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("c"), Atom("0")]), List([Atom("Vec"), Atom("1"), Atom("0"), Atom("2"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("0"), Atom("c")]), List([Atom("Vec"), Atom("1"), Atom("0"), Atom("2"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("0"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("1"), Atom("0"), Atom("2"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("0"), Atom("a"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("1"), Atom("0"), Atom("2"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("0"), Atom("0"), Atom("a"), Atom("b")]), List([Atom("Vec"), Atom("1"), Atom("0"), Atom("2"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("0"), Atom("0")]), List([Atom("Vec"), Atom("1"), Atom("0"), Atom("2"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("0"), Atom("0"), Atom("0")]), List([Atom("Vec"), Atom("1"), Atom("0"), Atom("2"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("c"), Atom("d")]), List([Atom("Vec"), Atom("0"), Atom("1"), Atom("3"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("c"), Atom("b"), Atom("a"), Atom("d")]), List([Atom("Vec"), Atom("0"), Atom("1"), Atom("3"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("d"), Atom("c"), Atom("b")]), List([Atom("Vec"), Atom("0"), Atom("1"), Atom("3"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("b"), Atom("a"), Atom("c"), Atom("d")]), List([Atom("Vec"), Atom("0"), Atom("1"), Atom("3"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("d"), Atom("c")]), List([Atom("Vec"), Atom("0"), Atom("1"), Atom("3"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("d"), Atom("b"), Atom("c"), Atom("a")]), List([Atom("Vec"), Atom("0"), Atom("1"), Atom("3"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("d"), Atom("a"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("0"), Atom("1"), Atom("3"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("c"), Atom("0")]), List([Atom("Vec"), Atom("0"), Atom("1"), Atom("3"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("0"), Atom("c")]), List([Atom("Vec"), Atom("0"), Atom("1"), Atom("3"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("0"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("0"), Atom("1"), Atom("3"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("0"), Atom("a"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("0"), Atom("1"), Atom("3"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("0"), Atom("0"), Atom("a"), Atom("b")]), List([Atom("Vec"), Atom("0"), Atom("1"), Atom("3"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("0"), Atom("0")]), List([Atom("Vec"), Atom("0"), Atom("1"), Atom("3"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("0"), Atom("0"), Atom("0")]), List([Atom("Vec"), Atom("0"), Atom("1"), Atom("3"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("c"), Atom("d")]), List([Atom("Vec"), Atom("3"), Atom("1"), Atom("2"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("c"), Atom("b"), Atom("a"), Atom("d")]), List([Atom("Vec"), Atom("3"), Atom("1"), Atom("2"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("d"), Atom("c"), Atom("b")]), List([Atom("Vec"), Atom("3"), Atom("1"), Atom("2"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("b"), Atom("a"), Atom("c"), Atom("d")]), List([Atom("Vec"), Atom("3"), Atom("1"), Atom("2"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("d"), Atom("c")]), List([Atom("Vec"), Atom("3"), Atom("1"), Atom("2"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("d"), Atom("b"), Atom("c"), Atom("a")]), List([Atom("Vec"), Atom("3"), Atom("1"), Atom("2"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("d"), Atom("a"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("3"), Atom("1"), Atom("2"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("c"), Atom("0")]), List([Atom("Vec"), Atom("3"), Atom("1"), Atom("2"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("0"), Atom("c")]), List([Atom("Vec"), Atom("3"), Atom("1"), Atom("2"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("0"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("3"), Atom("1"), Atom("2"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("0"), Atom("a"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("3"), Atom("1"), Atom("2"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("0"), Atom("0"), Atom("a"), Atom("b")]), List([Atom("Vec"), Atom("3"), Atom("1"), Atom("2"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("0"), Atom("0")]), List([Atom("Vec"), Atom("3"), Atom("1"), Atom("2"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("0"), Atom("0"), Atom("0")]), List([Atom("Vec"), Atom("3"), Atom("1"), Atom("2"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("c"), Atom("d")]), List([Atom("Vec"), Atom("0"), Atom("3"), Atom("2"), Atom("1")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("c"), Atom("b"), Atom("a"), Atom("d")]), List([Atom("Vec"), Atom("0"), Atom("3"), Atom("2"), Atom("1")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("d"), Atom("c"), Atom("b")]), List([Atom("Vec"), Atom("0"), Atom("3"), Atom("2"), Atom("1")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("b"), Atom("a"), Atom("c"), Atom("d")]), List([Atom("Vec"), Atom("0"), Atom("3"), Atom("2"), Atom("1")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("d"), Atom("c")]), List([Atom("Vec"), Atom("0"), Atom("3"), Atom("2"), Atom("1")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("d"), Atom("b"), Atom("c"), Atom("a")]), List([Atom("Vec"), Atom("0"), Atom("3"), Atom("2"), Atom("1")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("d"), Atom("a"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("0"), Atom("3"), Atom("2"), Atom("1")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("c"), Atom("0")]), List([Atom("Vec"), Atom("0"), Atom("3"), Atom("2"), Atom("1")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("0"), Atom("c")]), List([Atom("Vec"), Atom("0"), Atom("3"), Atom("2"), Atom("1")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("0"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("0"), Atom("3"), Atom("2"), Atom("1")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("0"), Atom("a"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("0"), Atom("3"), Atom("2"), Atom("1")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("0"), Atom("0"), Atom("a"), Atom("b")]), List([Atom("Vec"), Atom("0"), Atom("3"), Atom("2"), Atom("1")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("0"), Atom("0")]), List([Atom("Vec"), Atom("0"), Atom("3"), Atom("2"), Atom("1")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("0"), Atom("0"), Atom("0")]), List([Atom("Vec"), Atom("0"), Atom("3"), Atom("2"), Atom("1")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("c"), Atom("d")]), List([Atom("Vec"), Atom("0"), Atom("2"), Atom("1"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("c"), Atom("b"), Atom("a"), Atom("d")]), List([Atom("Vec"), Atom("0"), Atom("2"), Atom("1"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("d"), Atom("c"), Atom("b")]), List([Atom("Vec"), Atom("0"), Atom("2"), Atom("1"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("b"), Atom("a"), Atom("c"), Atom("d")]), List([Atom("Vec"), Atom("0"), Atom("2"), Atom("1"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("d"), Atom("c")]), List([Atom("Vec"), Atom("0"), Atom("2"), Atom("1"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("d"), Atom("b"), Atom("c"), Atom("a")]), List([Atom("Vec"), Atom("0"), Atom("2"), Atom("1"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("d"), Atom("a"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("0"), Atom("2"), Atom("1"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("c"), Atom("0")]), List([Atom("Vec"), Atom("0"), Atom("2"), Atom("1"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("0"), Atom("c")]), List([Atom("Vec"), Atom("0"), Atom("2"), Atom("1"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("0"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("0"), Atom("2"), Atom("1"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("0"), Atom("a"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("0"), Atom("2"), Atom("1"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("0"), Atom("0"), Atom("a"), Atom("b")]), List([Atom("Vec"), Atom("0"), Atom("2"), Atom("1"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("0"), Atom("0")]), List([Atom("Vec"), Atom("0"), Atom("2"), Atom("1"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("0"), Atom("0"), Atom("0")]), List([Atom("Vec"), Atom("0"), Atom("2"), Atom("1"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("c"), Atom("d")]), List([Atom("Vec"), Atom("2"), Atom("1"), Atom("0"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("c"), Atom("b"), Atom("a"), Atom("d")]), List([Atom("Vec"), Atom("2"), Atom("1"), Atom("0"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("d"), Atom("c"), Atom("b")]), List([Atom("Vec"), Atom("2"), Atom("1"), Atom("0"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("b"), Atom("a"), Atom("c"), Atom("d")]), List([Atom("Vec"), Atom("2"), Atom("1"), Atom("0"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("d"), Atom("c")]), List([Atom("Vec"), Atom("2"), Atom("1"), Atom("0"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("d"), Atom("b"), Atom("c"), Atom("a")]), List([Atom("Vec"), Atom("2"), Atom("1"), Atom("0"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("d"), Atom("a"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("2"), Atom("1"), Atom("0"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("c"), Atom("0")]), List([Atom("Vec"), Atom("2"), Atom("1"), Atom("0"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("0"), Atom("c")]), List([Atom("Vec"), Atom("2"), Atom("1"), Atom("0"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("0"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("2"), Atom("1"), Atom("0"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("0"), Atom("a"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("2"), Atom("1"), Atom("0"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("0"), Atom("0"), Atom("a"), Atom("b")]), List([Atom("Vec"), Atom("2"), Atom("1"), Atom("0"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("0"), Atom("0")]), List([Atom("Vec"), Atom("2"), Atom("1"), Atom("0"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("0"), Atom("0"), Atom("0")]), List([Atom("Vec"), Atom("2"), Atom("1"), Atom("0"), Atom("3")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("c"), Atom("d")]), List([Atom("Vec"), Atom("3"), Atom("0"), Atom("1"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("c"), Atom("b"), Atom("a"), Atom("d")]), List([Atom("Vec"), Atom("3"), Atom("0"), Atom("1"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("d"), Atom("c"), Atom("b")]), List([Atom("Vec"), Atom("3"), Atom("0"), Atom("1"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("b"), Atom("a"), Atom("c"), Atom("d")]), List([Atom("Vec"), Atom("3"), Atom("0"), Atom("1"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("d"), Atom("c")]), List([Atom("Vec"), Atom("3"), Atom("0"), Atom("1"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("d"), Atom("b"), Atom("c"), Atom("a")]), List([Atom("Vec"), Atom("3"), Atom("0"), Atom("1"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("d"), Atom("a"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("3"), Atom("0"), Atom("1"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("c"), Atom("0")]), List([Atom("Vec"), Atom("3"), Atom("0"), Atom("1"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("0"), Atom("c")]), List([Atom("Vec"), Atom("3"), Atom("0"), Atom("1"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("0"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("3"), Atom("0"), Atom("1"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("0"), Atom("a"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("3"), Atom("0"), Atom("1"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("0"), Atom("0"), Atom("a"), Atom("b")]), List([Atom("Vec"), Atom("3"), Atom("0"), Atom("1"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("0"), Atom("0")]), List([Atom("Vec"), Atom("3"), Atom("0"), Atom("1"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("0"), Atom("0"), Atom("0")]), List([Atom("Vec"), Atom("3"), Atom("0"), Atom("1"), Atom("2")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("c"), Atom("d")]), List([Atom("Vec"), Atom("1"), Atom("2"), Atom("3"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("c"), Atom("b"), Atom("a"), Atom("d")]), List([Atom("Vec"), Atom("1"), Atom("2"), Atom("3"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("d"), Atom("c"), Atom("b")]), List([Atom("Vec"), Atom("1"), Atom("2"), Atom("3"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("b"), Atom("a"), Atom("c"), Atom("d")]), List([Atom("Vec"), Atom("1"), Atom("2"), Atom("3"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("d"), Atom("c")]), List([Atom("Vec"), Atom("1"), Atom("2"), Atom("3"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("d"), Atom("b"), Atom("c"), Atom("a")]), List([Atom("Vec"), Atom("1"), Atom("2"), Atom("3"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("d"), Atom("a"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("1"), Atom("2"), Atom("3"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("c"), Atom("0")]), List([Atom("Vec"), Atom("1"), Atom("2"), Atom("3"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("0"), Atom("c")]), List([Atom("Vec"), Atom("1"), Atom("2"), Atom("3"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("0"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("1"), Atom("2"), Atom("3"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("0"), Atom("a"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("1"), Atom("2"), Atom("3"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("0"), Atom("0"), Atom("a"), Atom("b")]), List([Atom("Vec"), Atom("1"), Atom("2"), Atom("3"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("0"), Atom("0")]), List([Atom("Vec"), Atom("1"), Atom("2"), Atom("3"), Atom("0")])]), List([Atom("Shfl"), List([Atom("Vec"), Atom("a"), Atom("0"), Atom("0"), Atom("0")]), List([Atom("Vec"), Atom("1"), Atom("2"), Atom("3"), Atom("0")])]), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("c"), Atom("d")]), List([Atom("Vec"), Atom("c"), Atom("b"), Atom("a"), Atom("d")]), List([Atom("Vec"), Atom("a"), Atom("d"), Atom("c"), Atom("b")]), List([Atom("Vec"), Atom("b"), Atom("a"), Atom("c"), Atom("d")]), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("d"), Atom("c")]), List([Atom("Vec"), Atom("d"), Atom("b"), Atom("c"), Atom("a")]), List([Atom("Vec"), Atom("d"), Atom("a"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("c"), Atom("0")]), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("0"), Atom("c")]), List([Atom("Vec"), Atom("a"), Atom("0"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("0"), Atom("a"), Atom("b"), Atom("c")]), List([Atom("Vec"), Atom("0"), Atom("0"), Atom("a"), Atom("b")]), List([Atom("Vec"), Atom("a"), Atom("b"), Atom("0"), Atom("0")]), List([Atom("Vec"), Atom("a"), Atom("0"), Atom("0"), Atom("0")])]
vector, [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(88)])), Some(Vec([Int(64), Int(-91), Int(98), Int(3)])), Some(Vec([Int(14), Int(83), Int(-29), Int(92)])), Some(Vec([Int(97), Int(89), Int(81), Int(93)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(-54)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(29)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(-59)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(39)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(65)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
vector, [Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)]))]
indices are: [Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(88)])), Some(Vec([Int(64), Int(-91), Int(98), Int(3)])), Some(Vec([Int(14), Int(83), Int(-29), Int(92)])), Some(Vec([Int(97), Int(89), Int(81), Int(93)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(-54)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(29)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(-59)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(39)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(65)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(69), Int(-57), Int(59), Int(-57)])), Some(Vec([Int(-36), Int(-25), Int(-54), Int(88)])), Some(Vec([Int(-91), Int(64), Int(98), Int(3)])), Some(Vec([Int(83), Int(14), Int(-29), Int(92)])), Some(Vec([Int(89), Int(97), Int(81), Int(93)])), Some(Vec([Int(-74), Int(13), Int(-38), Int(-54)])), Some(Vec([Int(-52), Int(67), Int(-8), Int(29)])), Some(Vec([Int(76), Int(-36), Int(-8), Int(-59)])), Some(Vec([Int(22), Int(-61), Int(-77), Int(39)])), Some(Vec([Int(11), Int(-16), Int(-26), Int(65)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
vector, [Some(Vec([Int(59), Int(69), Int(-57), Int(-57)])), Some(Vec([Int(-54), Int(-36), Int(-25), Int(88)])), Some(Vec([Int(98), Int(-91), Int(64), Int(3)])), Some(Vec([Int(-29), Int(83), Int(14), Int(92)])), Some(Vec([Int(81), Int(89), Int(97), Int(93)])), Some(Vec([Int(-38), Int(-74), Int(13), Int(-54)])), Some(Vec([Int(-8), Int(-52), Int(67), Int(29)])), Some(Vec([Int(-8), Int(76), Int(-36), Int(-59)])), Some(Vec([Int(-77), Int(22), Int(-61), Int(39)])), Some(Vec([Int(-26), Int(11), Int(-16), Int(65)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
indices are: [Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)]))]
shuffle vec is: [Some(Vec([Int(59), Int(69), Int(-57), Int(-57)])), Some(Vec([Int(-54), Int(-36), Int(-25), Int(88)])), Some(Vec([Int(98), Int(-91), Int(64), Int(3)])), Some(Vec([Int(-29), Int(83), Int(14), Int(92)])), Some(Vec([Int(81), Int(89), Int(97), Int(93)])), Some(Vec([Int(-38), Int(-74), Int(13), Int(-54)])), Some(Vec([Int(-8), Int(-52), Int(67), Int(29)])), Some(Vec([Int(-8), Int(76), Int(-36), Int(-59)])), Some(Vec([Int(-77), Int(22), Int(-61), Int(39)])), Some(Vec([Int(-26), Int(11), Int(-16), Int(65)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(69), Int(59), Int(-57), Int(-57)])), Some(Vec([Int(-36), Int(-54), Int(-25), Int(88)])), Some(Vec([Int(-91), Int(98), Int(64), Int(3)])), Some(Vec([Int(83), Int(-29), Int(14), Int(92)])), Some(Vec([Int(89), Int(81), Int(97), Int(93)])), Some(Vec([Int(-74), Int(-38), Int(13), Int(-54)])), Some(Vec([Int(-52), Int(-8), Int(67), Int(29)])), Some(Vec([Int(76), Int(-8), Int(-36), Int(-59)])), Some(Vec([Int(22), Int(-77), Int(-61), Int(39)])), Some(Vec([Int(11), Int(-26), Int(-16), Int(65)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
vector, [Some(Vec([Int(-57), Int(-57), Int(59), Int(69)])), Some(Vec([Int(-25), Int(88), Int(-54), Int(-36)])), Some(Vec([Int(64), Int(3), Int(98), Int(-91)])), Some(Vec([Int(14), Int(92), Int(-29), Int(83)])), Some(Vec([Int(97), Int(93), Int(81), Int(89)])), Some(Vec([Int(13), Int(-54), Int(-38), Int(-74)])), Some(Vec([Int(67), Int(29), Int(-8), Int(-52)])), Some(Vec([Int(-36), Int(-59), Int(-8), Int(76)])), Some(Vec([Int(-61), Int(39), Int(-77), Int(22)])), Some(Vec([Int(-16), Int(65), Int(-26), Int(11)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
indices are: [Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(-57), Int(59), Int(69)])), Some(Vec([Int(-25), Int(88), Int(-54), Int(-36)])), Some(Vec([Int(64), Int(3), Int(98), Int(-91)])), Some(Vec([Int(14), Int(92), Int(-29), Int(83)])), Some(Vec([Int(97), Int(93), Int(81), Int(89)])), Some(Vec([Int(13), Int(-54), Int(-38), Int(-74)])), Some(Vec([Int(67), Int(29), Int(-8), Int(-52)])), Some(Vec([Int(-36), Int(-59), Int(-8), Int(76)])), Some(Vec([Int(-61), Int(39), Int(-77), Int(22)])), Some(Vec([Int(-16), Int(65), Int(-26), Int(11)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
shuffled is: [Some(Vec([Int(-57), Int(-57), Int(59), Int(69)])), Some(Vec([Int(88), Int(-25), Int(-54), Int(-36)])), Some(Vec([Int(3), Int(64), Int(98), Int(-91)])), Some(Vec([Int(92), Int(14), Int(-29), Int(83)])), Some(Vec([Int(93), Int(97), Int(81), Int(89)])), Some(Vec([Int(-54), Int(13), Int(-38), Int(-74)])), Some(Vec([Int(29), Int(67), Int(-8), Int(-52)])), Some(Vec([Int(-59), Int(-36), Int(-8), Int(76)])), Some(Vec([Int(39), Int(-61), Int(-77), Int(22)])), Some(Vec([Int(65), Int(-16), Int(-26), Int(11)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
vector, [Some(Vec([Int(69), Int(-57), Int(59), Int(-57)])), Some(Vec([Int(-36), Int(-25), Int(-54), Int(88)])), Some(Vec([Int(-91), Int(64), Int(98), Int(3)])), Some(Vec([Int(83), Int(14), Int(-29), Int(92)])), Some(Vec([Int(89), Int(97), Int(81), Int(93)])), Some(Vec([Int(-74), Int(13), Int(-38), Int(-54)])), Some(Vec([Int(-52), Int(67), Int(-8), Int(29)])), Some(Vec([Int(76), Int(-36), Int(-8), Int(-59)])), Some(Vec([Int(22), Int(-61), Int(-77), Int(39)])), Some(Vec([Int(11), Int(-16), Int(-26), Int(65)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
indices are: [Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)]))]
shuffle vec is: [Some(Vec([Int(69), Int(-57), Int(59), Int(-57)])), Some(Vec([Int(-36), Int(-25), Int(-54), Int(88)])), Some(Vec([Int(-91), Int(64), Int(98), Int(3)])), Some(Vec([Int(83), Int(14), Int(-29), Int(92)])), Some(Vec([Int(89), Int(97), Int(81), Int(93)])), Some(Vec([Int(-74), Int(13), Int(-38), Int(-54)])), Some(Vec([Int(-52), Int(67), Int(-8), Int(29)])), Some(Vec([Int(76), Int(-36), Int(-8), Int(-59)])), Some(Vec([Int(22), Int(-61), Int(-77), Int(39)])), Some(Vec([Int(11), Int(-16), Int(-26), Int(65)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(88)])), Some(Vec([Int(64), Int(-91), Int(98), Int(3)])), Some(Vec([Int(14), Int(83), Int(-29), Int(92)])), Some(Vec([Int(97), Int(89), Int(81), Int(93)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(-54)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(29)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(-59)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(39)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(65)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
vector, [Some(Vec([Int(-57), Int(69), Int(-57), Int(59)])), Some(Vec([Int(-25), Int(-36), Int(88), Int(-54)])), Some(Vec([Int(64), Int(-91), Int(3), Int(98)])), Some(Vec([Int(14), Int(83), Int(92), Int(-29)])), Some(Vec([Int(97), Int(89), Int(93), Int(81)])), Some(Vec([Int(13), Int(-74), Int(-54), Int(-38)])), Some(Vec([Int(67), Int(-52), Int(29), Int(-8)])), Some(Vec([Int(-36), Int(76), Int(-59), Int(-8)])), Some(Vec([Int(-61), Int(22), Int(39), Int(-77)])), Some(Vec([Int(-16), Int(11), Int(65), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(-57), Int(59)])), Some(Vec([Int(-25), Int(-36), Int(88), Int(-54)])), Some(Vec([Int(64), Int(-91), Int(3), Int(98)])), Some(Vec([Int(14), Int(83), Int(92), Int(-29)])), Some(Vec([Int(97), Int(89), Int(93), Int(81)])), Some(Vec([Int(13), Int(-74), Int(-54), Int(-38)])), Some(Vec([Int(67), Int(-52), Int(29), Int(-8)])), Some(Vec([Int(-36), Int(76), Int(-59), Int(-8)])), Some(Vec([Int(-61), Int(22), Int(39), Int(-77)])), Some(Vec([Int(-16), Int(11), Int(65), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(69), Int(-57), Int(-57), Int(59)])), Some(Vec([Int(-36), Int(-25), Int(88), Int(-54)])), Some(Vec([Int(-91), Int(64), Int(3), Int(98)])), Some(Vec([Int(83), Int(14), Int(92), Int(-29)])), Some(Vec([Int(89), Int(97), Int(93), Int(81)])), Some(Vec([Int(-74), Int(13), Int(-54), Int(-38)])), Some(Vec([Int(-52), Int(67), Int(29), Int(-8)])), Some(Vec([Int(76), Int(-36), Int(-59), Int(-8)])), Some(Vec([Int(22), Int(-61), Int(39), Int(-77)])), Some(Vec([Int(11), Int(-16), Int(65), Int(-26)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
vector, [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(88), Int(-36), Int(-54), Int(-25)])), Some(Vec([Int(3), Int(-91), Int(98), Int(64)])), Some(Vec([Int(92), Int(83), Int(-29), Int(14)])), Some(Vec([Int(93), Int(89), Int(81), Int(97)])), Some(Vec([Int(-54), Int(-74), Int(-38), Int(13)])), Some(Vec([Int(29), Int(-52), Int(-8), Int(67)])), Some(Vec([Int(-59), Int(76), Int(-8), Int(-36)])), Some(Vec([Int(39), Int(22), Int(-77), Int(-61)])), Some(Vec([Int(65), Int(11), Int(-26), Int(-16)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(88), Int(-36), Int(-54), Int(-25)])), Some(Vec([Int(3), Int(-91), Int(98), Int(64)])), Some(Vec([Int(92), Int(83), Int(-29), Int(14)])), Some(Vec([Int(93), Int(89), Int(81), Int(97)])), Some(Vec([Int(-54), Int(-74), Int(-38), Int(13)])), Some(Vec([Int(29), Int(-52), Int(-8), Int(67)])), Some(Vec([Int(-59), Int(76), Int(-8), Int(-36)])), Some(Vec([Int(39), Int(22), Int(-77), Int(-61)])), Some(Vec([Int(65), Int(11), Int(-26), Int(-16)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
shuffled is: [Some(Vec([Int(69), Int(-57), Int(59), Int(-57)])), Some(Vec([Int(-36), Int(88), Int(-54), Int(-25)])), Some(Vec([Int(-91), Int(3), Int(98), Int(64)])), Some(Vec([Int(83), Int(92), Int(-29), Int(14)])), Some(Vec([Int(89), Int(93), Int(81), Int(97)])), Some(Vec([Int(-74), Int(-54), Int(-38), Int(13)])), Some(Vec([Int(-52), Int(29), Int(-8), Int(67)])), Some(Vec([Int(76), Int(-59), Int(-8), Int(-36)])), Some(Vec([Int(22), Int(39), Int(-77), Int(-61)])), Some(Vec([Int(11), Int(65), Int(-26), Int(-16)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
vector, [Some(Vec([Int(-57), Int(-57), Int(69), Int(59)])), Some(Vec([Int(88), Int(-25), Int(-36), Int(-54)])), Some(Vec([Int(3), Int(64), Int(-91), Int(98)])), Some(Vec([Int(92), Int(14), Int(83), Int(-29)])), Some(Vec([Int(93), Int(97), Int(89), Int(81)])), Some(Vec([Int(-54), Int(13), Int(-74), Int(-38)])), Some(Vec([Int(29), Int(67), Int(-52), Int(-8)])), Some(Vec([Int(-59), Int(-36), Int(76), Int(-8)])), Some(Vec([Int(39), Int(-61), Int(22), Int(-77)])), Some(Vec([Int(65), Int(-16), Int(11), Int(-26)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(-57), Int(69), Int(59)])), Some(Vec([Int(88), Int(-25), Int(-36), Int(-54)])), Some(Vec([Int(3), Int(64), Int(-91), Int(98)])), Some(Vec([Int(92), Int(14), Int(83), Int(-29)])), Some(Vec([Int(93), Int(97), Int(89), Int(81)])), Some(Vec([Int(-54), Int(13), Int(-74), Int(-38)])), Some(Vec([Int(29), Int(67), Int(-52), Int(-8)])), Some(Vec([Int(-59), Int(-36), Int(76), Int(-8)])), Some(Vec([Int(39), Int(-61), Int(22), Int(-77)])), Some(Vec([Int(65), Int(-16), Int(11), Int(-26)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(-57), Int(-57), Int(69), Int(59)])), Some(Vec([Int(-25), Int(88), Int(-36), Int(-54)])), Some(Vec([Int(64), Int(3), Int(-91), Int(98)])), Some(Vec([Int(14), Int(92), Int(83), Int(-29)])), Some(Vec([Int(97), Int(93), Int(89), Int(81)])), Some(Vec([Int(13), Int(-54), Int(-74), Int(-38)])), Some(Vec([Int(67), Int(29), Int(-52), Int(-8)])), Some(Vec([Int(-36), Int(-59), Int(76), Int(-8)])), Some(Vec([Int(-61), Int(39), Int(22), Int(-77)])), Some(Vec([Int(-16), Int(65), Int(11), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
vector, [Some(Vec([Int(-57), Int(69), Int(59), Int(0)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(0)])), Some(Vec([Int(64), Int(-91), Int(98), Int(0)])), Some(Vec([Int(14), Int(83), Int(-29), Int(0)])), Some(Vec([Int(97), Int(89), Int(81), Int(0)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(0)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(0)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(0)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(0)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Int(0)]))]
indices are: [Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(0)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(0)])), Some(Vec([Int(64), Int(-91), Int(98), Int(0)])), Some(Vec([Int(14), Int(83), Int(-29), Int(0)])), Some(Vec([Int(97), Int(89), Int(81), Int(0)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(0)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(0)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(0)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(0)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Int(0)]))]
shuffled is: [Some(Vec([Int(69), Int(-57), Int(59), Int(0)])), Some(Vec([Int(-36), Int(-25), Int(-54), Int(0)])), Some(Vec([Int(-91), Int(64), Int(98), Int(0)])), Some(Vec([Int(83), Int(14), Int(-29), Int(0)])), Some(Vec([Int(89), Int(97), Int(81), Int(0)])), Some(Vec([Int(-74), Int(13), Int(-38), Int(0)])), Some(Vec([Int(-52), Int(67), Int(-8), Int(0)])), Some(Vec([Int(76), Int(-36), Int(-8), Int(0)])), Some(Vec([Int(22), Int(-61), Int(-77), Int(0)])), Some(Vec([Int(11), Int(-16), Int(-26), Int(0)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Int(0)])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Int(0)])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Int(0)])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Int(0)])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Int(0)])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Int(0)])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Int(0)])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Int(0)])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Int(0)])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Int(0)]))]
vector, [Some(Vec([Int(-57), Int(69), Int(0), Int(59)])), Some(Vec([Int(-25), Int(-36), Int(0), Int(-54)])), Some(Vec([Int(64), Int(-91), Int(0), Int(98)])), Some(Vec([Int(14), Int(83), Int(0), Int(-29)])), Some(Vec([Int(97), Int(89), Int(0), Int(81)])), Some(Vec([Int(13), Int(-74), Int(0), Int(-38)])), Some(Vec([Int(67), Int(-52), Int(0), Int(-8)])), Some(Vec([Int(-36), Int(76), Int(0), Int(-8)])), Some(Vec([Int(-61), Int(22), Int(0), Int(-77)])), Some(Vec([Int(-16), Int(11), Int(0), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(0), Int(59)])), Some(Vec([Int(-25), Int(-36), Int(0), Int(-54)])), Some(Vec([Int(64), Int(-91), Int(0), Int(98)])), Some(Vec([Int(14), Int(83), Int(0), Int(-29)])), Some(Vec([Int(97), Int(89), Int(0), Int(81)])), Some(Vec([Int(13), Int(-74), Int(0), Int(-38)])), Some(Vec([Int(67), Int(-52), Int(0), Int(-8)])), Some(Vec([Int(-36), Int(76), Int(0), Int(-8)])), Some(Vec([Int(-61), Int(22), Int(0), Int(-77)])), Some(Vec([Int(-16), Int(11), Int(0), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(69), Int(-57), Int(0), Int(59)])), Some(Vec([Int(-36), Int(-25), Int(0), Int(-54)])), Some(Vec([Int(-91), Int(64), Int(0), Int(98)])), Some(Vec([Int(83), Int(14), Int(0), Int(-29)])), Some(Vec([Int(89), Int(97), Int(0), Int(81)])), Some(Vec([Int(-74), Int(13), Int(0), Int(-38)])), Some(Vec([Int(-52), Int(67), Int(0), Int(-8)])), Some(Vec([Int(76), Int(-36), Int(0), Int(-8)])), Some(Vec([Int(22), Int(-61), Int(0), Int(-77)])), Some(Vec([Int(11), Int(-16), Int(0), Int(-26)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
vector, [Some(Vec([Int(-57), Int(0), Int(69), Int(59)])), Some(Vec([Int(-25), Int(0), Int(-36), Int(-54)])), Some(Vec([Int(64), Int(0), Int(-91), Int(98)])), Some(Vec([Int(14), Int(0), Int(83), Int(-29)])), Some(Vec([Int(97), Int(0), Int(89), Int(81)])), Some(Vec([Int(13), Int(0), Int(-74), Int(-38)])), Some(Vec([Int(67), Int(0), Int(-52), Int(-8)])), Some(Vec([Int(-36), Int(0), Int(76), Int(-8)])), Some(Vec([Int(-61), Int(0), Int(22), Int(-77)])), Some(Vec([Int(-16), Int(0), Int(11), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(0), Int(69), Int(59)])), Some(Vec([Int(-25), Int(0), Int(-36), Int(-54)])), Some(Vec([Int(64), Int(0), Int(-91), Int(98)])), Some(Vec([Int(14), Int(0), Int(83), Int(-29)])), Some(Vec([Int(97), Int(0), Int(89), Int(81)])), Some(Vec([Int(13), Int(0), Int(-74), Int(-38)])), Some(Vec([Int(67), Int(0), Int(-52), Int(-8)])), Some(Vec([Int(-36), Int(0), Int(76), Int(-8)])), Some(Vec([Int(-61), Int(0), Int(22), Int(-77)])), Some(Vec([Int(-16), Int(0), Int(11), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(0), Int(-57), Int(69), Int(59)])), Some(Vec([Int(0), Int(-25), Int(-36), Int(-54)])), Some(Vec([Int(0), Int(64), Int(-91), Int(98)])), Some(Vec([Int(0), Int(14), Int(83), Int(-29)])), Some(Vec([Int(0), Int(97), Int(89), Int(81)])), Some(Vec([Int(0), Int(13), Int(-74), Int(-38)])), Some(Vec([Int(0), Int(67), Int(-52), Int(-8)])), Some(Vec([Int(0), Int(-36), Int(76), Int(-8)])), Some(Vec([Int(0), Int(-61), Int(22), Int(-77)])), Some(Vec([Int(0), Int(-16), Int(11), Int(-26)])), Some(Vec([Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
vector, [Some(Vec([Int(0), Int(-57), Int(69), Int(59)])), Some(Vec([Int(0), Int(-25), Int(-36), Int(-54)])), Some(Vec([Int(0), Int(64), Int(-91), Int(98)])), Some(Vec([Int(0), Int(14), Int(83), Int(-29)])), Some(Vec([Int(0), Int(97), Int(89), Int(81)])), Some(Vec([Int(0), Int(13), Int(-74), Int(-38)])), Some(Vec([Int(0), Int(67), Int(-52), Int(-8)])), Some(Vec([Int(0), Int(-36), Int(76), Int(-8)])), Some(Vec([Int(0), Int(-61), Int(22), Int(-77)])), Some(Vec([Int(0), Int(-16), Int(11), Int(-26)])), Some(Vec([Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)]))]
shuffle vec is: [Some(Vec([Int(0), Int(-57), Int(69), Int(59)])), Some(Vec([Int(0), Int(-25), Int(-36), Int(-54)])), Some(Vec([Int(0), Int(64), Int(-91), Int(98)])), Some(Vec([Int(0), Int(14), Int(83), Int(-29)])), Some(Vec([Int(0), Int(97), Int(89), Int(81)])), Some(Vec([Int(0), Int(13), Int(-74), Int(-38)])), Some(Vec([Int(0), Int(67), Int(-52), Int(-8)])), Some(Vec([Int(0), Int(-36), Int(76), Int(-8)])), Some(Vec([Int(0), Int(-61), Int(22), Int(-77)])), Some(Vec([Int(0), Int(-16), Int(11), Int(-26)])), Some(Vec([Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(-57), Int(0), Int(69), Int(59)])), Some(Vec([Int(-25), Int(0), Int(-36), Int(-54)])), Some(Vec([Int(64), Int(0), Int(-91), Int(98)])), Some(Vec([Int(14), Int(0), Int(83), Int(-29)])), Some(Vec([Int(97), Int(0), Int(89), Int(81)])), Some(Vec([Int(13), Int(0), Int(-74), Int(-38)])), Some(Vec([Int(67), Int(0), Int(-52), Int(-8)])), Some(Vec([Int(-36), Int(0), Int(76), Int(-8)])), Some(Vec([Int(-61), Int(0), Int(22), Int(-77)])), Some(Vec([Int(-16), Int(0), Int(11), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
vector, [Some(Vec([Int(0), Int(0), Int(-57), Int(69)])), Some(Vec([Int(0), Int(0), Int(-25), Int(-36)])), Some(Vec([Int(0), Int(0), Int(64), Int(-91)])), Some(Vec([Int(0), Int(0), Int(14), Int(83)])), Some(Vec([Int(0), Int(0), Int(97), Int(89)])), Some(Vec([Int(0), Int(0), Int(13), Int(-74)])), Some(Vec([Int(0), Int(0), Int(67), Int(-52)])), Some(Vec([Int(0), Int(0), Int(-36), Int(76)])), Some(Vec([Int(0), Int(0), Int(-61), Int(22)])), Some(Vec([Int(0), Int(0), Int(-16), Int(11)])), Some(Vec([Int(0), Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Int(0), Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Int(0), Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Int(0), Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Int(0), Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Int(0), Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Int(0), Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Int(0), Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Int(0), Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Int(0), Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
indices are: [Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)]))]
shuffle vec is: [Some(Vec([Int(0), Int(0), Int(-57), Int(69)])), Some(Vec([Int(0), Int(0), Int(-25), Int(-36)])), Some(Vec([Int(0), Int(0), Int(64), Int(-91)])), Some(Vec([Int(0), Int(0), Int(14), Int(83)])), Some(Vec([Int(0), Int(0), Int(97), Int(89)])), Some(Vec([Int(0), Int(0), Int(13), Int(-74)])), Some(Vec([Int(0), Int(0), Int(67), Int(-52)])), Some(Vec([Int(0), Int(0), Int(-36), Int(76)])), Some(Vec([Int(0), Int(0), Int(-61), Int(22)])), Some(Vec([Int(0), Int(0), Int(-16), Int(11)])), Some(Vec([Int(0), Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Int(0), Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Int(0), Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Int(0), Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Int(0), Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Int(0), Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Int(0), Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Int(0), Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Int(0), Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Int(0), Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
shuffled is: [Some(Vec([Int(0), Int(0), Int(-57), Int(69)])), Some(Vec([Int(0), Int(0), Int(-25), Int(-36)])), Some(Vec([Int(0), Int(0), Int(64), Int(-91)])), Some(Vec([Int(0), Int(0), Int(14), Int(83)])), Some(Vec([Int(0), Int(0), Int(97), Int(89)])), Some(Vec([Int(0), Int(0), Int(13), Int(-74)])), Some(Vec([Int(0), Int(0), Int(67), Int(-52)])), Some(Vec([Int(0), Int(0), Int(-36), Int(76)])), Some(Vec([Int(0), Int(0), Int(-61), Int(22)])), Some(Vec([Int(0), Int(0), Int(-16), Int(11)])), Some(Vec([Int(0), Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Int(0), Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Int(0), Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Int(0), Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Int(0), Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Int(0), Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Int(0), Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Int(0), Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Int(0), Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Int(0), Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
vector, [Some(Vec([Int(-57), Int(69), Int(0), Int(0)])), Some(Vec([Int(-25), Int(-36), Int(0), Int(0)])), Some(Vec([Int(64), Int(-91), Int(0), Int(0)])), Some(Vec([Int(14), Int(83), Int(0), Int(0)])), Some(Vec([Int(97), Int(89), Int(0), Int(0)])), Some(Vec([Int(13), Int(-74), Int(0), Int(0)])), Some(Vec([Int(67), Int(-52), Int(0), Int(0)])), Some(Vec([Int(-36), Int(76), Int(0), Int(0)])), Some(Vec([Int(-61), Int(22), Int(0), Int(0)])), Some(Vec([Int(-16), Int(11), Int(0), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Int(0)]))]
indices are: [Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(0), Int(0)])), Some(Vec([Int(-25), Int(-36), Int(0), Int(0)])), Some(Vec([Int(64), Int(-91), Int(0), Int(0)])), Some(Vec([Int(14), Int(83), Int(0), Int(0)])), Some(Vec([Int(97), Int(89), Int(0), Int(0)])), Some(Vec([Int(13), Int(-74), Int(0), Int(0)])), Some(Vec([Int(67), Int(-52), Int(0), Int(0)])), Some(Vec([Int(-36), Int(76), Int(0), Int(0)])), Some(Vec([Int(-61), Int(22), Int(0), Int(0)])), Some(Vec([Int(-16), Int(11), Int(0), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Int(0)]))]
shuffled is: [Some(Vec([Int(69), Int(-57), Int(0), Int(0)])), Some(Vec([Int(-36), Int(-25), Int(0), Int(0)])), Some(Vec([Int(-91), Int(64), Int(0), Int(0)])), Some(Vec([Int(83), Int(14), Int(0), Int(0)])), Some(Vec([Int(89), Int(97), Int(0), Int(0)])), Some(Vec([Int(-74), Int(13), Int(0), Int(0)])), Some(Vec([Int(-52), Int(67), Int(0), Int(0)])), Some(Vec([Int(76), Int(-36), Int(0), Int(0)])), Some(Vec([Int(22), Int(-61), Int(0), Int(0)])), Some(Vec([Int(11), Int(-16), Int(0), Int(0)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Int(0)])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Int(0)])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Int(0)])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Int(0)])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Int(0)])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Int(0)])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Int(0)])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Int(0)]))]
vector, [Some(Vec([Int(-57), Int(0), Int(0), Int(0)])), Some(Vec([Int(-25), Int(0), Int(0), Int(0)])), Some(Vec([Int(64), Int(0), Int(0), Int(0)])), Some(Vec([Int(14), Int(0), Int(0), Int(0)])), Some(Vec([Int(97), Int(0), Int(0), Int(0)])), Some(Vec([Int(13), Int(0), Int(0), Int(0)])), Some(Vec([Int(67), Int(0), Int(0), Int(0)])), Some(Vec([Int(-36), Int(0), Int(0), Int(0)])), Some(Vec([Int(-61), Int(0), Int(0), Int(0)])), Some(Vec([Int(-16), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Int(0), Int(0)]))]
indices are: [Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)])), Some(Vec([Int(1), Int(0), Int(2), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(0), Int(0), Int(0)])), Some(Vec([Int(-25), Int(0), Int(0), Int(0)])), Some(Vec([Int(64), Int(0), Int(0), Int(0)])), Some(Vec([Int(14), Int(0), Int(0), Int(0)])), Some(Vec([Int(97), Int(0), Int(0), Int(0)])), Some(Vec([Int(13), Int(0), Int(0), Int(0)])), Some(Vec([Int(67), Int(0), Int(0), Int(0)])), Some(Vec([Int(-36), Int(0), Int(0), Int(0)])), Some(Vec([Int(-61), Int(0), Int(0), Int(0)])), Some(Vec([Int(-16), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Int(0), Int(0)]))]
shuffled is: [Some(Vec([Int(0), Int(-57), Int(0), Int(0)])), Some(Vec([Int(0), Int(-25), Int(0), Int(0)])), Some(Vec([Int(0), Int(64), Int(0), Int(0)])), Some(Vec([Int(0), Int(14), Int(0), Int(0)])), Some(Vec([Int(0), Int(97), Int(0), Int(0)])), Some(Vec([Int(0), Int(13), Int(0), Int(0)])), Some(Vec([Int(0), Int(67), Int(0), Int(0)])), Some(Vec([Int(0), Int(-36), Int(0), Int(0)])), Some(Vec([Int(0), Int(-61), Int(0), Int(0)])), Some(Vec([Int(0), Int(-16), Int(0), Int(0)])), Some(Vec([Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Int(0)])), Some(Vec([Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Int(0)])), Some(Vec([Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Int(0)])), Some(Vec([Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Int(0)])), Some(Vec([Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Int(0)])), Some(Vec([Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Int(0)])), Some(Vec([Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Int(0)])), Some(Vec([Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Int(0)])), Some(Vec([Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Int(0)])), Some(Vec([Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Int(0)]))]
vector, [Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)]))]
indices are: [Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(88)])), Some(Vec([Int(64), Int(-91), Int(98), Int(3)])), Some(Vec([Int(14), Int(83), Int(-29), Int(92)])), Some(Vec([Int(97), Int(89), Int(81), Int(93)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(-54)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(29)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(-59)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(39)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(65)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(-57), Int(69), Int(-57), Int(59)])), Some(Vec([Int(-25), Int(-36), Int(88), Int(-54)])), Some(Vec([Int(64), Int(-91), Int(3), Int(98)])), Some(Vec([Int(14), Int(83), Int(92), Int(-29)])), Some(Vec([Int(97), Int(89), Int(93), Int(81)])), Some(Vec([Int(13), Int(-74), Int(-54), Int(-38)])), Some(Vec([Int(67), Int(-52), Int(29), Int(-8)])), Some(Vec([Int(-36), Int(76), Int(-59), Int(-8)])), Some(Vec([Int(-61), Int(22), Int(39), Int(-77)])), Some(Vec([Int(-16), Int(11), Int(65), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)]))]
shuffle vec is: [Some(Vec([Int(59), Int(69), Int(-57), Int(-57)])), Some(Vec([Int(-54), Int(-36), Int(-25), Int(88)])), Some(Vec([Int(98), Int(-91), Int(64), Int(3)])), Some(Vec([Int(-29), Int(83), Int(14), Int(92)])), Some(Vec([Int(81), Int(89), Int(97), Int(93)])), Some(Vec([Int(-38), Int(-74), Int(13), Int(-54)])), Some(Vec([Int(-8), Int(-52), Int(67), Int(29)])), Some(Vec([Int(-8), Int(76), Int(-36), Int(-59)])), Some(Vec([Int(-77), Int(22), Int(-61), Int(39)])), Some(Vec([Int(-26), Int(11), Int(-16), Int(65)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(59), Int(69), Int(-57), Int(-57)])), Some(Vec([Int(-54), Int(-36), Int(88), Int(-25)])), Some(Vec([Int(98), Int(-91), Int(3), Int(64)])), Some(Vec([Int(-29), Int(83), Int(92), Int(14)])), Some(Vec([Int(81), Int(89), Int(93), Int(97)])), Some(Vec([Int(-38), Int(-74), Int(-54), Int(13)])), Some(Vec([Int(-8), Int(-52), Int(29), Int(67)])), Some(Vec([Int(-8), Int(76), Int(-59), Int(-36)])), Some(Vec([Int(-77), Int(22), Int(39), Int(-61)])), Some(Vec([Int(-26), Int(11), Int(65), Int(-16)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(-57), Int(59), Int(69)])), Some(Vec([Int(-25), Int(88), Int(-54), Int(-36)])), Some(Vec([Int(64), Int(3), Int(98), Int(-91)])), Some(Vec([Int(14), Int(92), Int(-29), Int(83)])), Some(Vec([Int(97), Int(93), Int(81), Int(89)])), Some(Vec([Int(13), Int(-54), Int(-38), Int(-74)])), Some(Vec([Int(67), Int(29), Int(-8), Int(-52)])), Some(Vec([Int(-36), Int(-59), Int(-8), Int(76)])), Some(Vec([Int(-61), Int(39), Int(-77), Int(22)])), Some(Vec([Int(-16), Int(65), Int(-26), Int(11)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
shuffled is: [Some(Vec([Int(-57), Int(-57), Int(69), Int(59)])), Some(Vec([Int(-25), Int(88), Int(-36), Int(-54)])), Some(Vec([Int(64), Int(3), Int(-91), Int(98)])), Some(Vec([Int(14), Int(92), Int(83), Int(-29)])), Some(Vec([Int(97), Int(93), Int(89), Int(81)])), Some(Vec([Int(13), Int(-54), Int(-74), Int(-38)])), Some(Vec([Int(67), Int(29), Int(-52), Int(-8)])), Some(Vec([Int(-36), Int(-59), Int(76), Int(-8)])), Some(Vec([Int(-61), Int(39), Int(22), Int(-77)])), Some(Vec([Int(-16), Int(65), Int(11), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)]))]
shuffle vec is: [Some(Vec([Int(69), Int(-57), Int(59), Int(-57)])), Some(Vec([Int(-36), Int(-25), Int(-54), Int(88)])), Some(Vec([Int(-91), Int(64), Int(98), Int(3)])), Some(Vec([Int(83), Int(14), Int(-29), Int(92)])), Some(Vec([Int(89), Int(97), Int(81), Int(93)])), Some(Vec([Int(-74), Int(13), Int(-38), Int(-54)])), Some(Vec([Int(-52), Int(67), Int(-8), Int(29)])), Some(Vec([Int(76), Int(-36), Int(-8), Int(-59)])), Some(Vec([Int(22), Int(-61), Int(-77), Int(39)])), Some(Vec([Int(11), Int(-16), Int(-26), Int(65)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(69), Int(-57), Int(-57), Int(59)])), Some(Vec([Int(-36), Int(-25), Int(88), Int(-54)])), Some(Vec([Int(-91), Int(64), Int(3), Int(98)])), Some(Vec([Int(83), Int(14), Int(92), Int(-29)])), Some(Vec([Int(89), Int(97), Int(93), Int(81)])), Some(Vec([Int(-74), Int(13), Int(-54), Int(-38)])), Some(Vec([Int(-52), Int(67), Int(29), Int(-8)])), Some(Vec([Int(76), Int(-36), Int(-59), Int(-8)])), Some(Vec([Int(22), Int(-61), Int(39), Int(-77)])), Some(Vec([Int(11), Int(-16), Int(65), Int(-26)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(-57), Int(59)])), Some(Vec([Int(-25), Int(-36), Int(88), Int(-54)])), Some(Vec([Int(64), Int(-91), Int(3), Int(98)])), Some(Vec([Int(14), Int(83), Int(92), Int(-29)])), Some(Vec([Int(97), Int(89), Int(93), Int(81)])), Some(Vec([Int(13), Int(-74), Int(-54), Int(-38)])), Some(Vec([Int(67), Int(-52), Int(29), Int(-8)])), Some(Vec([Int(-36), Int(76), Int(-59), Int(-8)])), Some(Vec([Int(-61), Int(22), Int(39), Int(-77)])), Some(Vec([Int(-16), Int(11), Int(65), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(88)])), Some(Vec([Int(64), Int(-91), Int(98), Int(3)])), Some(Vec([Int(14), Int(83), Int(-29), Int(92)])), Some(Vec([Int(97), Int(89), Int(81), Int(93)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(-54)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(29)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(-59)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(39)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(65)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
indices are: [Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(88), Int(-36), Int(-54), Int(-25)])), Some(Vec([Int(3), Int(-91), Int(98), Int(64)])), Some(Vec([Int(92), Int(83), Int(-29), Int(14)])), Some(Vec([Int(93), Int(89), Int(81), Int(97)])), Some(Vec([Int(-54), Int(-74), Int(-38), Int(13)])), Some(Vec([Int(29), Int(-52), Int(-8), Int(67)])), Some(Vec([Int(-59), Int(76), Int(-8), Int(-36)])), Some(Vec([Int(39), Int(22), Int(-77), Int(-61)])), Some(Vec([Int(65), Int(11), Int(-26), Int(-16)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
shuffled is: [Some(Vec([Int(-57), Int(69), Int(-57), Int(59)])), Some(Vec([Int(88), Int(-36), Int(-25), Int(-54)])), Some(Vec([Int(3), Int(-91), Int(64), Int(98)])), Some(Vec([Int(92), Int(83), Int(14), Int(-29)])), Some(Vec([Int(93), Int(89), Int(97), Int(81)])), Some(Vec([Int(-54), Int(-74), Int(13), Int(-38)])), Some(Vec([Int(29), Int(-52), Int(67), Int(-8)])), Some(Vec([Int(-59), Int(76), Int(-36), Int(-8)])), Some(Vec([Int(39), Int(22), Int(-61), Int(-77)])), Some(Vec([Int(65), Int(11), Int(-16), Int(-26)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(-57), Int(69), Int(59)])), Some(Vec([Int(88), Int(-25), Int(-36), Int(-54)])), Some(Vec([Int(3), Int(64), Int(-91), Int(98)])), Some(Vec([Int(92), Int(14), Int(83), Int(-29)])), Some(Vec([Int(93), Int(97), Int(89), Int(81)])), Some(Vec([Int(-54), Int(13), Int(-74), Int(-38)])), Some(Vec([Int(29), Int(67), Int(-52), Int(-8)])), Some(Vec([Int(-59), Int(-36), Int(76), Int(-8)])), Some(Vec([Int(39), Int(-61), Int(22), Int(-77)])), Some(Vec([Int(65), Int(-16), Int(11), Int(-26)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(-57), Int(-57), Int(59), Int(69)])), Some(Vec([Int(88), Int(-25), Int(-54), Int(-36)])), Some(Vec([Int(3), Int(64), Int(98), Int(-91)])), Some(Vec([Int(92), Int(14), Int(-29), Int(83)])), Some(Vec([Int(93), Int(97), Int(81), Int(89)])), Some(Vec([Int(-54), Int(13), Int(-38), Int(-74)])), Some(Vec([Int(29), Int(67), Int(-8), Int(-52)])), Some(Vec([Int(-59), Int(-36), Int(-8), Int(76)])), Some(Vec([Int(39), Int(-61), Int(-77), Int(22)])), Some(Vec([Int(65), Int(-16), Int(-26), Int(11)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
indices are: [Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(0)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(0)])), Some(Vec([Int(64), Int(-91), Int(98), Int(0)])), Some(Vec([Int(14), Int(83), Int(-29), Int(0)])), Some(Vec([Int(97), Int(89), Int(81), Int(0)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(0)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(0)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(0)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(0)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Int(0)]))]
shuffled is: [Some(Vec([Int(-57), Int(69), Int(0), Int(59)])), Some(Vec([Int(-25), Int(-36), Int(0), Int(-54)])), Some(Vec([Int(64), Int(-91), Int(0), Int(98)])), Some(Vec([Int(14), Int(83), Int(0), Int(-29)])), Some(Vec([Int(97), Int(89), Int(0), Int(81)])), Some(Vec([Int(13), Int(-74), Int(0), Int(-38)])), Some(Vec([Int(67), Int(-52), Int(0), Int(-8)])), Some(Vec([Int(-36), Int(76), Int(0), Int(-8)])), Some(Vec([Int(-61), Int(22), Int(0), Int(-77)])), Some(Vec([Int(-16), Int(11), Int(0), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(0), Int(59)])), Some(Vec([Int(-25), Int(-36), Int(0), Int(-54)])), Some(Vec([Int(64), Int(-91), Int(0), Int(98)])), Some(Vec([Int(14), Int(83), Int(0), Int(-29)])), Some(Vec([Int(97), Int(89), Int(0), Int(81)])), Some(Vec([Int(13), Int(-74), Int(0), Int(-38)])), Some(Vec([Int(67), Int(-52), Int(0), Int(-8)])), Some(Vec([Int(-36), Int(76), Int(0), Int(-8)])), Some(Vec([Int(-61), Int(22), Int(0), Int(-77)])), Some(Vec([Int(-16), Int(11), Int(0), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(-57), Int(69), Int(59), Int(0)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(0)])), Some(Vec([Int(64), Int(-91), Int(98), Int(0)])), Some(Vec([Int(14), Int(83), Int(-29), Int(0)])), Some(Vec([Int(97), Int(89), Int(81), Int(0)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(0)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(0)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(0)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(0)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Int(0)]))]
indices are: [Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(0), Int(69), Int(59)])), Some(Vec([Int(-25), Int(0), Int(-36), Int(-54)])), Some(Vec([Int(64), Int(0), Int(-91), Int(98)])), Some(Vec([Int(14), Int(0), Int(83), Int(-29)])), Some(Vec([Int(97), Int(0), Int(89), Int(81)])), Some(Vec([Int(13), Int(0), Int(-74), Int(-38)])), Some(Vec([Int(67), Int(0), Int(-52), Int(-8)])), Some(Vec([Int(-36), Int(0), Int(76), Int(-8)])), Some(Vec([Int(-61), Int(0), Int(22), Int(-77)])), Some(Vec([Int(-16), Int(0), Int(11), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(-57), Int(0), Int(59), Int(69)])), Some(Vec([Int(-25), Int(0), Int(-54), Int(-36)])), Some(Vec([Int(64), Int(0), Int(98), Int(-91)])), Some(Vec([Int(14), Int(0), Int(-29), Int(83)])), Some(Vec([Int(97), Int(0), Int(81), Int(89)])), Some(Vec([Int(13), Int(0), Int(-38), Int(-74)])), Some(Vec([Int(67), Int(0), Int(-8), Int(-52)])), Some(Vec([Int(-36), Int(0), Int(-8), Int(76)])), Some(Vec([Int(-61), Int(0), Int(-77), Int(22)])), Some(Vec([Int(-16), Int(0), Int(-26), Int(11)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
indices are: [Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)]))]
shuffle vec is: [Some(Vec([Int(0), Int(-57), Int(69), Int(59)])), Some(Vec([Int(0), Int(-25), Int(-36), Int(-54)])), Some(Vec([Int(0), Int(64), Int(-91), Int(98)])), Some(Vec([Int(0), Int(14), Int(83), Int(-29)])), Some(Vec([Int(0), Int(97), Int(89), Int(81)])), Some(Vec([Int(0), Int(13), Int(-74), Int(-38)])), Some(Vec([Int(0), Int(67), Int(-52), Int(-8)])), Some(Vec([Int(0), Int(-36), Int(76), Int(-8)])), Some(Vec([Int(0), Int(-61), Int(22), Int(-77)])), Some(Vec([Int(0), Int(-16), Int(11), Int(-26)])), Some(Vec([Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(0), Int(-57), Int(59), Int(69)])), Some(Vec([Int(0), Int(-25), Int(-54), Int(-36)])), Some(Vec([Int(0), Int(64), Int(98), Int(-91)])), Some(Vec([Int(0), Int(14), Int(-29), Int(83)])), Some(Vec([Int(0), Int(97), Int(81), Int(89)])), Some(Vec([Int(0), Int(13), Int(-38), Int(-74)])), Some(Vec([Int(0), Int(67), Int(-8), Int(-52)])), Some(Vec([Int(0), Int(-36), Int(-8), Int(76)])), Some(Vec([Int(0), Int(-61), Int(-77), Int(22)])), Some(Vec([Int(0), Int(-16), Int(-26), Int(11)])), Some(Vec([Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
indices are: [Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)]))]
shuffle vec is: [Some(Vec([Int(0), Int(0), Int(-57), Int(69)])), Some(Vec([Int(0), Int(0), Int(-25), Int(-36)])), Some(Vec([Int(0), Int(0), Int(64), Int(-91)])), Some(Vec([Int(0), Int(0), Int(14), Int(83)])), Some(Vec([Int(0), Int(0), Int(97), Int(89)])), Some(Vec([Int(0), Int(0), Int(13), Int(-74)])), Some(Vec([Int(0), Int(0), Int(67), Int(-52)])), Some(Vec([Int(0), Int(0), Int(-36), Int(76)])), Some(Vec([Int(0), Int(0), Int(-61), Int(22)])), Some(Vec([Int(0), Int(0), Int(-16), Int(11)])), Some(Vec([Int(0), Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Int(0), Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Int(0), Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Int(0), Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Int(0), Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Int(0), Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Int(0), Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Int(0), Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Int(0), Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Int(0), Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
shuffled is: [Some(Vec([Int(0), Int(0), Int(69), Int(-57)])), Some(Vec([Int(0), Int(0), Int(-36), Int(-25)])), Some(Vec([Int(0), Int(0), Int(-91), Int(64)])), Some(Vec([Int(0), Int(0), Int(83), Int(14)])), Some(Vec([Int(0), Int(0), Int(89), Int(97)])), Some(Vec([Int(0), Int(0), Int(-74), Int(13)])), Some(Vec([Int(0), Int(0), Int(-52), Int(67)])), Some(Vec([Int(0), Int(0), Int(76), Int(-36)])), Some(Vec([Int(0), Int(0), Int(22), Int(-61)])), Some(Vec([Int(0), Int(0), Int(11), Int(-16)])), Some(Vec([Int(0), Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Int(0), Int(0), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Int(0), Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Int(0), Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Int(0), Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Int(0), Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Int(0), Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Int(0), Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Int(0), Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Int(0), Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(0), Int(0)])), Some(Vec([Int(-25), Int(-36), Int(0), Int(0)])), Some(Vec([Int(64), Int(-91), Int(0), Int(0)])), Some(Vec([Int(14), Int(83), Int(0), Int(0)])), Some(Vec([Int(97), Int(89), Int(0), Int(0)])), Some(Vec([Int(13), Int(-74), Int(0), Int(0)])), Some(Vec([Int(67), Int(-52), Int(0), Int(0)])), Some(Vec([Int(-36), Int(76), Int(0), Int(0)])), Some(Vec([Int(-61), Int(22), Int(0), Int(0)])), Some(Vec([Int(-16), Int(11), Int(0), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Int(0)]))]
shuffled is: [Some(Vec([Int(-57), Int(69), Int(0), Int(0)])), Some(Vec([Int(-25), Int(-36), Int(0), Int(0)])), Some(Vec([Int(64), Int(-91), Int(0), Int(0)])), Some(Vec([Int(14), Int(83), Int(0), Int(0)])), Some(Vec([Int(97), Int(89), Int(0), Int(0)])), Some(Vec([Int(13), Int(-74), Int(0), Int(0)])), Some(Vec([Int(67), Int(-52), Int(0), Int(0)])), Some(Vec([Int(-36), Int(76), Int(0), Int(0)])), Some(Vec([Int(-61), Int(22), Int(0), Int(0)])), Some(Vec([Int(-16), Int(11), Int(0), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Int(0)]))]
indices are: [Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)])), Some(Vec([Int(0), Int(1), Int(3), Int(2)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(0), Int(0), Int(0)])), Some(Vec([Int(-25), Int(0), Int(0), Int(0)])), Some(Vec([Int(64), Int(0), Int(0), Int(0)])), Some(Vec([Int(14), Int(0), Int(0), Int(0)])), Some(Vec([Int(97), Int(0), Int(0), Int(0)])), Some(Vec([Int(13), Int(0), Int(0), Int(0)])), Some(Vec([Int(67), Int(0), Int(0), Int(0)])), Some(Vec([Int(-36), Int(0), Int(0), Int(0)])), Some(Vec([Int(-61), Int(0), Int(0), Int(0)])), Some(Vec([Int(-16), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Int(0), Int(0)]))]
shuffled is: [Some(Vec([Int(-57), Int(0), Int(0), Int(0)])), Some(Vec([Int(-25), Int(0), Int(0), Int(0)])), Some(Vec([Int(64), Int(0), Int(0), Int(0)])), Some(Vec([Int(14), Int(0), Int(0), Int(0)])), Some(Vec([Int(97), Int(0), Int(0), Int(0)])), Some(Vec([Int(13), Int(0), Int(0), Int(0)])), Some(Vec([Int(67), Int(0), Int(0), Int(0)])), Some(Vec([Int(-36), Int(0), Int(0), Int(0)])), Some(Vec([Int(-61), Int(0), Int(0), Int(0)])), Some(Vec([Int(-16), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Int(0), Int(0)]))]
vector, [Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)]))]
indices are: [Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(88)])), Some(Vec([Int(64), Int(-91), Int(98), Int(3)])), Some(Vec([Int(14), Int(83), Int(-29), Int(92)])), Some(Vec([Int(97), Int(89), Int(81), Int(93)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(-54)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(29)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(-59)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(39)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(65)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(88), Int(-36), Int(-54), Int(-25)])), Some(Vec([Int(3), Int(-91), Int(98), Int(64)])), Some(Vec([Int(92), Int(83), Int(-29), Int(14)])), Some(Vec([Int(93), Int(89), Int(81), Int(97)])), Some(Vec([Int(-54), Int(-74), Int(-38), Int(13)])), Some(Vec([Int(29), Int(-52), Int(-8), Int(67)])), Some(Vec([Int(-59), Int(76), Int(-8), Int(-36)])), Some(Vec([Int(39), Int(22), Int(-77), Int(-61)])), Some(Vec([Int(65), Int(11), Int(-26), Int(-16)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)]))]
shuffle vec is: [Some(Vec([Int(59), Int(69), Int(-57), Int(-57)])), Some(Vec([Int(-54), Int(-36), Int(-25), Int(88)])), Some(Vec([Int(98), Int(-91), Int(64), Int(3)])), Some(Vec([Int(-29), Int(83), Int(14), Int(92)])), Some(Vec([Int(81), Int(89), Int(97), Int(93)])), Some(Vec([Int(-38), Int(-74), Int(13), Int(-54)])), Some(Vec([Int(-8), Int(-52), Int(67), Int(29)])), Some(Vec([Int(-8), Int(76), Int(-36), Int(-59)])), Some(Vec([Int(-77), Int(22), Int(-61), Int(39)])), Some(Vec([Int(-26), Int(11), Int(-16), Int(65)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(-57), Int(69), Int(-57), Int(59)])), Some(Vec([Int(88), Int(-36), Int(-25), Int(-54)])), Some(Vec([Int(3), Int(-91), Int(64), Int(98)])), Some(Vec([Int(92), Int(83), Int(14), Int(-29)])), Some(Vec([Int(93), Int(89), Int(97), Int(81)])), Some(Vec([Int(-54), Int(-74), Int(13), Int(-38)])), Some(Vec([Int(29), Int(-52), Int(67), Int(-8)])), Some(Vec([Int(-59), Int(76), Int(-36), Int(-8)])), Some(Vec([Int(39), Int(22), Int(-61), Int(-77)])), Some(Vec([Int(65), Int(11), Int(-16), Int(-26)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(-57), Int(59), Int(69)])), Some(Vec([Int(-25), Int(88), Int(-54), Int(-36)])), Some(Vec([Int(64), Int(3), Int(98), Int(-91)])), Some(Vec([Int(14), Int(92), Int(-29), Int(83)])), Some(Vec([Int(97), Int(93), Int(81), Int(89)])), Some(Vec([Int(13), Int(-54), Int(-38), Int(-74)])), Some(Vec([Int(67), Int(29), Int(-8), Int(-52)])), Some(Vec([Int(-36), Int(-59), Int(-8), Int(76)])), Some(Vec([Int(-61), Int(39), Int(-77), Int(22)])), Some(Vec([Int(-16), Int(65), Int(-26), Int(11)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
shuffled is: [Some(Vec([Int(69), Int(-57), Int(59), Int(-57)])), Some(Vec([Int(-36), Int(88), Int(-54), Int(-25)])), Some(Vec([Int(-91), Int(3), Int(98), Int(64)])), Some(Vec([Int(83), Int(92), Int(-29), Int(14)])), Some(Vec([Int(89), Int(93), Int(81), Int(97)])), Some(Vec([Int(-74), Int(-54), Int(-38), Int(13)])), Some(Vec([Int(-52), Int(29), Int(-8), Int(67)])), Some(Vec([Int(76), Int(-59), Int(-8), Int(-36)])), Some(Vec([Int(22), Int(39), Int(-77), Int(-61)])), Some(Vec([Int(11), Int(65), Int(-26), Int(-16)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)]))]
shuffle vec is: [Some(Vec([Int(69), Int(-57), Int(59), Int(-57)])), Some(Vec([Int(-36), Int(-25), Int(-54), Int(88)])), Some(Vec([Int(-91), Int(64), Int(98), Int(3)])), Some(Vec([Int(83), Int(14), Int(-29), Int(92)])), Some(Vec([Int(89), Int(97), Int(81), Int(93)])), Some(Vec([Int(-74), Int(13), Int(-38), Int(-54)])), Some(Vec([Int(-52), Int(67), Int(-8), Int(29)])), Some(Vec([Int(76), Int(-36), Int(-8), Int(-59)])), Some(Vec([Int(22), Int(-61), Int(-77), Int(39)])), Some(Vec([Int(11), Int(-16), Int(-26), Int(65)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(-57), Int(-57), Int(59), Int(69)])), Some(Vec([Int(88), Int(-25), Int(-54), Int(-36)])), Some(Vec([Int(3), Int(64), Int(98), Int(-91)])), Some(Vec([Int(92), Int(14), Int(-29), Int(83)])), Some(Vec([Int(93), Int(97), Int(81), Int(89)])), Some(Vec([Int(-54), Int(13), Int(-38), Int(-74)])), Some(Vec([Int(29), Int(67), Int(-8), Int(-52)])), Some(Vec([Int(-59), Int(-36), Int(-8), Int(76)])), Some(Vec([Int(39), Int(-61), Int(-77), Int(22)])), Some(Vec([Int(65), Int(-16), Int(-26), Int(11)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
indices are: [Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(-57), Int(59)])), Some(Vec([Int(-25), Int(-36), Int(88), Int(-54)])), Some(Vec([Int(64), Int(-91), Int(3), Int(98)])), Some(Vec([Int(14), Int(83), Int(92), Int(-29)])), Some(Vec([Int(97), Int(89), Int(93), Int(81)])), Some(Vec([Int(13), Int(-74), Int(-54), Int(-38)])), Some(Vec([Int(67), Int(-52), Int(29), Int(-8)])), Some(Vec([Int(-36), Int(76), Int(-59), Int(-8)])), Some(Vec([Int(-61), Int(22), Int(39), Int(-77)])), Some(Vec([Int(-16), Int(11), Int(65), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(59), Int(69), Int(-57), Int(-57)])), Some(Vec([Int(-54), Int(-36), Int(88), Int(-25)])), Some(Vec([Int(98), Int(-91), Int(3), Int(64)])), Some(Vec([Int(-29), Int(83), Int(92), Int(14)])), Some(Vec([Int(81), Int(89), Int(93), Int(97)])), Some(Vec([Int(-38), Int(-74), Int(-54), Int(13)])), Some(Vec([Int(-8), Int(-52), Int(29), Int(67)])), Some(Vec([Int(-8), Int(76), Int(-59), Int(-36)])), Some(Vec([Int(-77), Int(22), Int(39), Int(-61)])), Some(Vec([Int(-26), Int(11), Int(65), Int(-16)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(88), Int(-36), Int(-54), Int(-25)])), Some(Vec([Int(3), Int(-91), Int(98), Int(64)])), Some(Vec([Int(92), Int(83), Int(-29), Int(14)])), Some(Vec([Int(93), Int(89), Int(81), Int(97)])), Some(Vec([Int(-54), Int(-74), Int(-38), Int(13)])), Some(Vec([Int(29), Int(-52), Int(-8), Int(67)])), Some(Vec([Int(-59), Int(76), Int(-8), Int(-36)])), Some(Vec([Int(39), Int(22), Int(-77), Int(-61)])), Some(Vec([Int(65), Int(11), Int(-26), Int(-16)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
shuffled is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(88)])), Some(Vec([Int(64), Int(-91), Int(98), Int(3)])), Some(Vec([Int(14), Int(83), Int(-29), Int(92)])), Some(Vec([Int(97), Int(89), Int(81), Int(93)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(-54)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(29)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(-59)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(39)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(65)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
indices are: [Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(-57), Int(69), Int(59)])), Some(Vec([Int(88), Int(-25), Int(-36), Int(-54)])), Some(Vec([Int(3), Int(64), Int(-91), Int(98)])), Some(Vec([Int(92), Int(14), Int(83), Int(-29)])), Some(Vec([Int(93), Int(97), Int(89), Int(81)])), Some(Vec([Int(-54), Int(13), Int(-74), Int(-38)])), Some(Vec([Int(29), Int(67), Int(-52), Int(-8)])), Some(Vec([Int(-59), Int(-36), Int(76), Int(-8)])), Some(Vec([Int(39), Int(-61), Int(22), Int(-77)])), Some(Vec([Int(65), Int(-16), Int(11), Int(-26)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(59), Int(-57), Int(69), Int(-57)])), Some(Vec([Int(-54), Int(-25), Int(-36), Int(88)])), Some(Vec([Int(98), Int(64), Int(-91), Int(3)])), Some(Vec([Int(-29), Int(14), Int(83), Int(92)])), Some(Vec([Int(81), Int(97), Int(89), Int(93)])), Some(Vec([Int(-38), Int(13), Int(-74), Int(-54)])), Some(Vec([Int(-8), Int(67), Int(-52), Int(29)])), Some(Vec([Int(-8), Int(-36), Int(76), Int(-59)])), Some(Vec([Int(-77), Int(-61), Int(22), Int(39)])), Some(Vec([Int(-26), Int(-16), Int(11), Int(65)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
indices are: [Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(0)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(0)])), Some(Vec([Int(64), Int(-91), Int(98), Int(0)])), Some(Vec([Int(14), Int(83), Int(-29), Int(0)])), Some(Vec([Int(97), Int(89), Int(81), Int(0)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(0)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(0)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(0)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(0)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Int(0)]))]
shuffled is: [Some(Vec([Int(0), Int(69), Int(59), Int(-57)])), Some(Vec([Int(0), Int(-36), Int(-54), Int(-25)])), Some(Vec([Int(0), Int(-91), Int(98), Int(64)])), Some(Vec([Int(0), Int(83), Int(-29), Int(14)])), Some(Vec([Int(0), Int(89), Int(81), Int(97)])), Some(Vec([Int(0), Int(-74), Int(-38), Int(13)])), Some(Vec([Int(0), Int(-52), Int(-8), Int(67)])), Some(Vec([Int(0), Int(76), Int(-8), Int(-36)])), Some(Vec([Int(0), Int(22), Int(-77), Int(-61)])), Some(Vec([Int(0), Int(11), Int(-26), Int(-16)])), Some(Vec([Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Int(0), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(0), Int(59)])), Some(Vec([Int(-25), Int(-36), Int(0), Int(-54)])), Some(Vec([Int(64), Int(-91), Int(0), Int(98)])), Some(Vec([Int(14), Int(83), Int(0), Int(-29)])), Some(Vec([Int(97), Int(89), Int(0), Int(81)])), Some(Vec([Int(13), Int(-74), Int(0), Int(-38)])), Some(Vec([Int(67), Int(-52), Int(0), Int(-8)])), Some(Vec([Int(-36), Int(76), Int(0), Int(-8)])), Some(Vec([Int(-61), Int(22), Int(0), Int(-77)])), Some(Vec([Int(-16), Int(11), Int(0), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(59), Int(69), Int(0), Int(-57)])), Some(Vec([Int(-54), Int(-36), Int(0), Int(-25)])), Some(Vec([Int(98), Int(-91), Int(0), Int(64)])), Some(Vec([Int(-29), Int(83), Int(0), Int(14)])), Some(Vec([Int(81), Int(89), Int(0), Int(97)])), Some(Vec([Int(-38), Int(-74), Int(0), Int(13)])), Some(Vec([Int(-8), Int(-52), Int(0), Int(67)])), Some(Vec([Int(-8), Int(76), Int(0), Int(-36)])), Some(Vec([Int(-77), Int(22), Int(0), Int(-61)])), Some(Vec([Int(-26), Int(11), Int(0), Int(-16)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(0), Int(69), Int(59)])), Some(Vec([Int(-25), Int(0), Int(-36), Int(-54)])), Some(Vec([Int(64), Int(0), Int(-91), Int(98)])), Some(Vec([Int(14), Int(0), Int(83), Int(-29)])), Some(Vec([Int(97), Int(0), Int(89), Int(81)])), Some(Vec([Int(13), Int(0), Int(-74), Int(-38)])), Some(Vec([Int(67), Int(0), Int(-52), Int(-8)])), Some(Vec([Int(-36), Int(0), Int(76), Int(-8)])), Some(Vec([Int(-61), Int(0), Int(22), Int(-77)])), Some(Vec([Int(-16), Int(0), Int(11), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(59), Int(0), Int(69), Int(-57)])), Some(Vec([Int(-54), Int(0), Int(-36), Int(-25)])), Some(Vec([Int(98), Int(0), Int(-91), Int(64)])), Some(Vec([Int(-29), Int(0), Int(83), Int(14)])), Some(Vec([Int(81), Int(0), Int(89), Int(97)])), Some(Vec([Int(-38), Int(0), Int(-74), Int(13)])), Some(Vec([Int(-8), Int(0), Int(-52), Int(67)])), Some(Vec([Int(-8), Int(0), Int(76), Int(-36)])), Some(Vec([Int(-77), Int(0), Int(22), Int(-61)])), Some(Vec([Int(-26), Int(0), Int(11), Int(-16)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Int(0), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)]))]
shuffle vec is: [Some(Vec([Int(0), Int(-57), Int(69), Int(59)])), Some(Vec([Int(0), Int(-25), Int(-36), Int(-54)])), Some(Vec([Int(0), Int(64), Int(-91), Int(98)])), Some(Vec([Int(0), Int(14), Int(83), Int(-29)])), Some(Vec([Int(0), Int(97), Int(89), Int(81)])), Some(Vec([Int(0), Int(13), Int(-74), Int(-38)])), Some(Vec([Int(0), Int(67), Int(-52), Int(-8)])), Some(Vec([Int(0), Int(-36), Int(76), Int(-8)])), Some(Vec([Int(0), Int(-61), Int(22), Int(-77)])), Some(Vec([Int(0), Int(-16), Int(11), Int(-26)])), Some(Vec([Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(59), Int(-57), Int(69), Int(0)])), Some(Vec([Int(-54), Int(-25), Int(-36), Int(0)])), Some(Vec([Int(98), Int(64), Int(-91), Int(0)])), Some(Vec([Int(-29), Int(14), Int(83), Int(0)])), Some(Vec([Int(81), Int(97), Int(89), Int(0)])), Some(Vec([Int(-38), Int(13), Int(-74), Int(0)])), Some(Vec([Int(-8), Int(67), Int(-52), Int(0)])), Some(Vec([Int(-8), Int(-36), Int(76), Int(0)])), Some(Vec([Int(-77), Int(-61), Int(22), Int(0)])), Some(Vec([Int(-26), Int(-16), Int(11), Int(0)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0)])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0)])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0)])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0)])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0)])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0)])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0)])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0)])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0)])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0)]))]
indices are: [Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)]))]
shuffle vec is: [Some(Vec([Int(0), Int(0), Int(-57), Int(69)])), Some(Vec([Int(0), Int(0), Int(-25), Int(-36)])), Some(Vec([Int(0), Int(0), Int(64), Int(-91)])), Some(Vec([Int(0), Int(0), Int(14), Int(83)])), Some(Vec([Int(0), Int(0), Int(97), Int(89)])), Some(Vec([Int(0), Int(0), Int(13), Int(-74)])), Some(Vec([Int(0), Int(0), Int(67), Int(-52)])), Some(Vec([Int(0), Int(0), Int(-36), Int(76)])), Some(Vec([Int(0), Int(0), Int(-61), Int(22)])), Some(Vec([Int(0), Int(0), Int(-16), Int(11)])), Some(Vec([Int(0), Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Int(0), Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Int(0), Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Int(0), Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Int(0), Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Int(0), Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Int(0), Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Int(0), Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Int(0), Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Int(0), Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
shuffled is: [Some(Vec([Int(69), Int(0), Int(-57), Int(0)])), Some(Vec([Int(-36), Int(0), Int(-25), Int(0)])), Some(Vec([Int(-91), Int(0), Int(64), Int(0)])), Some(Vec([Int(83), Int(0), Int(14), Int(0)])), Some(Vec([Int(89), Int(0), Int(97), Int(0)])), Some(Vec([Int(-74), Int(0), Int(13), Int(0)])), Some(Vec([Int(-52), Int(0), Int(67), Int(0)])), Some(Vec([Int(76), Int(0), Int(-36), Int(0)])), Some(Vec([Int(22), Int(0), Int(-61), Int(0)])), Some(Vec([Int(11), Int(0), Int(-16), Int(0)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0)])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0)])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0)])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0)])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0)])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0)])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0)])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0)])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0)])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0)]))]
indices are: [Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(0), Int(0)])), Some(Vec([Int(-25), Int(-36), Int(0), Int(0)])), Some(Vec([Int(64), Int(-91), Int(0), Int(0)])), Some(Vec([Int(14), Int(83), Int(0), Int(0)])), Some(Vec([Int(97), Int(89), Int(0), Int(0)])), Some(Vec([Int(13), Int(-74), Int(0), Int(0)])), Some(Vec([Int(67), Int(-52), Int(0), Int(0)])), Some(Vec([Int(-36), Int(76), Int(0), Int(0)])), Some(Vec([Int(-61), Int(22), Int(0), Int(0)])), Some(Vec([Int(-16), Int(11), Int(0), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Int(0)]))]
shuffled is: [Some(Vec([Int(0), Int(69), Int(0), Int(-57)])), Some(Vec([Int(0), Int(-36), Int(0), Int(-25)])), Some(Vec([Int(0), Int(-91), Int(0), Int(64)])), Some(Vec([Int(0), Int(83), Int(0), Int(14)])), Some(Vec([Int(0), Int(89), Int(0), Int(97)])), Some(Vec([Int(0), Int(-74), Int(0), Int(13)])), Some(Vec([Int(0), Int(-52), Int(0), Int(67)])), Some(Vec([Int(0), Int(76), Int(0), Int(-36)])), Some(Vec([Int(0), Int(22), Int(0), Int(-61)])), Some(Vec([Int(0), Int(11), Int(0), Int(-16)])), Some(Vec([Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Int(0), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)])), Some(Vec([Int(3), Int(1), Int(2), Int(0)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(0), Int(0), Int(0)])), Some(Vec([Int(-25), Int(0), Int(0), Int(0)])), Some(Vec([Int(64), Int(0), Int(0), Int(0)])), Some(Vec([Int(14), Int(0), Int(0), Int(0)])), Some(Vec([Int(97), Int(0), Int(0), Int(0)])), Some(Vec([Int(13), Int(0), Int(0), Int(0)])), Some(Vec([Int(67), Int(0), Int(0), Int(0)])), Some(Vec([Int(-36), Int(0), Int(0), Int(0)])), Some(Vec([Int(-61), Int(0), Int(0), Int(0)])), Some(Vec([Int(-16), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Int(0), Int(0)]))]
shuffled is: [Some(Vec([Int(0), Int(0), Int(0), Int(-57)])), Some(Vec([Int(0), Int(0), Int(0), Int(-25)])), Some(Vec([Int(0), Int(0), Int(0), Int(64)])), Some(Vec([Int(0), Int(0), Int(0), Int(14)])), Some(Vec([Int(0), Int(0), Int(0), Int(97)])), Some(Vec([Int(0), Int(0), Int(0), Int(13)])), Some(Vec([Int(0), Int(0), Int(0), Int(67)])), Some(Vec([Int(0), Int(0), Int(0), Int(-36)])), Some(Vec([Int(0), Int(0), Int(0), Int(-61)])), Some(Vec([Int(0), Int(0), Int(0), Int(-16)])), Some(Vec([Int(0), Int(0), Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Int(0), Int(0), Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Int(0), Int(0), Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Int(0), Int(0), Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Int(0), Int(0), Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Int(0), Int(0), Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Int(0), Int(0), Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Int(0), Int(0), Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Int(0), Int(0), Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Int(0), Int(0), Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
vector, [Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)]))]
indices are: [Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(88)])), Some(Vec([Int(64), Int(-91), Int(98), Int(3)])), Some(Vec([Int(14), Int(83), Int(-29), Int(92)])), Some(Vec([Int(97), Int(89), Int(81), Int(93)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(-54)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(29)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(-59)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(39)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(65)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(-57), Int(-57), Int(59), Int(69)])), Some(Vec([Int(-25), Int(88), Int(-54), Int(-36)])), Some(Vec([Int(64), Int(3), Int(98), Int(-91)])), Some(Vec([Int(14), Int(92), Int(-29), Int(83)])), Some(Vec([Int(97), Int(93), Int(81), Int(89)])), Some(Vec([Int(13), Int(-54), Int(-38), Int(-74)])), Some(Vec([Int(67), Int(29), Int(-8), Int(-52)])), Some(Vec([Int(-36), Int(-59), Int(-8), Int(76)])), Some(Vec([Int(-61), Int(39), Int(-77), Int(22)])), Some(Vec([Int(-16), Int(65), Int(-26), Int(11)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
indices are: [Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)]))]
shuffle vec is: [Some(Vec([Int(59), Int(69), Int(-57), Int(-57)])), Some(Vec([Int(-54), Int(-36), Int(-25), Int(88)])), Some(Vec([Int(98), Int(-91), Int(64), Int(3)])), Some(Vec([Int(-29), Int(83), Int(14), Int(92)])), Some(Vec([Int(81), Int(89), Int(97), Int(93)])), Some(Vec([Int(-38), Int(-74), Int(13), Int(-54)])), Some(Vec([Int(-8), Int(-52), Int(67), Int(29)])), Some(Vec([Int(-8), Int(76), Int(-36), Int(-59)])), Some(Vec([Int(-77), Int(22), Int(-61), Int(39)])), Some(Vec([Int(-26), Int(11), Int(-16), Int(65)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(59), Int(-57), Int(-57), Int(69)])), Some(Vec([Int(-54), Int(88), Int(-25), Int(-36)])), Some(Vec([Int(98), Int(3), Int(64), Int(-91)])), Some(Vec([Int(-29), Int(92), Int(14), Int(83)])), Some(Vec([Int(81), Int(93), Int(97), Int(89)])), Some(Vec([Int(-38), Int(-54), Int(13), Int(-74)])), Some(Vec([Int(-8), Int(29), Int(67), Int(-52)])), Some(Vec([Int(-8), Int(-59), Int(-36), Int(76)])), Some(Vec([Int(-77), Int(39), Int(-61), Int(22)])), Some(Vec([Int(-26), Int(65), Int(-16), Int(11)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
indices are: [Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(-57), Int(59), Int(69)])), Some(Vec([Int(-25), Int(88), Int(-54), Int(-36)])), Some(Vec([Int(64), Int(3), Int(98), Int(-91)])), Some(Vec([Int(14), Int(92), Int(-29), Int(83)])), Some(Vec([Int(97), Int(93), Int(81), Int(89)])), Some(Vec([Int(13), Int(-54), Int(-38), Int(-74)])), Some(Vec([Int(67), Int(29), Int(-8), Int(-52)])), Some(Vec([Int(-36), Int(-59), Int(-8), Int(76)])), Some(Vec([Int(-61), Int(39), Int(-77), Int(22)])), Some(Vec([Int(-16), Int(65), Int(-26), Int(11)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
shuffled is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(88)])), Some(Vec([Int(64), Int(-91), Int(98), Int(3)])), Some(Vec([Int(14), Int(83), Int(-29), Int(92)])), Some(Vec([Int(97), Int(89), Int(81), Int(93)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(-54)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(29)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(-59)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(39)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(65)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
indices are: [Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)]))]
shuffle vec is: [Some(Vec([Int(69), Int(-57), Int(59), Int(-57)])), Some(Vec([Int(-36), Int(-25), Int(-54), Int(88)])), Some(Vec([Int(-91), Int(64), Int(98), Int(3)])), Some(Vec([Int(83), Int(14), Int(-29), Int(92)])), Some(Vec([Int(89), Int(97), Int(81), Int(93)])), Some(Vec([Int(-74), Int(13), Int(-38), Int(-54)])), Some(Vec([Int(-52), Int(67), Int(-8), Int(29)])), Some(Vec([Int(76), Int(-36), Int(-8), Int(-59)])), Some(Vec([Int(22), Int(-61), Int(-77), Int(39)])), Some(Vec([Int(11), Int(-16), Int(-26), Int(65)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(69), Int(-57), Int(59), Int(-57)])), Some(Vec([Int(-36), Int(88), Int(-54), Int(-25)])), Some(Vec([Int(-91), Int(3), Int(98), Int(64)])), Some(Vec([Int(83), Int(92), Int(-29), Int(14)])), Some(Vec([Int(89), Int(93), Int(81), Int(97)])), Some(Vec([Int(-74), Int(-54), Int(-38), Int(13)])), Some(Vec([Int(-52), Int(29), Int(-8), Int(67)])), Some(Vec([Int(76), Int(-59), Int(-8), Int(-36)])), Some(Vec([Int(22), Int(39), Int(-77), Int(-61)])), Some(Vec([Int(11), Int(65), Int(-26), Int(-16)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(-57), Int(59)])), Some(Vec([Int(-25), Int(-36), Int(88), Int(-54)])), Some(Vec([Int(64), Int(-91), Int(3), Int(98)])), Some(Vec([Int(14), Int(83), Int(92), Int(-29)])), Some(Vec([Int(97), Int(89), Int(93), Int(81)])), Some(Vec([Int(13), Int(-74), Int(-54), Int(-38)])), Some(Vec([Int(67), Int(-52), Int(29), Int(-8)])), Some(Vec([Int(-36), Int(76), Int(-59), Int(-8)])), Some(Vec([Int(-61), Int(22), Int(39), Int(-77)])), Some(Vec([Int(-16), Int(11), Int(65), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(-57), Int(59), Int(-57), Int(69)])), Some(Vec([Int(-25), Int(-54), Int(88), Int(-36)])), Some(Vec([Int(64), Int(98), Int(3), Int(-91)])), Some(Vec([Int(14), Int(-29), Int(92), Int(83)])), Some(Vec([Int(97), Int(81), Int(93), Int(89)])), Some(Vec([Int(13), Int(-38), Int(-54), Int(-74)])), Some(Vec([Int(67), Int(-8), Int(29), Int(-52)])), Some(Vec([Int(-36), Int(-8), Int(-59), Int(76)])), Some(Vec([Int(-61), Int(-77), Int(39), Int(22)])), Some(Vec([Int(-16), Int(-26), Int(65), Int(11)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
indices are: [Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(88), Int(-36), Int(-54), Int(-25)])), Some(Vec([Int(3), Int(-91), Int(98), Int(64)])), Some(Vec([Int(92), Int(83), Int(-29), Int(14)])), Some(Vec([Int(93), Int(89), Int(81), Int(97)])), Some(Vec([Int(-54), Int(-74), Int(-38), Int(13)])), Some(Vec([Int(29), Int(-52), Int(-8), Int(67)])), Some(Vec([Int(-59), Int(76), Int(-8), Int(-36)])), Some(Vec([Int(39), Int(22), Int(-77), Int(-61)])), Some(Vec([Int(65), Int(11), Int(-26), Int(-16)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
shuffled is: [Some(Vec([Int(-57), Int(-57), Int(59), Int(69)])), Some(Vec([Int(88), Int(-25), Int(-54), Int(-36)])), Some(Vec([Int(3), Int(64), Int(98), Int(-91)])), Some(Vec([Int(92), Int(14), Int(-29), Int(83)])), Some(Vec([Int(93), Int(97), Int(81), Int(89)])), Some(Vec([Int(-54), Int(13), Int(-38), Int(-74)])), Some(Vec([Int(29), Int(67), Int(-8), Int(-52)])), Some(Vec([Int(-59), Int(-36), Int(-8), Int(76)])), Some(Vec([Int(39), Int(-61), Int(-77), Int(22)])), Some(Vec([Int(65), Int(-16), Int(-26), Int(11)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
indices are: [Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(-57), Int(69), Int(59)])), Some(Vec([Int(88), Int(-25), Int(-36), Int(-54)])), Some(Vec([Int(3), Int(64), Int(-91), Int(98)])), Some(Vec([Int(92), Int(14), Int(83), Int(-29)])), Some(Vec([Int(93), Int(97), Int(89), Int(81)])), Some(Vec([Int(-54), Int(13), Int(-74), Int(-38)])), Some(Vec([Int(29), Int(67), Int(-52), Int(-8)])), Some(Vec([Int(-59), Int(-36), Int(76), Int(-8)])), Some(Vec([Int(39), Int(-61), Int(22), Int(-77)])), Some(Vec([Int(65), Int(-16), Int(11), Int(-26)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(-57), Int(59), Int(69), Int(-57)])), Some(Vec([Int(88), Int(-54), Int(-36), Int(-25)])), Some(Vec([Int(3), Int(98), Int(-91), Int(64)])), Some(Vec([Int(92), Int(-29), Int(83), Int(14)])), Some(Vec([Int(93), Int(81), Int(89), Int(97)])), Some(Vec([Int(-54), Int(-38), Int(-74), Int(13)])), Some(Vec([Int(29), Int(-8), Int(-52), Int(67)])), Some(Vec([Int(-59), Int(-8), Int(76), Int(-36)])), Some(Vec([Int(39), Int(-77), Int(22), Int(-61)])), Some(Vec([Int(65), Int(-26), Int(11), Int(-16)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(0)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(0)])), Some(Vec([Int(64), Int(-91), Int(98), Int(0)])), Some(Vec([Int(14), Int(83), Int(-29), Int(0)])), Some(Vec([Int(97), Int(89), Int(81), Int(0)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(0)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(0)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(0)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(0)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Int(0)]))]
shuffled is: [Some(Vec([Int(-57), Int(0), Int(59), Int(69)])), Some(Vec([Int(-25), Int(0), Int(-54), Int(-36)])), Some(Vec([Int(64), Int(0), Int(98), Int(-91)])), Some(Vec([Int(14), Int(0), Int(-29), Int(83)])), Some(Vec([Int(97), Int(0), Int(81), Int(89)])), Some(Vec([Int(13), Int(0), Int(-38), Int(-74)])), Some(Vec([Int(67), Int(0), Int(-8), Int(-52)])), Some(Vec([Int(-36), Int(0), Int(-8), Int(76)])), Some(Vec([Int(-61), Int(0), Int(-77), Int(22)])), Some(Vec([Int(-16), Int(0), Int(-26), Int(11)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
indices are: [Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(0), Int(59)])), Some(Vec([Int(-25), Int(-36), Int(0), Int(-54)])), Some(Vec([Int(64), Int(-91), Int(0), Int(98)])), Some(Vec([Int(14), Int(83), Int(0), Int(-29)])), Some(Vec([Int(97), Int(89), Int(0), Int(81)])), Some(Vec([Int(13), Int(-74), Int(0), Int(-38)])), Some(Vec([Int(67), Int(-52), Int(0), Int(-8)])), Some(Vec([Int(-36), Int(76), Int(0), Int(-8)])), Some(Vec([Int(-61), Int(22), Int(0), Int(-77)])), Some(Vec([Int(-16), Int(11), Int(0), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(-57), Int(59), Int(0), Int(69)])), Some(Vec([Int(-25), Int(-54), Int(0), Int(-36)])), Some(Vec([Int(64), Int(98), Int(0), Int(-91)])), Some(Vec([Int(14), Int(-29), Int(0), Int(83)])), Some(Vec([Int(97), Int(81), Int(0), Int(89)])), Some(Vec([Int(13), Int(-38), Int(0), Int(-74)])), Some(Vec([Int(67), Int(-8), Int(0), Int(-52)])), Some(Vec([Int(-36), Int(-8), Int(0), Int(76)])), Some(Vec([Int(-61), Int(-77), Int(0), Int(22)])), Some(Vec([Int(-16), Int(-26), Int(0), Int(11)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Int(0), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
indices are: [Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(0), Int(69), Int(59)])), Some(Vec([Int(-25), Int(0), Int(-36), Int(-54)])), Some(Vec([Int(64), Int(0), Int(-91), Int(98)])), Some(Vec([Int(14), Int(0), Int(83), Int(-29)])), Some(Vec([Int(97), Int(0), Int(89), Int(81)])), Some(Vec([Int(13), Int(0), Int(-74), Int(-38)])), Some(Vec([Int(67), Int(0), Int(-52), Int(-8)])), Some(Vec([Int(-36), Int(0), Int(76), Int(-8)])), Some(Vec([Int(-61), Int(0), Int(22), Int(-77)])), Some(Vec([Int(-16), Int(0), Int(11), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(-57), Int(59), Int(69), Int(0)])), Some(Vec([Int(-25), Int(-54), Int(-36), Int(0)])), Some(Vec([Int(64), Int(98), Int(-91), Int(0)])), Some(Vec([Int(14), Int(-29), Int(83), Int(0)])), Some(Vec([Int(97), Int(81), Int(89), Int(0)])), Some(Vec([Int(13), Int(-38), Int(-74), Int(0)])), Some(Vec([Int(67), Int(-8), Int(-52), Int(0)])), Some(Vec([Int(-36), Int(-8), Int(76), Int(0)])), Some(Vec([Int(-61), Int(-77), Int(22), Int(0)])), Some(Vec([Int(-16), Int(-26), Int(11), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0)]))]
indices are: [Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)]))]
shuffle vec is: [Some(Vec([Int(0), Int(-57), Int(69), Int(59)])), Some(Vec([Int(0), Int(-25), Int(-36), Int(-54)])), Some(Vec([Int(0), Int(64), Int(-91), Int(98)])), Some(Vec([Int(0), Int(14), Int(83), Int(-29)])), Some(Vec([Int(0), Int(97), Int(89), Int(81)])), Some(Vec([Int(0), Int(13), Int(-74), Int(-38)])), Some(Vec([Int(0), Int(67), Int(-52), Int(-8)])), Some(Vec([Int(0), Int(-36), Int(76), Int(-8)])), Some(Vec([Int(0), Int(-61), Int(22), Int(-77)])), Some(Vec([Int(0), Int(-16), Int(11), Int(-26)])), Some(Vec([Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(0), Int(59), Int(69), Int(-57)])), Some(Vec([Int(0), Int(-54), Int(-36), Int(-25)])), Some(Vec([Int(0), Int(98), Int(-91), Int(64)])), Some(Vec([Int(0), Int(-29), Int(83), Int(14)])), Some(Vec([Int(0), Int(81), Int(89), Int(97)])), Some(Vec([Int(0), Int(-38), Int(-74), Int(13)])), Some(Vec([Int(0), Int(-8), Int(-52), Int(67)])), Some(Vec([Int(0), Int(-8), Int(76), Int(-36)])), Some(Vec([Int(0), Int(-77), Int(22), Int(-61)])), Some(Vec([Int(0), Int(-26), Int(11), Int(-16)])), Some(Vec([Int(0), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Int(0), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Int(0), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Int(0), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Int(0), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Int(0), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Int(0), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Int(0), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Int(0), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Int(0), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)]))]
shuffle vec is: [Some(Vec([Int(0), Int(0), Int(-57), Int(69)])), Some(Vec([Int(0), Int(0), Int(-25), Int(-36)])), Some(Vec([Int(0), Int(0), Int(64), Int(-91)])), Some(Vec([Int(0), Int(0), Int(14), Int(83)])), Some(Vec([Int(0), Int(0), Int(97), Int(89)])), Some(Vec([Int(0), Int(0), Int(13), Int(-74)])), Some(Vec([Int(0), Int(0), Int(67), Int(-52)])), Some(Vec([Int(0), Int(0), Int(-36), Int(76)])), Some(Vec([Int(0), Int(0), Int(-61), Int(22)])), Some(Vec([Int(0), Int(0), Int(-16), Int(11)])), Some(Vec([Int(0), Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Int(0), Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Int(0), Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Int(0), Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Int(0), Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Int(0), Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Int(0), Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Int(0), Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Int(0), Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Int(0), Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
shuffled is: [Some(Vec([Int(0), Int(69), Int(-57), Int(0)])), Some(Vec([Int(0), Int(-36), Int(-25), Int(0)])), Some(Vec([Int(0), Int(-91), Int(64), Int(0)])), Some(Vec([Int(0), Int(83), Int(14), Int(0)])), Some(Vec([Int(0), Int(89), Int(97), Int(0)])), Some(Vec([Int(0), Int(-74), Int(13), Int(0)])), Some(Vec([Int(0), Int(-52), Int(67), Int(0)])), Some(Vec([Int(0), Int(76), Int(-36), Int(0)])), Some(Vec([Int(0), Int(22), Int(-61), Int(0)])), Some(Vec([Int(0), Int(11), Int(-16), Int(0)])), Some(Vec([Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0)])), Some(Vec([Int(0), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0)])), Some(Vec([Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0)])), Some(Vec([Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0)])), Some(Vec([Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0)])), Some(Vec([Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0)])), Some(Vec([Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0)])), Some(Vec([Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0)])), Some(Vec([Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0)])), Some(Vec([Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0)]))]
indices are: [Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(0), Int(0)])), Some(Vec([Int(-25), Int(-36), Int(0), Int(0)])), Some(Vec([Int(64), Int(-91), Int(0), Int(0)])), Some(Vec([Int(14), Int(83), Int(0), Int(0)])), Some(Vec([Int(97), Int(89), Int(0), Int(0)])), Some(Vec([Int(13), Int(-74), Int(0), Int(0)])), Some(Vec([Int(67), Int(-52), Int(0), Int(0)])), Some(Vec([Int(-36), Int(76), Int(0), Int(0)])), Some(Vec([Int(-61), Int(22), Int(0), Int(0)])), Some(Vec([Int(-16), Int(11), Int(0), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Int(0)]))]
shuffled is: [Some(Vec([Int(-57), Int(0), Int(0), Int(69)])), Some(Vec([Int(-25), Int(0), Int(0), Int(-36)])), Some(Vec([Int(64), Int(0), Int(0), Int(-91)])), Some(Vec([Int(14), Int(0), Int(0), Int(83)])), Some(Vec([Int(97), Int(0), Int(0), Int(89)])), Some(Vec([Int(13), Int(0), Int(0), Int(-74)])), Some(Vec([Int(67), Int(0), Int(0), Int(-52)])), Some(Vec([Int(-36), Int(0), Int(0), Int(76)])), Some(Vec([Int(-61), Int(0), Int(0), Int(22)])), Some(Vec([Int(-16), Int(0), Int(0), Int(11)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Int(0), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
indices are: [Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)])), Some(Vec([Int(0), Int(3), Int(2), Int(1)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(0), Int(0), Int(0)])), Some(Vec([Int(-25), Int(0), Int(0), Int(0)])), Some(Vec([Int(64), Int(0), Int(0), Int(0)])), Some(Vec([Int(14), Int(0), Int(0), Int(0)])), Some(Vec([Int(97), Int(0), Int(0), Int(0)])), Some(Vec([Int(13), Int(0), Int(0), Int(0)])), Some(Vec([Int(67), Int(0), Int(0), Int(0)])), Some(Vec([Int(-36), Int(0), Int(0), Int(0)])), Some(Vec([Int(-61), Int(0), Int(0), Int(0)])), Some(Vec([Int(-16), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Int(0), Int(0)]))]
shuffled is: [Some(Vec([Int(-57), Int(0), Int(0), Int(0)])), Some(Vec([Int(-25), Int(0), Int(0), Int(0)])), Some(Vec([Int(64), Int(0), Int(0), Int(0)])), Some(Vec([Int(14), Int(0), Int(0), Int(0)])), Some(Vec([Int(97), Int(0), Int(0), Int(0)])), Some(Vec([Int(13), Int(0), Int(0), Int(0)])), Some(Vec([Int(67), Int(0), Int(0), Int(0)])), Some(Vec([Int(-36), Int(0), Int(0), Int(0)])), Some(Vec([Int(-61), Int(0), Int(0), Int(0)])), Some(Vec([Int(-16), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Int(0), Int(0)]))]
vector, [Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)]))]
indices are: [Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(88)])), Some(Vec([Int(64), Int(-91), Int(98), Int(3)])), Some(Vec([Int(14), Int(83), Int(-29), Int(92)])), Some(Vec([Int(97), Int(89), Int(81), Int(93)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(-54)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(29)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(-59)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(39)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(65)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(-57), Int(59), Int(69), Int(-57)])), Some(Vec([Int(-25), Int(-54), Int(-36), Int(88)])), Some(Vec([Int(64), Int(98), Int(-91), Int(3)])), Some(Vec([Int(14), Int(-29), Int(83), Int(92)])), Some(Vec([Int(97), Int(81), Int(89), Int(93)])), Some(Vec([Int(13), Int(-38), Int(-74), Int(-54)])), Some(Vec([Int(67), Int(-8), Int(-52), Int(29)])), Some(Vec([Int(-36), Int(-8), Int(76), Int(-59)])), Some(Vec([Int(-61), Int(-77), Int(22), Int(39)])), Some(Vec([Int(-16), Int(-26), Int(11), Int(65)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
indices are: [Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)]))]
shuffle vec is: [Some(Vec([Int(59), Int(69), Int(-57), Int(-57)])), Some(Vec([Int(-54), Int(-36), Int(-25), Int(88)])), Some(Vec([Int(98), Int(-91), Int(64), Int(3)])), Some(Vec([Int(-29), Int(83), Int(14), Int(92)])), Some(Vec([Int(81), Int(89), Int(97), Int(93)])), Some(Vec([Int(-38), Int(-74), Int(13), Int(-54)])), Some(Vec([Int(-8), Int(-52), Int(67), Int(29)])), Some(Vec([Int(-8), Int(76), Int(-36), Int(-59)])), Some(Vec([Int(-77), Int(22), Int(-61), Int(39)])), Some(Vec([Int(-26), Int(11), Int(-16), Int(65)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(59), Int(-57), Int(69), Int(-57)])), Some(Vec([Int(-54), Int(-25), Int(-36), Int(88)])), Some(Vec([Int(98), Int(64), Int(-91), Int(3)])), Some(Vec([Int(-29), Int(14), Int(83), Int(92)])), Some(Vec([Int(81), Int(97), Int(89), Int(93)])), Some(Vec([Int(-38), Int(13), Int(-74), Int(-54)])), Some(Vec([Int(-8), Int(67), Int(-52), Int(29)])), Some(Vec([Int(-8), Int(-36), Int(76), Int(-59)])), Some(Vec([Int(-77), Int(-61), Int(22), Int(39)])), Some(Vec([Int(-26), Int(-16), Int(11), Int(65)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
indices are: [Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(-57), Int(59), Int(69)])), Some(Vec([Int(-25), Int(88), Int(-54), Int(-36)])), Some(Vec([Int(64), Int(3), Int(98), Int(-91)])), Some(Vec([Int(14), Int(92), Int(-29), Int(83)])), Some(Vec([Int(97), Int(93), Int(81), Int(89)])), Some(Vec([Int(13), Int(-54), Int(-38), Int(-74)])), Some(Vec([Int(67), Int(29), Int(-8), Int(-52)])), Some(Vec([Int(-36), Int(-59), Int(-8), Int(76)])), Some(Vec([Int(-61), Int(39), Int(-77), Int(22)])), Some(Vec([Int(-16), Int(65), Int(-26), Int(11)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
shuffled is: [Some(Vec([Int(-57), Int(59), Int(-57), Int(69)])), Some(Vec([Int(-25), Int(-54), Int(88), Int(-36)])), Some(Vec([Int(64), Int(98), Int(3), Int(-91)])), Some(Vec([Int(14), Int(-29), Int(92), Int(83)])), Some(Vec([Int(97), Int(81), Int(93), Int(89)])), Some(Vec([Int(13), Int(-38), Int(-54), Int(-74)])), Some(Vec([Int(67), Int(-8), Int(29), Int(-52)])), Some(Vec([Int(-36), Int(-8), Int(-59), Int(76)])), Some(Vec([Int(-61), Int(-77), Int(39), Int(22)])), Some(Vec([Int(-16), Int(-26), Int(65), Int(11)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
indices are: [Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)]))]
shuffle vec is: [Some(Vec([Int(69), Int(-57), Int(59), Int(-57)])), Some(Vec([Int(-36), Int(-25), Int(-54), Int(88)])), Some(Vec([Int(-91), Int(64), Int(98), Int(3)])), Some(Vec([Int(83), Int(14), Int(-29), Int(92)])), Some(Vec([Int(89), Int(97), Int(81), Int(93)])), Some(Vec([Int(-74), Int(13), Int(-38), Int(-54)])), Some(Vec([Int(-52), Int(67), Int(-8), Int(29)])), Some(Vec([Int(76), Int(-36), Int(-8), Int(-59)])), Some(Vec([Int(22), Int(-61), Int(-77), Int(39)])), Some(Vec([Int(11), Int(-16), Int(-26), Int(65)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(69), Int(59), Int(-57), Int(-57)])), Some(Vec([Int(-36), Int(-54), Int(-25), Int(88)])), Some(Vec([Int(-91), Int(98), Int(64), Int(3)])), Some(Vec([Int(83), Int(-29), Int(14), Int(92)])), Some(Vec([Int(89), Int(81), Int(97), Int(93)])), Some(Vec([Int(-74), Int(-38), Int(13), Int(-54)])), Some(Vec([Int(-52), Int(-8), Int(67), Int(29)])), Some(Vec([Int(76), Int(-8), Int(-36), Int(-59)])), Some(Vec([Int(22), Int(-77), Int(-61), Int(39)])), Some(Vec([Int(11), Int(-26), Int(-16), Int(65)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
indices are: [Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(-57), Int(59)])), Some(Vec([Int(-25), Int(-36), Int(88), Int(-54)])), Some(Vec([Int(64), Int(-91), Int(3), Int(98)])), Some(Vec([Int(14), Int(83), Int(92), Int(-29)])), Some(Vec([Int(97), Int(89), Int(93), Int(81)])), Some(Vec([Int(13), Int(-74), Int(-54), Int(-38)])), Some(Vec([Int(67), Int(-52), Int(29), Int(-8)])), Some(Vec([Int(-36), Int(76), Int(-59), Int(-8)])), Some(Vec([Int(-61), Int(22), Int(39), Int(-77)])), Some(Vec([Int(-16), Int(11), Int(65), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(-57), Int(-57), Int(69), Int(59)])), Some(Vec([Int(-25), Int(88), Int(-36), Int(-54)])), Some(Vec([Int(64), Int(3), Int(-91), Int(98)])), Some(Vec([Int(14), Int(92), Int(83), Int(-29)])), Some(Vec([Int(97), Int(93), Int(89), Int(81)])), Some(Vec([Int(13), Int(-54), Int(-74), Int(-38)])), Some(Vec([Int(67), Int(29), Int(-52), Int(-8)])), Some(Vec([Int(-36), Int(-59), Int(76), Int(-8)])), Some(Vec([Int(-61), Int(39), Int(22), Int(-77)])), Some(Vec([Int(-16), Int(65), Int(11), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(88), Int(-36), Int(-54), Int(-25)])), Some(Vec([Int(3), Int(-91), Int(98), Int(64)])), Some(Vec([Int(92), Int(83), Int(-29), Int(14)])), Some(Vec([Int(93), Int(89), Int(81), Int(97)])), Some(Vec([Int(-54), Int(-74), Int(-38), Int(13)])), Some(Vec([Int(29), Int(-52), Int(-8), Int(67)])), Some(Vec([Int(-59), Int(76), Int(-8), Int(-36)])), Some(Vec([Int(39), Int(22), Int(-77), Int(-61)])), Some(Vec([Int(65), Int(11), Int(-26), Int(-16)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
shuffled is: [Some(Vec([Int(-57), Int(59), Int(69), Int(-57)])), Some(Vec([Int(88), Int(-54), Int(-36), Int(-25)])), Some(Vec([Int(3), Int(98), Int(-91), Int(64)])), Some(Vec([Int(92), Int(-29), Int(83), Int(14)])), Some(Vec([Int(93), Int(81), Int(89), Int(97)])), Some(Vec([Int(-54), Int(-38), Int(-74), Int(13)])), Some(Vec([Int(29), Int(-8), Int(-52), Int(67)])), Some(Vec([Int(-59), Int(-8), Int(76), Int(-36)])), Some(Vec([Int(39), Int(-77), Int(22), Int(-61)])), Some(Vec([Int(65), Int(-26), Int(11), Int(-16)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(-57), Int(69), Int(59)])), Some(Vec([Int(88), Int(-25), Int(-36), Int(-54)])), Some(Vec([Int(3), Int(64), Int(-91), Int(98)])), Some(Vec([Int(92), Int(14), Int(83), Int(-29)])), Some(Vec([Int(93), Int(97), Int(89), Int(81)])), Some(Vec([Int(-54), Int(13), Int(-74), Int(-38)])), Some(Vec([Int(29), Int(67), Int(-52), Int(-8)])), Some(Vec([Int(-59), Int(-36), Int(76), Int(-8)])), Some(Vec([Int(39), Int(-61), Int(22), Int(-77)])), Some(Vec([Int(65), Int(-16), Int(11), Int(-26)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(-57), Int(69), Int(-57), Int(59)])), Some(Vec([Int(88), Int(-36), Int(-25), Int(-54)])), Some(Vec([Int(3), Int(-91), Int(64), Int(98)])), Some(Vec([Int(92), Int(83), Int(14), Int(-29)])), Some(Vec([Int(93), Int(89), Int(97), Int(81)])), Some(Vec([Int(-54), Int(-74), Int(13), Int(-38)])), Some(Vec([Int(29), Int(-52), Int(67), Int(-8)])), Some(Vec([Int(-59), Int(76), Int(-36), Int(-8)])), Some(Vec([Int(39), Int(22), Int(-61), Int(-77)])), Some(Vec([Int(65), Int(11), Int(-16), Int(-26)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(0)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(0)])), Some(Vec([Int(64), Int(-91), Int(98), Int(0)])), Some(Vec([Int(14), Int(83), Int(-29), Int(0)])), Some(Vec([Int(97), Int(89), Int(81), Int(0)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(0)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(0)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(0)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(0)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Int(0)]))]
shuffled is: [Some(Vec([Int(-57), Int(59), Int(69), Int(0)])), Some(Vec([Int(-25), Int(-54), Int(-36), Int(0)])), Some(Vec([Int(64), Int(98), Int(-91), Int(0)])), Some(Vec([Int(14), Int(-29), Int(83), Int(0)])), Some(Vec([Int(97), Int(81), Int(89), Int(0)])), Some(Vec([Int(13), Int(-38), Int(-74), Int(0)])), Some(Vec([Int(67), Int(-8), Int(-52), Int(0)])), Some(Vec([Int(-36), Int(-8), Int(76), Int(0)])), Some(Vec([Int(-61), Int(-77), Int(22), Int(0)])), Some(Vec([Int(-16), Int(-26), Int(11), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0)]))]
indices are: [Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(0), Int(59)])), Some(Vec([Int(-25), Int(-36), Int(0), Int(-54)])), Some(Vec([Int(64), Int(-91), Int(0), Int(98)])), Some(Vec([Int(14), Int(83), Int(0), Int(-29)])), Some(Vec([Int(97), Int(89), Int(0), Int(81)])), Some(Vec([Int(13), Int(-74), Int(0), Int(-38)])), Some(Vec([Int(67), Int(-52), Int(0), Int(-8)])), Some(Vec([Int(-36), Int(76), Int(0), Int(-8)])), Some(Vec([Int(-61), Int(22), Int(0), Int(-77)])), Some(Vec([Int(-16), Int(11), Int(0), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(-57), Int(0), Int(69), Int(59)])), Some(Vec([Int(-25), Int(0), Int(-36), Int(-54)])), Some(Vec([Int(64), Int(0), Int(-91), Int(98)])), Some(Vec([Int(14), Int(0), Int(83), Int(-29)])), Some(Vec([Int(97), Int(0), Int(89), Int(81)])), Some(Vec([Int(13), Int(0), Int(-74), Int(-38)])), Some(Vec([Int(67), Int(0), Int(-52), Int(-8)])), Some(Vec([Int(-36), Int(0), Int(76), Int(-8)])), Some(Vec([Int(-61), Int(0), Int(22), Int(-77)])), Some(Vec([Int(-16), Int(0), Int(11), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(0), Int(69), Int(59)])), Some(Vec([Int(-25), Int(0), Int(-36), Int(-54)])), Some(Vec([Int(64), Int(0), Int(-91), Int(98)])), Some(Vec([Int(14), Int(0), Int(83), Int(-29)])), Some(Vec([Int(97), Int(0), Int(89), Int(81)])), Some(Vec([Int(13), Int(0), Int(-74), Int(-38)])), Some(Vec([Int(67), Int(0), Int(-52), Int(-8)])), Some(Vec([Int(-36), Int(0), Int(76), Int(-8)])), Some(Vec([Int(-61), Int(0), Int(22), Int(-77)])), Some(Vec([Int(-16), Int(0), Int(11), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(-57), Int(69), Int(0), Int(59)])), Some(Vec([Int(-25), Int(-36), Int(0), Int(-54)])), Some(Vec([Int(64), Int(-91), Int(0), Int(98)])), Some(Vec([Int(14), Int(83), Int(0), Int(-29)])), Some(Vec([Int(97), Int(89), Int(0), Int(81)])), Some(Vec([Int(13), Int(-74), Int(0), Int(-38)])), Some(Vec([Int(67), Int(-52), Int(0), Int(-8)])), Some(Vec([Int(-36), Int(76), Int(0), Int(-8)])), Some(Vec([Int(-61), Int(22), Int(0), Int(-77)])), Some(Vec([Int(-16), Int(11), Int(0), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)]))]
shuffle vec is: [Some(Vec([Int(0), Int(-57), Int(69), Int(59)])), Some(Vec([Int(0), Int(-25), Int(-36), Int(-54)])), Some(Vec([Int(0), Int(64), Int(-91), Int(98)])), Some(Vec([Int(0), Int(14), Int(83), Int(-29)])), Some(Vec([Int(0), Int(97), Int(89), Int(81)])), Some(Vec([Int(0), Int(13), Int(-74), Int(-38)])), Some(Vec([Int(0), Int(67), Int(-52), Int(-8)])), Some(Vec([Int(0), Int(-36), Int(76), Int(-8)])), Some(Vec([Int(0), Int(-61), Int(22), Int(-77)])), Some(Vec([Int(0), Int(-16), Int(11), Int(-26)])), Some(Vec([Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(0), Int(69), Int(-57), Int(59)])), Some(Vec([Int(0), Int(-36), Int(-25), Int(-54)])), Some(Vec([Int(0), Int(-91), Int(64), Int(98)])), Some(Vec([Int(0), Int(83), Int(14), Int(-29)])), Some(Vec([Int(0), Int(89), Int(97), Int(81)])), Some(Vec([Int(0), Int(-74), Int(13), Int(-38)])), Some(Vec([Int(0), Int(-52), Int(67), Int(-8)])), Some(Vec([Int(0), Int(76), Int(-36), Int(-8)])), Some(Vec([Int(0), Int(22), Int(-61), Int(-77)])), Some(Vec([Int(0), Int(11), Int(-16), Int(-26)])), Some(Vec([Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Int(0), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)]))]
shuffle vec is: [Some(Vec([Int(0), Int(0), Int(-57), Int(69)])), Some(Vec([Int(0), Int(0), Int(-25), Int(-36)])), Some(Vec([Int(0), Int(0), Int(64), Int(-91)])), Some(Vec([Int(0), Int(0), Int(14), Int(83)])), Some(Vec([Int(0), Int(0), Int(97), Int(89)])), Some(Vec([Int(0), Int(0), Int(13), Int(-74)])), Some(Vec([Int(0), Int(0), Int(67), Int(-52)])), Some(Vec([Int(0), Int(0), Int(-36), Int(76)])), Some(Vec([Int(0), Int(0), Int(-61), Int(22)])), Some(Vec([Int(0), Int(0), Int(-16), Int(11)])), Some(Vec([Int(0), Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Int(0), Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Int(0), Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Int(0), Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Int(0), Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Int(0), Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Int(0), Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Int(0), Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Int(0), Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Int(0), Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
shuffled is: [Some(Vec([Int(0), Int(-57), Int(0), Int(69)])), Some(Vec([Int(0), Int(-25), Int(0), Int(-36)])), Some(Vec([Int(0), Int(64), Int(0), Int(-91)])), Some(Vec([Int(0), Int(14), Int(0), Int(83)])), Some(Vec([Int(0), Int(97), Int(0), Int(89)])), Some(Vec([Int(0), Int(13), Int(0), Int(-74)])), Some(Vec([Int(0), Int(67), Int(0), Int(-52)])), Some(Vec([Int(0), Int(-36), Int(0), Int(76)])), Some(Vec([Int(0), Int(-61), Int(0), Int(22)])), Some(Vec([Int(0), Int(-16), Int(0), Int(11)])), Some(Vec([Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
indices are: [Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(0), Int(0)])), Some(Vec([Int(-25), Int(-36), Int(0), Int(0)])), Some(Vec([Int(64), Int(-91), Int(0), Int(0)])), Some(Vec([Int(14), Int(83), Int(0), Int(0)])), Some(Vec([Int(97), Int(89), Int(0), Int(0)])), Some(Vec([Int(13), Int(-74), Int(0), Int(0)])), Some(Vec([Int(67), Int(-52), Int(0), Int(0)])), Some(Vec([Int(-36), Int(76), Int(0), Int(0)])), Some(Vec([Int(-61), Int(22), Int(0), Int(0)])), Some(Vec([Int(-16), Int(11), Int(0), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Int(0)]))]
shuffled is: [Some(Vec([Int(-57), Int(0), Int(69), Int(0)])), Some(Vec([Int(-25), Int(0), Int(-36), Int(0)])), Some(Vec([Int(64), Int(0), Int(-91), Int(0)])), Some(Vec([Int(14), Int(0), Int(83), Int(0)])), Some(Vec([Int(97), Int(0), Int(89), Int(0)])), Some(Vec([Int(13), Int(0), Int(-74), Int(0)])), Some(Vec([Int(67), Int(0), Int(-52), Int(0)])), Some(Vec([Int(-36), Int(0), Int(76), Int(0)])), Some(Vec([Int(-61), Int(0), Int(22), Int(0)])), Some(Vec([Int(-16), Int(0), Int(11), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0)]))]
indices are: [Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)])), Some(Vec([Int(0), Int(2), Int(1), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(0), Int(0), Int(0)])), Some(Vec([Int(-25), Int(0), Int(0), Int(0)])), Some(Vec([Int(64), Int(0), Int(0), Int(0)])), Some(Vec([Int(14), Int(0), Int(0), Int(0)])), Some(Vec([Int(97), Int(0), Int(0), Int(0)])), Some(Vec([Int(13), Int(0), Int(0), Int(0)])), Some(Vec([Int(67), Int(0), Int(0), Int(0)])), Some(Vec([Int(-36), Int(0), Int(0), Int(0)])), Some(Vec([Int(-61), Int(0), Int(0), Int(0)])), Some(Vec([Int(-16), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Int(0), Int(0)]))]
shuffled is: [Some(Vec([Int(-57), Int(0), Int(0), Int(0)])), Some(Vec([Int(-25), Int(0), Int(0), Int(0)])), Some(Vec([Int(64), Int(0), Int(0), Int(0)])), Some(Vec([Int(14), Int(0), Int(0), Int(0)])), Some(Vec([Int(97), Int(0), Int(0), Int(0)])), Some(Vec([Int(13), Int(0), Int(0), Int(0)])), Some(Vec([Int(67), Int(0), Int(0), Int(0)])), Some(Vec([Int(-36), Int(0), Int(0), Int(0)])), Some(Vec([Int(-61), Int(0), Int(0), Int(0)])), Some(Vec([Int(-16), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Int(0), Int(0)]))]
vector, [Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)]))]
indices are: [Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(88)])), Some(Vec([Int(64), Int(-91), Int(98), Int(3)])), Some(Vec([Int(14), Int(83), Int(-29), Int(92)])), Some(Vec([Int(97), Int(89), Int(81), Int(93)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(-54)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(29)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(-59)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(39)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(65)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(59), Int(69), Int(-57), Int(-57)])), Some(Vec([Int(-54), Int(-36), Int(-25), Int(88)])), Some(Vec([Int(98), Int(-91), Int(64), Int(3)])), Some(Vec([Int(-29), Int(83), Int(14), Int(92)])), Some(Vec([Int(81), Int(89), Int(97), Int(93)])), Some(Vec([Int(-38), Int(-74), Int(13), Int(-54)])), Some(Vec([Int(-8), Int(-52), Int(67), Int(29)])), Some(Vec([Int(-8), Int(76), Int(-36), Int(-59)])), Some(Vec([Int(-77), Int(22), Int(-61), Int(39)])), Some(Vec([Int(-26), Int(11), Int(-16), Int(65)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
indices are: [Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)]))]
shuffle vec is: [Some(Vec([Int(59), Int(69), Int(-57), Int(-57)])), Some(Vec([Int(-54), Int(-36), Int(-25), Int(88)])), Some(Vec([Int(98), Int(-91), Int(64), Int(3)])), Some(Vec([Int(-29), Int(83), Int(14), Int(92)])), Some(Vec([Int(81), Int(89), Int(97), Int(93)])), Some(Vec([Int(-38), Int(-74), Int(13), Int(-54)])), Some(Vec([Int(-8), Int(-52), Int(67), Int(29)])), Some(Vec([Int(-8), Int(76), Int(-36), Int(-59)])), Some(Vec([Int(-77), Int(22), Int(-61), Int(39)])), Some(Vec([Int(-26), Int(11), Int(-16), Int(65)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(88)])), Some(Vec([Int(64), Int(-91), Int(98), Int(3)])), Some(Vec([Int(14), Int(83), Int(-29), Int(92)])), Some(Vec([Int(97), Int(89), Int(81), Int(93)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(-54)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(29)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(-59)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(39)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(65)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
indices are: [Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(-57), Int(59), Int(69)])), Some(Vec([Int(-25), Int(88), Int(-54), Int(-36)])), Some(Vec([Int(64), Int(3), Int(98), Int(-91)])), Some(Vec([Int(14), Int(92), Int(-29), Int(83)])), Some(Vec([Int(97), Int(93), Int(81), Int(89)])), Some(Vec([Int(13), Int(-54), Int(-38), Int(-74)])), Some(Vec([Int(67), Int(29), Int(-8), Int(-52)])), Some(Vec([Int(-36), Int(-59), Int(-8), Int(76)])), Some(Vec([Int(-61), Int(39), Int(-77), Int(22)])), Some(Vec([Int(-16), Int(65), Int(-26), Int(11)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
shuffled is: [Some(Vec([Int(59), Int(-57), Int(-57), Int(69)])), Some(Vec([Int(-54), Int(88), Int(-25), Int(-36)])), Some(Vec([Int(98), Int(3), Int(64), Int(-91)])), Some(Vec([Int(-29), Int(92), Int(14), Int(83)])), Some(Vec([Int(81), Int(93), Int(97), Int(89)])), Some(Vec([Int(-38), Int(-54), Int(13), Int(-74)])), Some(Vec([Int(-8), Int(29), Int(67), Int(-52)])), Some(Vec([Int(-8), Int(-59), Int(-36), Int(76)])), Some(Vec([Int(-77), Int(39), Int(-61), Int(22)])), Some(Vec([Int(-26), Int(65), Int(-16), Int(11)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
indices are: [Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)]))]
shuffle vec is: [Some(Vec([Int(69), Int(-57), Int(59), Int(-57)])), Some(Vec([Int(-36), Int(-25), Int(-54), Int(88)])), Some(Vec([Int(-91), Int(64), Int(98), Int(3)])), Some(Vec([Int(83), Int(14), Int(-29), Int(92)])), Some(Vec([Int(89), Int(97), Int(81), Int(93)])), Some(Vec([Int(-74), Int(13), Int(-38), Int(-54)])), Some(Vec([Int(-52), Int(67), Int(-8), Int(29)])), Some(Vec([Int(76), Int(-36), Int(-8), Int(-59)])), Some(Vec([Int(22), Int(-61), Int(-77), Int(39)])), Some(Vec([Int(11), Int(-16), Int(-26), Int(65)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(59), Int(-57), Int(69), Int(-57)])), Some(Vec([Int(-54), Int(-25), Int(-36), Int(88)])), Some(Vec([Int(98), Int(64), Int(-91), Int(3)])), Some(Vec([Int(-29), Int(14), Int(83), Int(92)])), Some(Vec([Int(81), Int(97), Int(89), Int(93)])), Some(Vec([Int(-38), Int(13), Int(-74), Int(-54)])), Some(Vec([Int(-8), Int(67), Int(-52), Int(29)])), Some(Vec([Int(-8), Int(-36), Int(76), Int(-59)])), Some(Vec([Int(-77), Int(-61), Int(22), Int(39)])), Some(Vec([Int(-26), Int(-16), Int(11), Int(65)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
indices are: [Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(-57), Int(59)])), Some(Vec([Int(-25), Int(-36), Int(88), Int(-54)])), Some(Vec([Int(64), Int(-91), Int(3), Int(98)])), Some(Vec([Int(14), Int(83), Int(92), Int(-29)])), Some(Vec([Int(97), Int(89), Int(93), Int(81)])), Some(Vec([Int(13), Int(-74), Int(-54), Int(-38)])), Some(Vec([Int(67), Int(-52), Int(29), Int(-8)])), Some(Vec([Int(-36), Int(76), Int(-59), Int(-8)])), Some(Vec([Int(-61), Int(22), Int(39), Int(-77)])), Some(Vec([Int(-16), Int(11), Int(65), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(-57), Int(69), Int(-57), Int(59)])), Some(Vec([Int(88), Int(-36), Int(-25), Int(-54)])), Some(Vec([Int(3), Int(-91), Int(64), Int(98)])), Some(Vec([Int(92), Int(83), Int(14), Int(-29)])), Some(Vec([Int(93), Int(89), Int(97), Int(81)])), Some(Vec([Int(-54), Int(-74), Int(13), Int(-38)])), Some(Vec([Int(29), Int(-52), Int(67), Int(-8)])), Some(Vec([Int(-59), Int(76), Int(-36), Int(-8)])), Some(Vec([Int(39), Int(22), Int(-61), Int(-77)])), Some(Vec([Int(65), Int(11), Int(-16), Int(-26)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(88), Int(-36), Int(-54), Int(-25)])), Some(Vec([Int(3), Int(-91), Int(98), Int(64)])), Some(Vec([Int(92), Int(83), Int(-29), Int(14)])), Some(Vec([Int(93), Int(89), Int(81), Int(97)])), Some(Vec([Int(-54), Int(-74), Int(-38), Int(13)])), Some(Vec([Int(29), Int(-52), Int(-8), Int(67)])), Some(Vec([Int(-59), Int(76), Int(-8), Int(-36)])), Some(Vec([Int(39), Int(22), Int(-77), Int(-61)])), Some(Vec([Int(65), Int(11), Int(-26), Int(-16)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
shuffled is: [Some(Vec([Int(59), Int(69), Int(-57), Int(-57)])), Some(Vec([Int(-54), Int(-36), Int(88), Int(-25)])), Some(Vec([Int(98), Int(-91), Int(3), Int(64)])), Some(Vec([Int(-29), Int(83), Int(92), Int(14)])), Some(Vec([Int(81), Int(89), Int(93), Int(97)])), Some(Vec([Int(-38), Int(-74), Int(-54), Int(13)])), Some(Vec([Int(-8), Int(-52), Int(29), Int(67)])), Some(Vec([Int(-8), Int(76), Int(-59), Int(-36)])), Some(Vec([Int(-77), Int(22), Int(39), Int(-61)])), Some(Vec([Int(-26), Int(11), Int(65), Int(-16)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(-57), Int(69), Int(59)])), Some(Vec([Int(88), Int(-25), Int(-36), Int(-54)])), Some(Vec([Int(3), Int(64), Int(-91), Int(98)])), Some(Vec([Int(92), Int(14), Int(83), Int(-29)])), Some(Vec([Int(93), Int(97), Int(89), Int(81)])), Some(Vec([Int(-54), Int(13), Int(-74), Int(-38)])), Some(Vec([Int(29), Int(67), Int(-52), Int(-8)])), Some(Vec([Int(-59), Int(-36), Int(76), Int(-8)])), Some(Vec([Int(39), Int(-61), Int(22), Int(-77)])), Some(Vec([Int(65), Int(-16), Int(11), Int(-26)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(69), Int(-57), Int(-57), Int(59)])), Some(Vec([Int(-36), Int(-25), Int(88), Int(-54)])), Some(Vec([Int(-91), Int(64), Int(3), Int(98)])), Some(Vec([Int(83), Int(14), Int(92), Int(-29)])), Some(Vec([Int(89), Int(97), Int(93), Int(81)])), Some(Vec([Int(-74), Int(13), Int(-54), Int(-38)])), Some(Vec([Int(-52), Int(67), Int(29), Int(-8)])), Some(Vec([Int(76), Int(-36), Int(-59), Int(-8)])), Some(Vec([Int(22), Int(-61), Int(39), Int(-77)])), Some(Vec([Int(11), Int(-16), Int(65), Int(-26)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(0)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(0)])), Some(Vec([Int(64), Int(-91), Int(98), Int(0)])), Some(Vec([Int(14), Int(83), Int(-29), Int(0)])), Some(Vec([Int(97), Int(89), Int(81), Int(0)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(0)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(0)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(0)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(0)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Int(0)]))]
shuffled is: [Some(Vec([Int(59), Int(69), Int(-57), Int(0)])), Some(Vec([Int(-54), Int(-36), Int(-25), Int(0)])), Some(Vec([Int(98), Int(-91), Int(64), Int(0)])), Some(Vec([Int(-29), Int(83), Int(14), Int(0)])), Some(Vec([Int(81), Int(89), Int(97), Int(0)])), Some(Vec([Int(-38), Int(-74), Int(13), Int(0)])), Some(Vec([Int(-8), Int(-52), Int(67), Int(0)])), Some(Vec([Int(-8), Int(76), Int(-36), Int(0)])), Some(Vec([Int(-77), Int(22), Int(-61), Int(0)])), Some(Vec([Int(-26), Int(11), Int(-16), Int(0)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0)])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0)])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0)])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0)])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0)])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0)])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0)])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0)])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0)])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0)]))]
indices are: [Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(0), Int(59)])), Some(Vec([Int(-25), Int(-36), Int(0), Int(-54)])), Some(Vec([Int(64), Int(-91), Int(0), Int(98)])), Some(Vec([Int(14), Int(83), Int(0), Int(-29)])), Some(Vec([Int(97), Int(89), Int(0), Int(81)])), Some(Vec([Int(13), Int(-74), Int(0), Int(-38)])), Some(Vec([Int(67), Int(-52), Int(0), Int(-8)])), Some(Vec([Int(-36), Int(76), Int(0), Int(-8)])), Some(Vec([Int(-61), Int(22), Int(0), Int(-77)])), Some(Vec([Int(-16), Int(11), Int(0), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(0), Int(69), Int(-57), Int(59)])), Some(Vec([Int(0), Int(-36), Int(-25), Int(-54)])), Some(Vec([Int(0), Int(-91), Int(64), Int(98)])), Some(Vec([Int(0), Int(83), Int(14), Int(-29)])), Some(Vec([Int(0), Int(89), Int(97), Int(81)])), Some(Vec([Int(0), Int(-74), Int(13), Int(-38)])), Some(Vec([Int(0), Int(-52), Int(67), Int(-8)])), Some(Vec([Int(0), Int(76), Int(-36), Int(-8)])), Some(Vec([Int(0), Int(22), Int(-61), Int(-77)])), Some(Vec([Int(0), Int(11), Int(-16), Int(-26)])), Some(Vec([Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Int(0), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(0), Int(69), Int(59)])), Some(Vec([Int(-25), Int(0), Int(-36), Int(-54)])), Some(Vec([Int(64), Int(0), Int(-91), Int(98)])), Some(Vec([Int(14), Int(0), Int(83), Int(-29)])), Some(Vec([Int(97), Int(0), Int(89), Int(81)])), Some(Vec([Int(13), Int(0), Int(-74), Int(-38)])), Some(Vec([Int(67), Int(0), Int(-52), Int(-8)])), Some(Vec([Int(-36), Int(0), Int(76), Int(-8)])), Some(Vec([Int(-61), Int(0), Int(22), Int(-77)])), Some(Vec([Int(-16), Int(0), Int(11), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(69), Int(0), Int(-57), Int(59)])), Some(Vec([Int(-36), Int(0), Int(-25), Int(-54)])), Some(Vec([Int(-91), Int(0), Int(64), Int(98)])), Some(Vec([Int(83), Int(0), Int(14), Int(-29)])), Some(Vec([Int(89), Int(0), Int(97), Int(81)])), Some(Vec([Int(-74), Int(0), Int(13), Int(-38)])), Some(Vec([Int(-52), Int(0), Int(67), Int(-8)])), Some(Vec([Int(76), Int(0), Int(-36), Int(-8)])), Some(Vec([Int(22), Int(0), Int(-61), Int(-77)])), Some(Vec([Int(11), Int(0), Int(-16), Int(-26)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)]))]
shuffle vec is: [Some(Vec([Int(0), Int(-57), Int(69), Int(59)])), Some(Vec([Int(0), Int(-25), Int(-36), Int(-54)])), Some(Vec([Int(0), Int(64), Int(-91), Int(98)])), Some(Vec([Int(0), Int(14), Int(83), Int(-29)])), Some(Vec([Int(0), Int(97), Int(89), Int(81)])), Some(Vec([Int(0), Int(13), Int(-74), Int(-38)])), Some(Vec([Int(0), Int(67), Int(-52), Int(-8)])), Some(Vec([Int(0), Int(-36), Int(76), Int(-8)])), Some(Vec([Int(0), Int(-61), Int(22), Int(-77)])), Some(Vec([Int(0), Int(-16), Int(11), Int(-26)])), Some(Vec([Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(69), Int(-57), Int(0), Int(59)])), Some(Vec([Int(-36), Int(-25), Int(0), Int(-54)])), Some(Vec([Int(-91), Int(64), Int(0), Int(98)])), Some(Vec([Int(83), Int(14), Int(0), Int(-29)])), Some(Vec([Int(89), Int(97), Int(0), Int(81)])), Some(Vec([Int(-74), Int(13), Int(0), Int(-38)])), Some(Vec([Int(-52), Int(67), Int(0), Int(-8)])), Some(Vec([Int(76), Int(-36), Int(0), Int(-8)])), Some(Vec([Int(22), Int(-61), Int(0), Int(-77)])), Some(Vec([Int(11), Int(-16), Int(0), Int(-26)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)]))]
shuffle vec is: [Some(Vec([Int(0), Int(0), Int(-57), Int(69)])), Some(Vec([Int(0), Int(0), Int(-25), Int(-36)])), Some(Vec([Int(0), Int(0), Int(64), Int(-91)])), Some(Vec([Int(0), Int(0), Int(14), Int(83)])), Some(Vec([Int(0), Int(0), Int(97), Int(89)])), Some(Vec([Int(0), Int(0), Int(13), Int(-74)])), Some(Vec([Int(0), Int(0), Int(67), Int(-52)])), Some(Vec([Int(0), Int(0), Int(-36), Int(76)])), Some(Vec([Int(0), Int(0), Int(-61), Int(22)])), Some(Vec([Int(0), Int(0), Int(-16), Int(11)])), Some(Vec([Int(0), Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Int(0), Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Int(0), Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Int(0), Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Int(0), Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Int(0), Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Int(0), Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Int(0), Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Int(0), Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Int(0), Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
shuffled is: [Some(Vec([Int(-57), Int(0), Int(0), Int(69)])), Some(Vec([Int(-25), Int(0), Int(0), Int(-36)])), Some(Vec([Int(64), Int(0), Int(0), Int(-91)])), Some(Vec([Int(14), Int(0), Int(0), Int(83)])), Some(Vec([Int(97), Int(0), Int(0), Int(89)])), Some(Vec([Int(13), Int(0), Int(0), Int(-74)])), Some(Vec([Int(67), Int(0), Int(0), Int(-52)])), Some(Vec([Int(-36), Int(0), Int(0), Int(76)])), Some(Vec([Int(-61), Int(0), Int(0), Int(22)])), Some(Vec([Int(-16), Int(0), Int(0), Int(11)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Int(0), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
indices are: [Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(0), Int(0)])), Some(Vec([Int(-25), Int(-36), Int(0), Int(0)])), Some(Vec([Int(64), Int(-91), Int(0), Int(0)])), Some(Vec([Int(14), Int(83), Int(0), Int(0)])), Some(Vec([Int(97), Int(89), Int(0), Int(0)])), Some(Vec([Int(13), Int(-74), Int(0), Int(0)])), Some(Vec([Int(67), Int(-52), Int(0), Int(0)])), Some(Vec([Int(-36), Int(76), Int(0), Int(0)])), Some(Vec([Int(-61), Int(22), Int(0), Int(0)])), Some(Vec([Int(-16), Int(11), Int(0), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Int(0)]))]
shuffled is: [Some(Vec([Int(0), Int(69), Int(-57), Int(0)])), Some(Vec([Int(0), Int(-36), Int(-25), Int(0)])), Some(Vec([Int(0), Int(-91), Int(64), Int(0)])), Some(Vec([Int(0), Int(83), Int(14), Int(0)])), Some(Vec([Int(0), Int(89), Int(97), Int(0)])), Some(Vec([Int(0), Int(-74), Int(13), Int(0)])), Some(Vec([Int(0), Int(-52), Int(67), Int(0)])), Some(Vec([Int(0), Int(76), Int(-36), Int(0)])), Some(Vec([Int(0), Int(22), Int(-61), Int(0)])), Some(Vec([Int(0), Int(11), Int(-16), Int(0)])), Some(Vec([Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0)])), Some(Vec([Int(0), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0)])), Some(Vec([Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0)])), Some(Vec([Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0)])), Some(Vec([Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0)])), Some(Vec([Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0)])), Some(Vec([Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0)])), Some(Vec([Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0)])), Some(Vec([Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0)])), Some(Vec([Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0)]))]
indices are: [Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)])), Some(Vec([Int(2), Int(1), Int(0), Int(3)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(0), Int(0), Int(0)])), Some(Vec([Int(-25), Int(0), Int(0), Int(0)])), Some(Vec([Int(64), Int(0), Int(0), Int(0)])), Some(Vec([Int(14), Int(0), Int(0), Int(0)])), Some(Vec([Int(97), Int(0), Int(0), Int(0)])), Some(Vec([Int(13), Int(0), Int(0), Int(0)])), Some(Vec([Int(67), Int(0), Int(0), Int(0)])), Some(Vec([Int(-36), Int(0), Int(0), Int(0)])), Some(Vec([Int(-61), Int(0), Int(0), Int(0)])), Some(Vec([Int(-16), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Int(0), Int(0)]))]
shuffled is: [Some(Vec([Int(0), Int(0), Int(-57), Int(0)])), Some(Vec([Int(0), Int(0), Int(-25), Int(0)])), Some(Vec([Int(0), Int(0), Int(64), Int(0)])), Some(Vec([Int(0), Int(0), Int(14), Int(0)])), Some(Vec([Int(0), Int(0), Int(97), Int(0)])), Some(Vec([Int(0), Int(0), Int(13), Int(0)])), Some(Vec([Int(0), Int(0), Int(67), Int(0)])), Some(Vec([Int(0), Int(0), Int(-36), Int(0)])), Some(Vec([Int(0), Int(0), Int(-61), Int(0)])), Some(Vec([Int(0), Int(0), Int(-16), Int(0)])), Some(Vec([Int(0), Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0)])), Some(Vec([Int(0), Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0)])), Some(Vec([Int(0), Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0)])), Some(Vec([Int(0), Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0)])), Some(Vec([Int(0), Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0)])), Some(Vec([Int(0), Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0)])), Some(Vec([Int(0), Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0)])), Some(Vec([Int(0), Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0)])), Some(Vec([Int(0), Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0)])), Some(Vec([Int(0), Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0)]))]
vector, [Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)]))]
indices are: [Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(88)])), Some(Vec([Int(64), Int(-91), Int(98), Int(3)])), Some(Vec([Int(14), Int(83), Int(-29), Int(92)])), Some(Vec([Int(97), Int(89), Int(81), Int(93)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(-54)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(29)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(-59)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(39)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(65)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(-57), Int(-57), Int(69), Int(59)])), Some(Vec([Int(88), Int(-25), Int(-36), Int(-54)])), Some(Vec([Int(3), Int(64), Int(-91), Int(98)])), Some(Vec([Int(92), Int(14), Int(83), Int(-29)])), Some(Vec([Int(93), Int(97), Int(89), Int(81)])), Some(Vec([Int(-54), Int(13), Int(-74), Int(-38)])), Some(Vec([Int(29), Int(67), Int(-52), Int(-8)])), Some(Vec([Int(-59), Int(-36), Int(76), Int(-8)])), Some(Vec([Int(39), Int(-61), Int(22), Int(-77)])), Some(Vec([Int(65), Int(-16), Int(11), Int(-26)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)]))]
shuffle vec is: [Some(Vec([Int(59), Int(69), Int(-57), Int(-57)])), Some(Vec([Int(-54), Int(-36), Int(-25), Int(88)])), Some(Vec([Int(98), Int(-91), Int(64), Int(3)])), Some(Vec([Int(-29), Int(83), Int(14), Int(92)])), Some(Vec([Int(81), Int(89), Int(97), Int(93)])), Some(Vec([Int(-38), Int(-74), Int(13), Int(-54)])), Some(Vec([Int(-8), Int(-52), Int(67), Int(29)])), Some(Vec([Int(-8), Int(76), Int(-36), Int(-59)])), Some(Vec([Int(-77), Int(22), Int(-61), Int(39)])), Some(Vec([Int(-26), Int(11), Int(-16), Int(65)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(-57), Int(59), Int(69), Int(-57)])), Some(Vec([Int(88), Int(-54), Int(-36), Int(-25)])), Some(Vec([Int(3), Int(98), Int(-91), Int(64)])), Some(Vec([Int(92), Int(-29), Int(83), Int(14)])), Some(Vec([Int(93), Int(81), Int(89), Int(97)])), Some(Vec([Int(-54), Int(-38), Int(-74), Int(13)])), Some(Vec([Int(29), Int(-8), Int(-52), Int(67)])), Some(Vec([Int(-59), Int(-8), Int(76), Int(-36)])), Some(Vec([Int(39), Int(-77), Int(22), Int(-61)])), Some(Vec([Int(65), Int(-26), Int(11), Int(-16)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(-57), Int(59), Int(69)])), Some(Vec([Int(-25), Int(88), Int(-54), Int(-36)])), Some(Vec([Int(64), Int(3), Int(98), Int(-91)])), Some(Vec([Int(14), Int(92), Int(-29), Int(83)])), Some(Vec([Int(97), Int(93), Int(81), Int(89)])), Some(Vec([Int(13), Int(-54), Int(-38), Int(-74)])), Some(Vec([Int(67), Int(29), Int(-8), Int(-52)])), Some(Vec([Int(-36), Int(-59), Int(-8), Int(76)])), Some(Vec([Int(-61), Int(39), Int(-77), Int(22)])), Some(Vec([Int(-16), Int(65), Int(-26), Int(11)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
shuffled is: [Some(Vec([Int(69), Int(-57), Int(-57), Int(59)])), Some(Vec([Int(-36), Int(-25), Int(88), Int(-54)])), Some(Vec([Int(-91), Int(64), Int(3), Int(98)])), Some(Vec([Int(83), Int(14), Int(92), Int(-29)])), Some(Vec([Int(89), Int(97), Int(93), Int(81)])), Some(Vec([Int(-74), Int(13), Int(-54), Int(-38)])), Some(Vec([Int(-52), Int(67), Int(29), Int(-8)])), Some(Vec([Int(76), Int(-36), Int(-59), Int(-8)])), Some(Vec([Int(22), Int(-61), Int(39), Int(-77)])), Some(Vec([Int(11), Int(-16), Int(65), Int(-26)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)]))]
shuffle vec is: [Some(Vec([Int(69), Int(-57), Int(59), Int(-57)])), Some(Vec([Int(-36), Int(-25), Int(-54), Int(88)])), Some(Vec([Int(-91), Int(64), Int(98), Int(3)])), Some(Vec([Int(83), Int(14), Int(-29), Int(92)])), Some(Vec([Int(89), Int(97), Int(81), Int(93)])), Some(Vec([Int(-74), Int(13), Int(-38), Int(-54)])), Some(Vec([Int(-52), Int(67), Int(-8), Int(29)])), Some(Vec([Int(76), Int(-36), Int(-8), Int(-59)])), Some(Vec([Int(22), Int(-61), Int(-77), Int(39)])), Some(Vec([Int(11), Int(-16), Int(-26), Int(65)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(-57), Int(69), Int(-57), Int(59)])), Some(Vec([Int(88), Int(-36), Int(-25), Int(-54)])), Some(Vec([Int(3), Int(-91), Int(64), Int(98)])), Some(Vec([Int(92), Int(83), Int(14), Int(-29)])), Some(Vec([Int(93), Int(89), Int(97), Int(81)])), Some(Vec([Int(-54), Int(-74), Int(13), Int(-38)])), Some(Vec([Int(29), Int(-52), Int(67), Int(-8)])), Some(Vec([Int(-59), Int(76), Int(-36), Int(-8)])), Some(Vec([Int(39), Int(22), Int(-61), Int(-77)])), Some(Vec([Int(65), Int(11), Int(-16), Int(-26)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(-57), Int(59)])), Some(Vec([Int(-25), Int(-36), Int(88), Int(-54)])), Some(Vec([Int(64), Int(-91), Int(3), Int(98)])), Some(Vec([Int(14), Int(83), Int(92), Int(-29)])), Some(Vec([Int(97), Int(89), Int(93), Int(81)])), Some(Vec([Int(13), Int(-74), Int(-54), Int(-38)])), Some(Vec([Int(67), Int(-52), Int(29), Int(-8)])), Some(Vec([Int(-36), Int(76), Int(-59), Int(-8)])), Some(Vec([Int(-61), Int(22), Int(39), Int(-77)])), Some(Vec([Int(-16), Int(11), Int(65), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(59), Int(-57), Int(69), Int(-57)])), Some(Vec([Int(-54), Int(-25), Int(-36), Int(88)])), Some(Vec([Int(98), Int(64), Int(-91), Int(3)])), Some(Vec([Int(-29), Int(14), Int(83), Int(92)])), Some(Vec([Int(81), Int(97), Int(89), Int(93)])), Some(Vec([Int(-38), Int(13), Int(-74), Int(-54)])), Some(Vec([Int(-8), Int(67), Int(-52), Int(29)])), Some(Vec([Int(-8), Int(-36), Int(76), Int(-59)])), Some(Vec([Int(-77), Int(-61), Int(22), Int(39)])), Some(Vec([Int(-26), Int(-16), Int(11), Int(65)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
indices are: [Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(88), Int(-36), Int(-54), Int(-25)])), Some(Vec([Int(3), Int(-91), Int(98), Int(64)])), Some(Vec([Int(92), Int(83), Int(-29), Int(14)])), Some(Vec([Int(93), Int(89), Int(81), Int(97)])), Some(Vec([Int(-54), Int(-74), Int(-38), Int(13)])), Some(Vec([Int(29), Int(-52), Int(-8), Int(67)])), Some(Vec([Int(-59), Int(76), Int(-8), Int(-36)])), Some(Vec([Int(39), Int(22), Int(-77), Int(-61)])), Some(Vec([Int(65), Int(11), Int(-26), Int(-16)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
shuffled is: [Some(Vec([Int(-57), Int(-57), Int(69), Int(59)])), Some(Vec([Int(-25), Int(88), Int(-36), Int(-54)])), Some(Vec([Int(64), Int(3), Int(-91), Int(98)])), Some(Vec([Int(14), Int(92), Int(83), Int(-29)])), Some(Vec([Int(97), Int(93), Int(89), Int(81)])), Some(Vec([Int(13), Int(-54), Int(-74), Int(-38)])), Some(Vec([Int(67), Int(29), Int(-52), Int(-8)])), Some(Vec([Int(-36), Int(-59), Int(76), Int(-8)])), Some(Vec([Int(-61), Int(39), Int(22), Int(-77)])), Some(Vec([Int(-16), Int(65), Int(11), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(-57), Int(69), Int(59)])), Some(Vec([Int(88), Int(-25), Int(-36), Int(-54)])), Some(Vec([Int(3), Int(64), Int(-91), Int(98)])), Some(Vec([Int(92), Int(14), Int(83), Int(-29)])), Some(Vec([Int(93), Int(97), Int(89), Int(81)])), Some(Vec([Int(-54), Int(13), Int(-74), Int(-38)])), Some(Vec([Int(29), Int(67), Int(-52), Int(-8)])), Some(Vec([Int(-59), Int(-36), Int(76), Int(-8)])), Some(Vec([Int(39), Int(-61), Int(22), Int(-77)])), Some(Vec([Int(65), Int(-16), Int(11), Int(-26)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(59), Int(-57), Int(-57), Int(69)])), Some(Vec([Int(-54), Int(88), Int(-25), Int(-36)])), Some(Vec([Int(98), Int(3), Int(64), Int(-91)])), Some(Vec([Int(-29), Int(92), Int(14), Int(83)])), Some(Vec([Int(81), Int(93), Int(97), Int(89)])), Some(Vec([Int(-38), Int(-54), Int(13), Int(-74)])), Some(Vec([Int(-8), Int(29), Int(67), Int(-52)])), Some(Vec([Int(-8), Int(-59), Int(-36), Int(76)])), Some(Vec([Int(-77), Int(39), Int(-61), Int(22)])), Some(Vec([Int(-26), Int(65), Int(-16), Int(11)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
indices are: [Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(0)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(0)])), Some(Vec([Int(64), Int(-91), Int(98), Int(0)])), Some(Vec([Int(14), Int(83), Int(-29), Int(0)])), Some(Vec([Int(97), Int(89), Int(81), Int(0)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(0)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(0)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(0)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(0)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Int(0)]))]
shuffled is: [Some(Vec([Int(0), Int(-57), Int(69), Int(59)])), Some(Vec([Int(0), Int(-25), Int(-36), Int(-54)])), Some(Vec([Int(0), Int(64), Int(-91), Int(98)])), Some(Vec([Int(0), Int(14), Int(83), Int(-29)])), Some(Vec([Int(0), Int(97), Int(89), Int(81)])), Some(Vec([Int(0), Int(13), Int(-74), Int(-38)])), Some(Vec([Int(0), Int(67), Int(-52), Int(-8)])), Some(Vec([Int(0), Int(-36), Int(76), Int(-8)])), Some(Vec([Int(0), Int(-61), Int(22), Int(-77)])), Some(Vec([Int(0), Int(-16), Int(11), Int(-26)])), Some(Vec([Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(0), Int(59)])), Some(Vec([Int(-25), Int(-36), Int(0), Int(-54)])), Some(Vec([Int(64), Int(-91), Int(0), Int(98)])), Some(Vec([Int(14), Int(83), Int(0), Int(-29)])), Some(Vec([Int(97), Int(89), Int(0), Int(81)])), Some(Vec([Int(13), Int(-74), Int(0), Int(-38)])), Some(Vec([Int(67), Int(-52), Int(0), Int(-8)])), Some(Vec([Int(-36), Int(76), Int(0), Int(-8)])), Some(Vec([Int(-61), Int(22), Int(0), Int(-77)])), Some(Vec([Int(-16), Int(11), Int(0), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(59), Int(-57), Int(69), Int(0)])), Some(Vec([Int(-54), Int(-25), Int(-36), Int(0)])), Some(Vec([Int(98), Int(64), Int(-91), Int(0)])), Some(Vec([Int(-29), Int(14), Int(83), Int(0)])), Some(Vec([Int(81), Int(97), Int(89), Int(0)])), Some(Vec([Int(-38), Int(13), Int(-74), Int(0)])), Some(Vec([Int(-8), Int(67), Int(-52), Int(0)])), Some(Vec([Int(-8), Int(-36), Int(76), Int(0)])), Some(Vec([Int(-77), Int(-61), Int(22), Int(0)])), Some(Vec([Int(-26), Int(-16), Int(11), Int(0)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0)])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0)])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0)])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0)])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0)])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0)])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0)])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0)])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0)])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0)]))]
indices are: [Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(0), Int(69), Int(59)])), Some(Vec([Int(-25), Int(0), Int(-36), Int(-54)])), Some(Vec([Int(64), Int(0), Int(-91), Int(98)])), Some(Vec([Int(14), Int(0), Int(83), Int(-29)])), Some(Vec([Int(97), Int(0), Int(89), Int(81)])), Some(Vec([Int(13), Int(0), Int(-74), Int(-38)])), Some(Vec([Int(67), Int(0), Int(-52), Int(-8)])), Some(Vec([Int(-36), Int(0), Int(76), Int(-8)])), Some(Vec([Int(-61), Int(0), Int(22), Int(-77)])), Some(Vec([Int(-16), Int(0), Int(11), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(59), Int(-57), Int(0), Int(69)])), Some(Vec([Int(-54), Int(-25), Int(0), Int(-36)])), Some(Vec([Int(98), Int(64), Int(0), Int(-91)])), Some(Vec([Int(-29), Int(14), Int(0), Int(83)])), Some(Vec([Int(81), Int(97), Int(0), Int(89)])), Some(Vec([Int(-38), Int(13), Int(0), Int(-74)])), Some(Vec([Int(-8), Int(67), Int(0), Int(-52)])), Some(Vec([Int(-8), Int(-36), Int(0), Int(76)])), Some(Vec([Int(-77), Int(-61), Int(0), Int(22)])), Some(Vec([Int(-26), Int(-16), Int(0), Int(11)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
indices are: [Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)]))]
shuffle vec is: [Some(Vec([Int(0), Int(-57), Int(69), Int(59)])), Some(Vec([Int(0), Int(-25), Int(-36), Int(-54)])), Some(Vec([Int(0), Int(64), Int(-91), Int(98)])), Some(Vec([Int(0), Int(14), Int(83), Int(-29)])), Some(Vec([Int(0), Int(97), Int(89), Int(81)])), Some(Vec([Int(0), Int(13), Int(-74), Int(-38)])), Some(Vec([Int(0), Int(67), Int(-52), Int(-8)])), Some(Vec([Int(0), Int(-36), Int(76), Int(-8)])), Some(Vec([Int(0), Int(-61), Int(22), Int(-77)])), Some(Vec([Int(0), Int(-16), Int(11), Int(-26)])), Some(Vec([Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(59), Int(0), Int(-57), Int(69)])), Some(Vec([Int(-54), Int(0), Int(-25), Int(-36)])), Some(Vec([Int(98), Int(0), Int(64), Int(-91)])), Some(Vec([Int(-29), Int(0), Int(14), Int(83)])), Some(Vec([Int(81), Int(0), Int(97), Int(89)])), Some(Vec([Int(-38), Int(0), Int(13), Int(-74)])), Some(Vec([Int(-8), Int(0), Int(67), Int(-52)])), Some(Vec([Int(-8), Int(0), Int(-36), Int(76)])), Some(Vec([Int(-77), Int(0), Int(-61), Int(22)])), Some(Vec([Int(-26), Int(0), Int(-16), Int(11)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
indices are: [Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)]))]
shuffle vec is: [Some(Vec([Int(0), Int(0), Int(-57), Int(69)])), Some(Vec([Int(0), Int(0), Int(-25), Int(-36)])), Some(Vec([Int(0), Int(0), Int(64), Int(-91)])), Some(Vec([Int(0), Int(0), Int(14), Int(83)])), Some(Vec([Int(0), Int(0), Int(97), Int(89)])), Some(Vec([Int(0), Int(0), Int(13), Int(-74)])), Some(Vec([Int(0), Int(0), Int(67), Int(-52)])), Some(Vec([Int(0), Int(0), Int(-36), Int(76)])), Some(Vec([Int(0), Int(0), Int(-61), Int(22)])), Some(Vec([Int(0), Int(0), Int(-16), Int(11)])), Some(Vec([Int(0), Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Int(0), Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Int(0), Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Int(0), Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Int(0), Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Int(0), Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Int(0), Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Int(0), Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Int(0), Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Int(0), Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
shuffled is: [Some(Vec([Int(69), Int(0), Int(0), Int(-57)])), Some(Vec([Int(-36), Int(0), Int(0), Int(-25)])), Some(Vec([Int(-91), Int(0), Int(0), Int(64)])), Some(Vec([Int(83), Int(0), Int(0), Int(14)])), Some(Vec([Int(89), Int(0), Int(0), Int(97)])), Some(Vec([Int(-74), Int(0), Int(0), Int(13)])), Some(Vec([Int(-52), Int(0), Int(0), Int(67)])), Some(Vec([Int(76), Int(0), Int(0), Int(-36)])), Some(Vec([Int(22), Int(0), Int(0), Int(-61)])), Some(Vec([Int(11), Int(0), Int(0), Int(-16)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(0), Int(0)])), Some(Vec([Int(-25), Int(-36), Int(0), Int(0)])), Some(Vec([Int(64), Int(-91), Int(0), Int(0)])), Some(Vec([Int(14), Int(83), Int(0), Int(0)])), Some(Vec([Int(97), Int(89), Int(0), Int(0)])), Some(Vec([Int(13), Int(-74), Int(0), Int(0)])), Some(Vec([Int(67), Int(-52), Int(0), Int(0)])), Some(Vec([Int(-36), Int(76), Int(0), Int(0)])), Some(Vec([Int(-61), Int(22), Int(0), Int(0)])), Some(Vec([Int(-16), Int(11), Int(0), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Int(0)]))]
shuffled is: [Some(Vec([Int(0), Int(-57), Int(69), Int(0)])), Some(Vec([Int(0), Int(-25), Int(-36), Int(0)])), Some(Vec([Int(0), Int(64), Int(-91), Int(0)])), Some(Vec([Int(0), Int(14), Int(83), Int(0)])), Some(Vec([Int(0), Int(97), Int(89), Int(0)])), Some(Vec([Int(0), Int(13), Int(-74), Int(0)])), Some(Vec([Int(0), Int(67), Int(-52), Int(0)])), Some(Vec([Int(0), Int(-36), Int(76), Int(0)])), Some(Vec([Int(0), Int(-61), Int(22), Int(0)])), Some(Vec([Int(0), Int(-16), Int(11), Int(0)])), Some(Vec([Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0)])), Some(Vec([Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0)])), Some(Vec([Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0)])), Some(Vec([Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0)])), Some(Vec([Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0)])), Some(Vec([Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0)])), Some(Vec([Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0)])), Some(Vec([Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0)])), Some(Vec([Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0)])), Some(Vec([Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0)]))]
indices are: [Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)])), Some(Vec([Int(3), Int(0), Int(1), Int(2)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(0), Int(0), Int(0)])), Some(Vec([Int(-25), Int(0), Int(0), Int(0)])), Some(Vec([Int(64), Int(0), Int(0), Int(0)])), Some(Vec([Int(14), Int(0), Int(0), Int(0)])), Some(Vec([Int(97), Int(0), Int(0), Int(0)])), Some(Vec([Int(13), Int(0), Int(0), Int(0)])), Some(Vec([Int(67), Int(0), Int(0), Int(0)])), Some(Vec([Int(-36), Int(0), Int(0), Int(0)])), Some(Vec([Int(-61), Int(0), Int(0), Int(0)])), Some(Vec([Int(-16), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Int(0), Int(0)]))]
shuffled is: [Some(Vec([Int(0), Int(-57), Int(0), Int(0)])), Some(Vec([Int(0), Int(-25), Int(0), Int(0)])), Some(Vec([Int(0), Int(64), Int(0), Int(0)])), Some(Vec([Int(0), Int(14), Int(0), Int(0)])), Some(Vec([Int(0), Int(97), Int(0), Int(0)])), Some(Vec([Int(0), Int(13), Int(0), Int(0)])), Some(Vec([Int(0), Int(67), Int(0), Int(0)])), Some(Vec([Int(0), Int(-36), Int(0), Int(0)])), Some(Vec([Int(0), Int(-61), Int(0), Int(0)])), Some(Vec([Int(0), Int(-16), Int(0), Int(0)])), Some(Vec([Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Int(0)])), Some(Vec([Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Int(0)])), Some(Vec([Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Int(0)])), Some(Vec([Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Int(0)])), Some(Vec([Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Int(0)])), Some(Vec([Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Int(0)])), Some(Vec([Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Int(0)])), Some(Vec([Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Int(0)])), Some(Vec([Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Int(0)])), Some(Vec([Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Int(0)]))]
vector, [Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)]))]
indices are: [Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(88)])), Some(Vec([Int(64), Int(-91), Int(98), Int(3)])), Some(Vec([Int(14), Int(83), Int(-29), Int(92)])), Some(Vec([Int(97), Int(89), Int(81), Int(93)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(-54)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(29)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(-59)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(39)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(65)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(69), Int(59), Int(-57), Int(-57)])), Some(Vec([Int(-36), Int(-54), Int(88), Int(-25)])), Some(Vec([Int(-91), Int(98), Int(3), Int(64)])), Some(Vec([Int(83), Int(-29), Int(92), Int(14)])), Some(Vec([Int(89), Int(81), Int(93), Int(97)])), Some(Vec([Int(-74), Int(-38), Int(-54), Int(13)])), Some(Vec([Int(-52), Int(-8), Int(29), Int(67)])), Some(Vec([Int(76), Int(-8), Int(-59), Int(-36)])), Some(Vec([Int(22), Int(-77), Int(39), Int(-61)])), Some(Vec([Int(11), Int(-26), Int(65), Int(-16)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)]))]
shuffle vec is: [Some(Vec([Int(59), Int(69), Int(-57), Int(-57)])), Some(Vec([Int(-54), Int(-36), Int(-25), Int(88)])), Some(Vec([Int(98), Int(-91), Int(64), Int(3)])), Some(Vec([Int(-29), Int(83), Int(14), Int(92)])), Some(Vec([Int(81), Int(89), Int(97), Int(93)])), Some(Vec([Int(-38), Int(-74), Int(13), Int(-54)])), Some(Vec([Int(-8), Int(-52), Int(67), Int(29)])), Some(Vec([Int(-8), Int(76), Int(-36), Int(-59)])), Some(Vec([Int(-77), Int(22), Int(-61), Int(39)])), Some(Vec([Int(-26), Int(11), Int(-16), Int(65)])), Some(Vec([Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(69), Int(-57), Int(-57), Int(59)])), Some(Vec([Int(-36), Int(-25), Int(88), Int(-54)])), Some(Vec([Int(-91), Int(64), Int(3), Int(98)])), Some(Vec([Int(83), Int(14), Int(92), Int(-29)])), Some(Vec([Int(89), Int(97), Int(93), Int(81)])), Some(Vec([Int(-74), Int(13), Int(-54), Int(-38)])), Some(Vec([Int(-52), Int(67), Int(29), Int(-8)])), Some(Vec([Int(76), Int(-36), Int(-59), Int(-8)])), Some(Vec([Int(22), Int(-61), Int(39), Int(-77)])), Some(Vec([Int(11), Int(-16), Int(65), Int(-26)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
indices are: [Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(-57), Int(59), Int(69)])), Some(Vec([Int(-25), Int(88), Int(-54), Int(-36)])), Some(Vec([Int(64), Int(3), Int(98), Int(-91)])), Some(Vec([Int(14), Int(92), Int(-29), Int(83)])), Some(Vec([Int(97), Int(93), Int(81), Int(89)])), Some(Vec([Int(13), Int(-54), Int(-38), Int(-74)])), Some(Vec([Int(67), Int(29), Int(-8), Int(-52)])), Some(Vec([Int(-36), Int(-59), Int(-8), Int(76)])), Some(Vec([Int(-61), Int(39), Int(-77), Int(22)])), Some(Vec([Int(-16), Int(65), Int(-26), Int(11)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
shuffled is: [Some(Vec([Int(-57), Int(59), Int(69), Int(-57)])), Some(Vec([Int(88), Int(-54), Int(-36), Int(-25)])), Some(Vec([Int(3), Int(98), Int(-91), Int(64)])), Some(Vec([Int(92), Int(-29), Int(83), Int(14)])), Some(Vec([Int(93), Int(81), Int(89), Int(97)])), Some(Vec([Int(-54), Int(-38), Int(-74), Int(13)])), Some(Vec([Int(29), Int(-8), Int(-52), Int(67)])), Some(Vec([Int(-59), Int(-8), Int(76), Int(-36)])), Some(Vec([Int(39), Int(-77), Int(22), Int(-61)])), Some(Vec([Int(65), Int(-26), Int(11), Int(-16)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)]))]
shuffle vec is: [Some(Vec([Int(69), Int(-57), Int(59), Int(-57)])), Some(Vec([Int(-36), Int(-25), Int(-54), Int(88)])), Some(Vec([Int(-91), Int(64), Int(98), Int(3)])), Some(Vec([Int(83), Int(14), Int(-29), Int(92)])), Some(Vec([Int(89), Int(97), Int(81), Int(93)])), Some(Vec([Int(-74), Int(13), Int(-38), Int(-54)])), Some(Vec([Int(-52), Int(67), Int(-8), Int(29)])), Some(Vec([Int(76), Int(-36), Int(-8), Int(-59)])), Some(Vec([Int(22), Int(-61), Int(-77), Int(39)])), Some(Vec([Int(11), Int(-16), Int(-26), Int(65)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
shuffled is: [Some(Vec([Int(-57), Int(59), Int(-57), Int(69)])), Some(Vec([Int(-25), Int(-54), Int(88), Int(-36)])), Some(Vec([Int(64), Int(98), Int(3), Int(-91)])), Some(Vec([Int(14), Int(-29), Int(92), Int(83)])), Some(Vec([Int(97), Int(81), Int(93), Int(89)])), Some(Vec([Int(13), Int(-38), Int(-54), Int(-74)])), Some(Vec([Int(67), Int(-8), Int(29), Int(-52)])), Some(Vec([Int(-36), Int(-8), Int(-59), Int(76)])), Some(Vec([Int(-61), Int(-77), Int(39), Int(22)])), Some(Vec([Int(-16), Int(-26), Int(65), Int(11)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
indices are: [Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(-57), Int(59)])), Some(Vec([Int(-25), Int(-36), Int(88), Int(-54)])), Some(Vec([Int(64), Int(-91), Int(3), Int(98)])), Some(Vec([Int(14), Int(83), Int(92), Int(-29)])), Some(Vec([Int(97), Int(89), Int(93), Int(81)])), Some(Vec([Int(13), Int(-74), Int(-54), Int(-38)])), Some(Vec([Int(67), Int(-52), Int(29), Int(-8)])), Some(Vec([Int(-36), Int(76), Int(-59), Int(-8)])), Some(Vec([Int(-61), Int(22), Int(39), Int(-77)])), Some(Vec([Int(-16), Int(11), Int(65), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(69), Int(-57), Int(59), Int(-57)])), Some(Vec([Int(-36), Int(88), Int(-54), Int(-25)])), Some(Vec([Int(-91), Int(3), Int(98), Int(64)])), Some(Vec([Int(83), Int(92), Int(-29), Int(14)])), Some(Vec([Int(89), Int(93), Int(81), Int(97)])), Some(Vec([Int(-74), Int(-54), Int(-38), Int(13)])), Some(Vec([Int(-52), Int(29), Int(-8), Int(67)])), Some(Vec([Int(76), Int(-59), Int(-8), Int(-36)])), Some(Vec([Int(22), Int(39), Int(-77), Int(-61)])), Some(Vec([Int(11), Int(65), Int(-26), Int(-16)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(88), Int(-36), Int(-54), Int(-25)])), Some(Vec([Int(3), Int(-91), Int(98), Int(64)])), Some(Vec([Int(92), Int(83), Int(-29), Int(14)])), Some(Vec([Int(93), Int(89), Int(81), Int(97)])), Some(Vec([Int(-54), Int(-74), Int(-38), Int(13)])), Some(Vec([Int(29), Int(-52), Int(-8), Int(67)])), Some(Vec([Int(-59), Int(76), Int(-8), Int(-36)])), Some(Vec([Int(39), Int(22), Int(-77), Int(-61)])), Some(Vec([Int(65), Int(11), Int(-26), Int(-16)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
shuffled is: [Some(Vec([Int(69), Int(59), Int(-57), Int(-57)])), Some(Vec([Int(-36), Int(-54), Int(-25), Int(88)])), Some(Vec([Int(-91), Int(98), Int(64), Int(3)])), Some(Vec([Int(83), Int(-29), Int(14), Int(92)])), Some(Vec([Int(89), Int(81), Int(97), Int(93)])), Some(Vec([Int(-74), Int(-38), Int(13), Int(-54)])), Some(Vec([Int(-52), Int(-8), Int(67), Int(29)])), Some(Vec([Int(76), Int(-8), Int(-36), Int(-59)])), Some(Vec([Int(22), Int(-77), Int(-61), Int(39)])), Some(Vec([Int(11), Int(-26), Int(-16), Int(65)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
indices are: [Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(-57), Int(69), Int(59)])), Some(Vec([Int(88), Int(-25), Int(-36), Int(-54)])), Some(Vec([Int(3), Int(64), Int(-91), Int(98)])), Some(Vec([Int(92), Int(14), Int(83), Int(-29)])), Some(Vec([Int(93), Int(97), Int(89), Int(81)])), Some(Vec([Int(-54), Int(13), Int(-74), Int(-38)])), Some(Vec([Int(29), Int(67), Int(-52), Int(-8)])), Some(Vec([Int(-59), Int(-36), Int(76), Int(-8)])), Some(Vec([Int(39), Int(-61), Int(22), Int(-77)])), Some(Vec([Int(65), Int(-16), Int(11), Int(-26)])), Some(Vec([Vec([Int(-14), Int(-5), Int(-95), Int(29)]), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(84), Int(89), Int(38), Int(91)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(95), Int(-34), Int(23), Int(60)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(38), Int(60), Int(42), Int(-69)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(19), Int(32), Int(66), Int(-6)]), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(76), Int(64), Int(87), Int(-60)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-7), Int(-33), Int(14), Int(-91)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(40), Int(-19), Int(-6), Int(-89)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-45), Int(-67), Int(-59), Int(-44)]), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(54), Int(-63), Int(84), Int(66)]), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(-57), Int(69), Int(59), Int(-57)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(88)])), Some(Vec([Int(64), Int(-91), Int(98), Int(3)])), Some(Vec([Int(14), Int(83), Int(-29), Int(92)])), Some(Vec([Int(97), Int(89), Int(81), Int(93)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(-54)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(29)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(-59)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(39)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(65)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(-14), Int(-5), Int(-95), Int(29)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(84), Int(89), Int(38), Int(91)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(95), Int(-34), Int(23), Int(60)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(38), Int(60), Int(42), Int(-69)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(19), Int(32), Int(66), Int(-6)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(76), Int(64), Int(87), Int(-60)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-7), Int(-33), Int(14), Int(-91)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(40), Int(-19), Int(-6), Int(-89)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-45), Int(-67), Int(-59), Int(-44)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(54), Int(-63), Int(84), Int(66)])]))]
indices are: [Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(59), Int(0)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(0)])), Some(Vec([Int(64), Int(-91), Int(98), Int(0)])), Some(Vec([Int(14), Int(83), Int(-29), Int(0)])), Some(Vec([Int(97), Int(89), Int(81), Int(0)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(0)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(0)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(0)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(0)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Int(0)]))]
shuffled is: [Some(Vec([Int(69), Int(59), Int(0), Int(-57)])), Some(Vec([Int(-36), Int(-54), Int(0), Int(-25)])), Some(Vec([Int(-91), Int(98), Int(0), Int(64)])), Some(Vec([Int(83), Int(-29), Int(0), Int(14)])), Some(Vec([Int(89), Int(81), Int(0), Int(97)])), Some(Vec([Int(-74), Int(-38), Int(0), Int(13)])), Some(Vec([Int(-52), Int(-8), Int(0), Int(67)])), Some(Vec([Int(76), Int(-8), Int(0), Int(-36)])), Some(Vec([Int(22), Int(-77), Int(0), Int(-61)])), Some(Vec([Int(11), Int(-26), Int(0), Int(-16)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(0), Int(59)])), Some(Vec([Int(-25), Int(-36), Int(0), Int(-54)])), Some(Vec([Int(64), Int(-91), Int(0), Int(98)])), Some(Vec([Int(14), Int(83), Int(0), Int(-29)])), Some(Vec([Int(97), Int(89), Int(0), Int(81)])), Some(Vec([Int(13), Int(-74), Int(0), Int(-38)])), Some(Vec([Int(67), Int(-52), Int(0), Int(-8)])), Some(Vec([Int(-36), Int(76), Int(0), Int(-8)])), Some(Vec([Int(-61), Int(22), Int(0), Int(-77)])), Some(Vec([Int(-16), Int(11), Int(0), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(69), Int(0), Int(59), Int(-57)])), Some(Vec([Int(-36), Int(0), Int(-54), Int(-25)])), Some(Vec([Int(-91), Int(0), Int(98), Int(64)])), Some(Vec([Int(83), Int(0), Int(-29), Int(14)])), Some(Vec([Int(89), Int(0), Int(81), Int(97)])), Some(Vec([Int(-74), Int(0), Int(-38), Int(13)])), Some(Vec([Int(-52), Int(0), Int(-8), Int(67)])), Some(Vec([Int(76), Int(0), Int(-8), Int(-36)])), Some(Vec([Int(22), Int(0), Int(-77), Int(-61)])), Some(Vec([Int(11), Int(0), Int(-26), Int(-16)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(0), Int(69), Int(59)])), Some(Vec([Int(-25), Int(0), Int(-36), Int(-54)])), Some(Vec([Int(64), Int(0), Int(-91), Int(98)])), Some(Vec([Int(14), Int(0), Int(83), Int(-29)])), Some(Vec([Int(97), Int(0), Int(89), Int(81)])), Some(Vec([Int(13), Int(0), Int(-74), Int(-38)])), Some(Vec([Int(67), Int(0), Int(-52), Int(-8)])), Some(Vec([Int(-36), Int(0), Int(76), Int(-8)])), Some(Vec([Int(-61), Int(0), Int(22), Int(-77)])), Some(Vec([Int(-16), Int(0), Int(11), Int(-26)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(0), Int(69), Int(59), Int(-57)])), Some(Vec([Int(0), Int(-36), Int(-54), Int(-25)])), Some(Vec([Int(0), Int(-91), Int(98), Int(64)])), Some(Vec([Int(0), Int(83), Int(-29), Int(14)])), Some(Vec([Int(0), Int(89), Int(81), Int(97)])), Some(Vec([Int(0), Int(-74), Int(-38), Int(13)])), Some(Vec([Int(0), Int(-52), Int(-8), Int(67)])), Some(Vec([Int(0), Int(76), Int(-8), Int(-36)])), Some(Vec([Int(0), Int(22), Int(-77), Int(-61)])), Some(Vec([Int(0), Int(11), Int(-26), Int(-16)])), Some(Vec([Int(0), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Int(0), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Int(0), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Int(0), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Int(0), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Int(0), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Int(0), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Int(0), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Int(0), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Int(0), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)]))]
shuffle vec is: [Some(Vec([Int(0), Int(-57), Int(69), Int(59)])), Some(Vec([Int(0), Int(-25), Int(-36), Int(-54)])), Some(Vec([Int(0), Int(64), Int(-91), Int(98)])), Some(Vec([Int(0), Int(14), Int(83), Int(-29)])), Some(Vec([Int(0), Int(97), Int(89), Int(81)])), Some(Vec([Int(0), Int(13), Int(-74), Int(-38)])), Some(Vec([Int(0), Int(67), Int(-52), Int(-8)])), Some(Vec([Int(0), Int(-36), Int(76), Int(-8)])), Some(Vec([Int(0), Int(-61), Int(22), Int(-77)])), Some(Vec([Int(0), Int(-16), Int(11), Int(-26)])), Some(Vec([Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)])])), Some(Vec([Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)])])), Some(Vec([Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)])])), Some(Vec([Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)])])), Some(Vec([Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)])])), Some(Vec([Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)])])), Some(Vec([Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)])])), Some(Vec([Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)])])), Some(Vec([Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)])])), Some(Vec([Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)])]))]
shuffled is: [Some(Vec([Int(-57), Int(69), Int(59), Int(0)])), Some(Vec([Int(-25), Int(-36), Int(-54), Int(0)])), Some(Vec([Int(64), Int(-91), Int(98), Int(0)])), Some(Vec([Int(14), Int(83), Int(-29), Int(0)])), Some(Vec([Int(97), Int(89), Int(81), Int(0)])), Some(Vec([Int(13), Int(-74), Int(-38), Int(0)])), Some(Vec([Int(67), Int(-52), Int(-8), Int(0)])), Some(Vec([Int(-36), Int(76), Int(-8), Int(0)])), Some(Vec([Int(-61), Int(22), Int(-77), Int(0)])), Some(Vec([Int(-16), Int(11), Int(-26), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Vec([Int(6), Int(61), Int(-31), Int(36)]), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Vec([Int(84), Int(-54), Int(75), Int(44)]), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Vec([Int(-94), Int(-3), Int(-100), Int(82)]), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Vec([Int(93), Int(95), Int(-42), Int(46)]), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Vec([Int(81), Int(-60), Int(-67), Int(-42)]), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Vec([Int(24), Int(-2), Int(80), Int(-84)]), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Vec([Int(67), Int(14), Int(86), Int(-96)]), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Vec([Int(-51), Int(33), Int(95), Int(-33)]), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Vec([Int(-15), Int(-9), Int(26), Int(95)]), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Vec([Int(46), Int(-76), Int(65), Int(-33)]), Int(0)]))]
indices are: [Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)]))]
shuffle vec is: [Some(Vec([Int(0), Int(0), Int(-57), Int(69)])), Some(Vec([Int(0), Int(0), Int(-25), Int(-36)])), Some(Vec([Int(0), Int(0), Int(64), Int(-91)])), Some(Vec([Int(0), Int(0), Int(14), Int(83)])), Some(Vec([Int(0), Int(0), Int(97), Int(89)])), Some(Vec([Int(0), Int(0), Int(13), Int(-74)])), Some(Vec([Int(0), Int(0), Int(67), Int(-52)])), Some(Vec([Int(0), Int(0), Int(-36), Int(76)])), Some(Vec([Int(0), Int(0), Int(-61), Int(22)])), Some(Vec([Int(0), Int(0), Int(-16), Int(11)])), Some(Vec([Int(0), Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)])])), Some(Vec([Int(0), Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)])])), Some(Vec([Int(0), Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)])])), Some(Vec([Int(0), Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)])])), Some(Vec([Int(0), Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)])])), Some(Vec([Int(0), Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)])])), Some(Vec([Int(0), Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)])])), Some(Vec([Int(0), Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)])])), Some(Vec([Int(0), Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)])])), Some(Vec([Int(0), Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)])]))]
shuffled is: [Some(Vec([Int(0), Int(-57), Int(69), Int(0)])), Some(Vec([Int(0), Int(-25), Int(-36), Int(0)])), Some(Vec([Int(0), Int(64), Int(-91), Int(0)])), Some(Vec([Int(0), Int(14), Int(83), Int(0)])), Some(Vec([Int(0), Int(97), Int(89), Int(0)])), Some(Vec([Int(0), Int(13), Int(-74), Int(0)])), Some(Vec([Int(0), Int(67), Int(-52), Int(0)])), Some(Vec([Int(0), Int(-36), Int(76), Int(0)])), Some(Vec([Int(0), Int(-61), Int(22), Int(0)])), Some(Vec([Int(0), Int(-16), Int(11), Int(0)])), Some(Vec([Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0)])), Some(Vec([Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0)])), Some(Vec([Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0)])), Some(Vec([Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0)])), Some(Vec([Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0)])), Some(Vec([Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0)])), Some(Vec([Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0)])), Some(Vec([Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0)])), Some(Vec([Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0)])), Some(Vec([Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0)]))]
indices are: [Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(69), Int(0), Int(0)])), Some(Vec([Int(-25), Int(-36), Int(0), Int(0)])), Some(Vec([Int(64), Int(-91), Int(0), Int(0)])), Some(Vec([Int(14), Int(83), Int(0), Int(0)])), Some(Vec([Int(97), Int(89), Int(0), Int(0)])), Some(Vec([Int(13), Int(-74), Int(0), Int(0)])), Some(Vec([Int(67), Int(-52), Int(0), Int(0)])), Some(Vec([Int(-36), Int(76), Int(0), Int(0)])), Some(Vec([Int(-61), Int(22), Int(0), Int(0)])), Some(Vec([Int(-16), Int(11), Int(0), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Int(0)]))]
shuffled is: [Some(Vec([Int(69), Int(0), Int(0), Int(-57)])), Some(Vec([Int(-36), Int(0), Int(0), Int(-25)])), Some(Vec([Int(-91), Int(0), Int(0), Int(64)])), Some(Vec([Int(83), Int(0), Int(0), Int(14)])), Some(Vec([Int(89), Int(0), Int(0), Int(97)])), Some(Vec([Int(-74), Int(0), Int(0), Int(13)])), Some(Vec([Int(-52), Int(0), Int(0), Int(67)])), Some(Vec([Int(76), Int(0), Int(0), Int(-36)])), Some(Vec([Int(22), Int(0), Int(0), Int(-61)])), Some(Vec([Int(11), Int(0), Int(0), Int(-16)])), Some(Vec([Vec([Int(20), Int(74), Int(-32), Int(-35)]), Int(0), Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Vec([Int(36), Int(88), Int(78), Int(19)]), Int(0), Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Vec([Int(57), Int(22), Int(-37), Int(-43)]), Int(0), Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Vec([Int(-39), Int(90), Int(-35), Int(55)]), Int(0), Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Vec([Int(35), Int(74), Int(-52), Int(-3)]), Int(0), Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Vec([Int(45), Int(-36), Int(41), Int(71)]), Int(0), Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Vec([Int(-86), Int(-76), Int(92), Int(29)]), Int(0), Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Vec([Int(67), Int(70), Int(-48), Int(-52)]), Int(0), Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Vec([Int(0), Int(-100), Int(-67), Int(-90)]), Int(0), Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Vec([Int(89), Int(-79), Int(56), Int(-11)]), Int(0), Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
indices are: [Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)])), Some(Vec([Int(1), Int(2), Int(3), Int(0)]))]
shuffle vec is: [Some(Vec([Int(-57), Int(0), Int(0), Int(0)])), Some(Vec([Int(-25), Int(0), Int(0), Int(0)])), Some(Vec([Int(64), Int(0), Int(0), Int(0)])), Some(Vec([Int(14), Int(0), Int(0), Int(0)])), Some(Vec([Int(97), Int(0), Int(0), Int(0)])), Some(Vec([Int(13), Int(0), Int(0), Int(0)])), Some(Vec([Int(67), Int(0), Int(0), Int(0)])), Some(Vec([Int(-36), Int(0), Int(0), Int(0)])), Some(Vec([Int(-61), Int(0), Int(0), Int(0)])), Some(Vec([Int(-16), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(2), Int(-42), Int(-17), Int(26)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-54), Int(-11), Int(73), Int(-32)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(50), Int(-88), Int(-46), Int(-9)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-81), Int(-52), Int(-6), Int(17)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-49), Int(3), Int(38), Int(49)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-44), Int(-95), Int(-80), Int(-16)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-65), Int(-77), Int(-17), Int(42)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-55), Int(-8), Int(-90), Int(-44)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(-6), Int(28), Int(86), Int(29)]), Int(0), Int(0), Int(0)])), Some(Vec([Vec([Int(15), Int(94), Int(-18), Int(-15)]), Int(0), Int(0), Int(0)]))]
shuffled is: [Some(Vec([Int(0), Int(0), Int(0), Int(-57)])), Some(Vec([Int(0), Int(0), Int(0), Int(-25)])), Some(Vec([Int(0), Int(0), Int(0), Int(64)])), Some(Vec([Int(0), Int(0), Int(0), Int(14)])), Some(Vec([Int(0), Int(0), Int(0), Int(97)])), Some(Vec([Int(0), Int(0), Int(0), Int(13)])), Some(Vec([Int(0), Int(0), Int(0), Int(67)])), Some(Vec([Int(0), Int(0), Int(0), Int(-36)])), Some(Vec([Int(0), Int(0), Int(0), Int(-61)])), Some(Vec([Int(0), Int(0), Int(0), Int(-16)])), Some(Vec([Int(0), Int(0), Int(0), Vec([Int(2), Int(-42), Int(-17), Int(26)])])), Some(Vec([Int(0), Int(0), Int(0), Vec([Int(-54), Int(-11), Int(73), Int(-32)])])), Some(Vec([Int(0), Int(0), Int(0), Vec([Int(50), Int(-88), Int(-46), Int(-9)])])), Some(Vec([Int(0), Int(0), Int(0), Vec([Int(-81), Int(-52), Int(-6), Int(17)])])), Some(Vec([Int(0), Int(0), Int(0), Vec([Int(-49), Int(3), Int(38), Int(49)])])), Some(Vec([Int(0), Int(0), Int(0), Vec([Int(-44), Int(-95), Int(-80), Int(-16)])])), Some(Vec([Int(0), Int(0), Int(0), Vec([Int(-65), Int(-77), Int(-17), Int(42)])])), Some(Vec([Int(0), Int(0), Int(0), Vec([Int(-55), Int(-8), Int(-90), Int(-44)])])), Some(Vec([Int(0), Int(0), Int(0), Vec([Int(-6), Int(28), Int(86), Int(29)])])), Some(Vec([Int(0), Int(0), Int(0), Vec([Int(15), Int(94), Int(-18), Int(-15)])]))]
built egraph of current ruleset
starting fast cvec match with 142 eclasses
fast cvec match finished in 28 ms
number of candidates is 178
minimizing candidates
solving: "(Shfl\n  (Vec\n    c\n    d\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, d, c]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, d, c, a, 3, 2, 0]
solving: "(Vec\n  d\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, d]
at the end of adding vector: [a, b, c, d, d, c, b, a]
no
solving: "(Vec\n  d\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, d]
at the end of adding vector: [a, b, c, d, d, c, b, a]
solving: "(Shfl\n  (Vec\n    c\n    d\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, d, c]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, d, c, a, 3, 2, 0]
no
solving: "(Vec\n  d\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, d]
at the end of adding vector: [a, b, c, d, d, c, b, a]
solving: "(Shfl\n  (Vec\n    c\n    d\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, d, c]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, d, c, a, 3, 2, 0]
no
solving: "(Shfl\n  (Vec\n    a\n    d\n    c\n    b)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, b, c, d, a]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, b, c, d, a, b, 0, 3, 2]
solving: "(Vec\n  d\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, d]
at the end of adding vector: [a, b, c, d, d, c, b, a]
no
solving: "(Vec\n  d\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, d]
at the end of adding vector: [a, b, c, d, d, c, b, a]
solving: "(Shfl\n  (Vec\n    a\n    d\n    c\n    b)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, b, c, d, a]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, b, c, d, a, b, 0, 3, 2]
no
solving: "(Vec\n  d\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, d]
at the end of adding vector: [a, b, c, d, d, c, b, a]
solving: "(Shfl\n  (Vec\n    a\n    d\n    c\n    b)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, b, c, d, a]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, b, c, d, a, b, 0, 3, 2]
no
solving: "(Shfl\n  (Vec\n    d\n    a\n    b\n    c)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, b, a, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, b, a, d, c, 1, 2, 3]
solving: "(Vec\n  d\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, d]
at the end of adding vector: [a, b, c, d, d, c, b, a]
no
solving: "(Vec\n  d\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, d]
at the end of adding vector: [a, b, c, d, d, c, b, a]
solving: "(Shfl\n  (Vec\n    d\n    a\n    b\n    c)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, b, a, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, b, a, d, c, 1, 2, 3]
no
solving: "(Vec\n  d\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, d]
at the end of adding vector: [a, b, c, d, d, c, b, a]
solving: "(Shfl\n  (Vec\n    d\n    a\n    b\n    c)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, b, a, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, b, a, d, c, 1, 2, 3]
no
solving: "(Shfl\n  (Vec\n    b\n    c\n    d\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, d, c, b]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, d, c, b, a, 3, 0, 1]
solving: "(Vec\n  d\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, d]
at the end of adding vector: [a, b, c, d, d, c, b, a]
no
solving: "(Vec\n  d\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, d]
at the end of adding vector: [a, b, c, d, d, c, b, a]
solving: "(Shfl\n  (Vec\n    b\n    c\n    d\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, d, c, b]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, d, c, b, a, 3, 0, 1]
no
solving: "(Vec\n  d\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, d]
at the end of adding vector: [a, b, c, d, d, c, b, a]
solving: "(Shfl\n  (Vec\n    b\n    c\n    d\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, d, c, b]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, d, c, b, a, 3, 0, 1]
no
solving: "(Vec\n  c\n  d\n  b\n  a)"
at the beginning of adding vector: [a, b, d, c]
at the end of adding vector: [a, b, d, c, c, d, b, a]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d, a, 3, 2, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d, a, 3, 2, 0]
solving: "(Vec\n  c\n  d\n  b\n  a)"
at the beginning of adding vector: [a, b, d, c]
at the end of adding vector: [a, b, d, c, c, d, b, a]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d, a, 3, 2, 0]
solving: "(Vec\n  c\n  d\n  b\n  a)"
at the beginning of adding vector: [a, b, d, c]
at the end of adding vector: [a, b, d, c, c, d, b, a]
no
solving: "(Shfl\n  (Vec\n    c\n    b\n    a\n    d)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, d, a, b, c]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, d, a, b, c, d, 2, 1, 0]
solving: "(Vec\n  d\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, d]
at the end of adding vector: [a, b, c, d, d, c, b, a]
no
solving: "(Vec\n  d\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, d]
at the end of adding vector: [a, b, c, d, d, c, b, a]
solving: "(Shfl\n  (Vec\n    c\n    b\n    a\n    d)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, d, a, b, c]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, d, a, b, c, d, 2, 1, 0]
no
solving: "(Vec\n  d\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, d]
at the end of adding vector: [a, b, c, d, d, c, b, a]
solving: "(Shfl\n  (Vec\n    c\n    b\n    a\n    d)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, d, a, b, c]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, d, a, b, c, d, 2, 1, 0]
no
solving: "(Vec\n  d\n  c\n  a\n  b)"
at the beginning of adding vector: [b, a, c, d]
at the end of adding vector: [b, a, c, d, d, c, a, b]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
solving: "(Vec\n  d\n  c\n  a\n  b)"
at the beginning of adding vector: [b, a, c, d]
at the end of adding vector: [b, a, c, d, d, c, a, b]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
solving: "(Vec\n  d\n  c\n  a\n  b)"
at the beginning of adding vector: [b, a, c, d]
at the end of adding vector: [b, a, c, d, d, c, a, b]
no
solving: "(Shfl\n  (Vec\n    a\n    c\n    b\n    d)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, d, b, c, a]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, d, b, c, a, d, 0, 2, 1]
solving: "(Vec\n  d\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, d]
at the end of adding vector: [a, b, c, d, d, c, b, a]
no
solving: "(Vec\n  d\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, d]
at the end of adding vector: [a, b, c, d, d, c, b, a]
solving: "(Shfl\n  (Vec\n    a\n    c\n    b\n    d)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, d, b, c, a]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, d, b, c, a, d, 0, 2, 1]
no
solving: "(Vec\n  d\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, d]
at the end of adding vector: [a, b, c, d, d, c, b, a]
solving: "(Shfl\n  (Vec\n    a\n    c\n    b\n    d)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, d, b, c, a]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, d, b, c, a, d, 0, 2, 1]
no
solving: "(Vec\n  b\n  c\n  d\n  a)"
at the beginning of adding vector: [a, d, c, b]
at the end of adding vector: [a, d, c, b, b, c, d, a]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d, a, 3, 0, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d, a, 3, 0, 1]
solving: "(Vec\n  b\n  c\n  d\n  a)"
at the beginning of adding vector: [a, d, c, b]
at the end of adding vector: [a, d, c, b, b, c, d, a]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d, a, 3, 0, 1]
solving: "(Vec\n  b\n  c\n  d\n  a)"
at the beginning of adding vector: [a, d, c, b]
at the end of adding vector: [a, d, c, b, b, c, d, a]
no
solving: "(Shfl\n  (Vec\n    a\n    b\n    c\n    d)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, d, c, b, a]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, d, c, b, a, d, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d, a, 3, 0, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d, a, 3, 0, 1]
solving: "(Shfl\n  (Vec\n    a\n    b\n    c\n    d)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, d, c, b, a]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, d, c, b, a, d, 0, 3, 2]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d, a, 3, 0, 1]
solving: "(Shfl\n  (Vec\n    a\n    b\n    c\n    d)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, d, c, b, a]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, d, c, b, a, d, 0, 3, 2]
no
solving: "(Shfl\n  (Vec\n    b\n    a\n    d\n    c)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, d, a, b]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, d, a, b, c, 1, 2, 3]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d, a, 3, 0, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d, a, 3, 0, 1]
solving: "(Shfl\n  (Vec\n    b\n    a\n    d\n    c)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, d, a, b]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, d, a, b, c, 1, 2, 3]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d, a, 3, 0, 1]
solving: "(Shfl\n  (Vec\n    b\n    a\n    d\n    c)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, d, a, b]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, d, a, b, c, 1, 2, 3]
no
solving: "(Shfl\n  (Vec\n    b\n    d\n    c\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, c, d, b]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, c, d, b, a, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
solving: "(Shfl\n  (Vec\n    b\n    d\n    c\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, c, d, b]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, c, d, b, a, 0, 3, 2]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
solving: "(Shfl\n  (Vec\n    b\n    d\n    c\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, c, d, b]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, c, d, b, a, 0, 3, 2]
no
solving: "(Shfl\n  (Vec\n    d\n    b\n    a\n    c)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, a, b, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, a, b, d, c, 1, 2, 3]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
solving: "(Shfl\n  (Vec\n    d\n    b\n    a\n    c)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, a, b, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, a, b, d, c, 1, 2, 3]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
solving: "(Shfl\n  (Vec\n    d\n    b\n    a\n    c)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, a, b, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, a, b, d, c, 1, 2, 3]
no
solving: "(Shfl\n  (Vec\n    d\n    a\n    c\n    b)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, b, c, a, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, b, c, a, d, b, 3, 2, 0]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d, a, 2, 1, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d, a, 2, 1, 0]
solving: "(Shfl\n  (Vec\n    d\n    a\n    c\n    b)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, b, c, a, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, b, c, a, d, b, 3, 2, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d, a, 2, 1, 0]
solving: "(Shfl\n  (Vec\n    d\n    a\n    c\n    b)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, b, c, a, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, b, c, a, d, b, 3, 2, 0]
no
solving: "(Shfl\n  (Vec\n    c\n    d\n    a\n    b)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, b, a, d, c]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, b, a, d, c, b, 3, 2, 0]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
solving: "(Shfl\n  (Vec\n    c\n    d\n    a\n    b)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, b, a, d, c]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, b, a, d, c, b, 3, 2, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
solving: "(Shfl\n  (Vec\n    c\n    d\n    a\n    b)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, b, a, d, c]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, b, a, d, c, b, 3, 2, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    a\n    c\n    b)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, b, c, a, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, b, c, a, d, b, 1, 2, 3]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, d]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, d, a, 3, 1, 2]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, d]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, d, a, 3, 1, 2]
solving: "(Shfl\n  (Vec\n    d\n    a\n    c\n    b)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, b, c, a, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, b, c, a, d, b, 1, 2, 3]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, d]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, d, a, 3, 1, 2]
solving: "(Shfl\n  (Vec\n    d\n    a\n    c\n    b)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, b, c, a, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, b, c, a, d, b, 1, 2, 3]
no
solving: "(Shfl\n  (Vec\n    c\n    d\n    a\n    b)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, b, a, d, c]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, b, a, d, c, b, 1, 2, 3]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d, a, 0, 3, 2]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d, a, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    c\n    d\n    a\n    b)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, b, a, d, c]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, b, a, d, c, b, 1, 2, 3]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d, a, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    c\n    d\n    a\n    b)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, b, a, d, c]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, b, a, d, c, b, 1, 2, 3]
no
solving: "(Shfl\n  (Vec\n    c\n    a\n    b\n    d)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, d, b, a, c]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, d, b, a, c, d, 3, 1, 2]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d, a, 0, 3, 2]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d, a, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    c\n    a\n    b\n    d)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, d, b, a, c]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, d, b, a, c, d, 3, 1, 2]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d, a, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    c\n    a\n    b\n    d)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, d, b, a, c]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, d, b, a, c, d, 3, 1, 2]
no
solving: "(Shfl\n  (Vec\n    b\n    a\n    d\n    c)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, c, d, a, b]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, c, d, a, b, c, 3, 0, 1]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d, a, 1, 2, 3]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d, a, 1, 2, 3]
solving: "(Shfl\n  (Vec\n    b\n    a\n    d\n    c)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, c, d, a, b]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, c, d, a, b, c, 3, 0, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d, a, 1, 2, 3]
solving: "(Shfl\n  (Vec\n    b\n    a\n    d\n    c)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, c, d, a, b]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, c, d, a, b, c, 3, 0, 1]
no
solving: "(Shfl\n  (Vec\n    a\n    c\n    d\n    b)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, b, d, c, a]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, b, d, c, a, b, 2, 3, 1]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d, a, 0, 2, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d, a, 0, 2, 1]
solving: "(Shfl\n  (Vec\n    a\n    c\n    d\n    b)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, b, d, c, a]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, b, d, c, a, b, 2, 3, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d, a, 0, 2, 1]
solving: "(Shfl\n  (Vec\n    a\n    c\n    d\n    b)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, b, d, c, a]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, b, d, c, a, b, 2, 3, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    a\n    c\n    b)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, b, c, a, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, b, c, a, d, b, 2, 3, 1]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d, a, 1, 2, 3]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d, a, 1, 2, 3]
solving: "(Shfl\n  (Vec\n    d\n    a\n    c\n    b)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, b, c, a, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, b, c, a, d, b, 2, 3, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d, a, 1, 2, 3]
solving: "(Shfl\n  (Vec\n    d\n    a\n    c\n    b)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, b, c, a, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, b, c, a, d, b, 2, 3, 1]
no
solving: "(Shfl\n  (Vec\n    c\n    a\n    b\n    d)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, d, b, a, c]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, d, b, a, c, d, 0, 2, 1]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d, a, 1, 2, 3]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d, a, 1, 2, 3]
solving: "(Shfl\n  (Vec\n    c\n    a\n    b\n    d)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, d, b, a, c]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, d, b, a, c, d, 0, 2, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d, a, 1, 2, 3]
solving: "(Shfl\n  (Vec\n    c\n    a\n    b\n    d)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, d, b, a, c]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, d, b, a, c, d, 0, 2, 1]
no
solving: "(Shfl\n  (Vec\n    a\n    d\n    b\n    c)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, c, b, d, a]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, c, b, d, a, c, 0, 2, 1]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d, a, 3, 2, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d, a, 3, 2, 0]
solving: "(Shfl\n  (Vec\n    a\n    d\n    b\n    c)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, c, b, d, a]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, c, b, d, a, c, 0, 2, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d, a, 3, 2, 0]
solving: "(Shfl\n  (Vec\n    a\n    d\n    b\n    c)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, c, b, d, a]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, c, b, d, a, c, 0, 2, 1]
no
solving: "(Shfl\n  (Vec\n    c\n    a\n    b\n    d)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, d, b, a, c]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, d, b, a, c, d, 1, 2, 3]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d, a, 3, 2, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d, a, 3, 2, 0]
solving: "(Shfl\n  (Vec\n    c\n    a\n    b\n    d)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, d, b, a, c]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, d, b, a, c, d, 1, 2, 3]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d, a, 3, 2, 0]
solving: "(Shfl\n  (Vec\n    c\n    a\n    b\n    d)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, d, b, a, c]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, d, b, a, c, d, 1, 2, 3]
no
solving: "(Shfl\n  (Vec\n    b\n    c\n    a\n    d)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, d, a, c, b]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, d, a, c, b, d, 3, 0, 1]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d, a, 0, 2, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d, a, 0, 2, 1]
solving: "(Shfl\n  (Vec\n    b\n    c\n    a\n    d)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, d, a, c, b]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, d, a, c, b, d, 3, 0, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d, a, 0, 2, 1]
solving: "(Shfl\n  (Vec\n    b\n    c\n    a\n    d)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, d, a, c, b]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, d, a, c, b, d, 3, 0, 1]
no
solving: "(Shfl\n  (Vec\n    c\n    d\n    a\n    b)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, b, a, d, c]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, b, a, d, c, b, 3, 0, 1]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d, a, 2, 1, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d, a, 2, 1, 0]
solving: "(Shfl\n  (Vec\n    c\n    d\n    a\n    b)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, b, a, d, c]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, b, a, d, c, b, 3, 0, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d, a, 2, 1, 0]
solving: "(Shfl\n  (Vec\n    c\n    d\n    a\n    b)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, b, a, d, c]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, b, a, d, c, b, 3, 0, 1]
no
solving: "(Shfl\n  (Vec\n    b\n    d\n    c\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, c, d, b]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, c, d, b, a, 0, 2, 1]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d, a, 2, 1, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d, a, 2, 1, 0]
solving: "(Shfl\n  (Vec\n    b\n    d\n    c\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, c, d, b]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, c, d, b, a, 0, 2, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d, a, 2, 1, 0]
solving: "(Shfl\n  (Vec\n    b\n    d\n    c\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, c, d, b]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, c, d, b, a, 0, 2, 1]
no
solving: "(Shfl\n  (Vec\n    b\n    c\n    a\n    d)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, d, a, c, b]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, d, a, c, b, d, 2, 3, 1]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d, a, 3, 0, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d, a, 3, 0, 1]
solving: "(Shfl\n  (Vec\n    b\n    c\n    a\n    d)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, d, a, c, b]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, d, a, c, b, d, 2, 3, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d, a, 3, 0, 1]
solving: "(Shfl\n  (Vec\n    b\n    c\n    a\n    d)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, d, a, c, b]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, d, a, c, b, d, 2, 3, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    b\n    a\n    c)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, c, a, b, d]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, c, a, b, d, c, 2, 1, 0]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d, a, 3, 2, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d, a, 3, 2, 0]
solving: "(Shfl\n  (Vec\n    d\n    b\n    a\n    c)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, c, a, b, d]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, c, a, b, d, c, 2, 1, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d, a, 3, 2, 0]
solving: "(Shfl\n  (Vec\n    d\n    b\n    a\n    c)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, c, a, b, d]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, c, a, b, d, c, 2, 1, 0]
no
solving: "(Shfl\n  (Vec\n    c\n    d\n    a\n    b)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, b, a, d, c]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, b, a, d, c, b, 2, 3, 1]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d, a, 3, 2, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d, a, 3, 2, 0]
solving: "(Shfl\n  (Vec\n    c\n    d\n    a\n    b)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, b, a, d, c]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, b, a, d, c, b, 2, 3, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d, a, 3, 2, 0]
solving: "(Shfl\n  (Vec\n    c\n    d\n    a\n    b)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, b, a, d, c]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, b, a, d, c, b, 2, 3, 1]
no
solving: "(Shfl\n  (Vec\n    b\n    d\n    c\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, c, d, b]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, c, d, b, a, 3, 0, 1]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d, a, 3, 2, 0]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d, a, 3, 2, 0]
solving: "(Shfl\n  (Vec\n    b\n    d\n    c\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, c, d, b]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, c, d, b, a, 3, 0, 1]
selecting took 3.199201042s
vector, []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
built egraph of current ruleset
extending and shrinking took 8.102208ms
solving: "(Shfl\n  (Vec\n    b\n    a\n    d\n    c)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, c, d, a, b]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, c, d, a, b, c, 2, 1, 0]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d, a, 0, 3, 2]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d, a, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    b\n    a\n    d\n    c)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, c, d, a, b]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, c, d, a, b, c, 2, 1, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d, a, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    b\n    a\n    d\n    c)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, c, d, a, b]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, c, d, a, b, c, 2, 1, 0]
no
solving: "(Shfl\n  (Vec\n    c\n    b\n    d\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, d, b, c]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, d, b, c, a, 2, 3, 1]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d, a, 0, 3, 2]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d, a, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    c\n    b\n    d\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, d, b, c]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, d, b, c, a, 2, 3, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d, a, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    c\n    b\n    d\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, d, b, c]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, d, b, c, a, 2, 3, 1]
no
solving: "(Shfl\n  (Vec\n    a\n    b\n    c\n    d)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, d, c, b, a]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, d, c, b, a, d, 3, 0, 1]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d, a, 0, 3, 2]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d, a, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    a\n    b\n    c\n    d)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, d, c, b, a]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, d, c, b, a, d, 3, 0, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d, a, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    a\n    b\n    c\n    d)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, d, c, b, a]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, d, c, b, a, d, 3, 0, 1]
no
solving: "(Shfl\n  (Vec\n    b\n    a\n    d\n    c)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, c, d, a, b]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, c, d, a, b, c, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d, a, 2, 1, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d, a, 2, 1, 0]
solving: "(Shfl\n  (Vec\n    b\n    a\n    d\n    c)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, c, d, a, b]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, c, d, a, b, c, 0, 3, 2]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d, a, 2, 1, 0]
solving: "(Shfl\n  (Vec\n    b\n    a\n    d\n    c)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, c, d, a, b]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, c, d, a, b, c, 0, 3, 2]
no
solving: "(Shfl\n  (Vec\n    b\n    c\n    a\n    d)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, d, a, c, b]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, d, a, c, b, d, 2, 1, 0]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, d]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, d, a, 3, 1, 2]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, d]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, d, a, 3, 1, 2]
solving: "(Shfl\n  (Vec\n    b\n    c\n    a\n    d)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, d, a, c, b]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, d, a, c, b, d, 2, 1, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, d]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, d, a, 3, 1, 2]
solving: "(Shfl\n  (Vec\n    b\n    c\n    a\n    d)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, d, a, c, b]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, d, a, c, b, d, 2, 1, 0]
no
solving: "(Shfl\n  (Vec\n    a\n    b\n    c\n    d)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, d, c, b, a]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, d, c, b, a, d, 2, 1, 0]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d, a, 1, 2, 3]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d, a, 1, 2, 3]
solving: "(Shfl\n  (Vec\n    a\n    b\n    c\n    d)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, d, c, b, a]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, d, c, b, a, d, 2, 1, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d, a, 1, 2, 3]
solving: "(Shfl\n  (Vec\n    a\n    b\n    c\n    d)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, d, c, b, a]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, d, c, b, a, d, 2, 1, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    b\n    a\n    c)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, c, a, b, d]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, c, a, b, d, c, 3, 1, 2]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d, a, 1, 2, 3]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d, a, 1, 2, 3]
solving: "(Shfl\n  (Vec\n    d\n    b\n    a\n    c)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, c, a, b, d]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, c, a, b, d, c, 3, 1, 2]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d, a, 1, 2, 3]
solving: "(Shfl\n  (Vec\n    d\n    b\n    a\n    c)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, c, a, b, d]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, c, a, b, d, c, 3, 1, 2]
no
solving: "(Shfl\n  (Vec\n    b\n    c\n    a\n    d)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, d, a, c, b]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, d, a, c, b, d, 3, 2, 0]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d, a, 0, 3, 2]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d, a, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    b\n    c\n    a\n    d)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, d, a, c, b]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, d, a, c, b, d, 3, 2, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, d, a, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    b\n    c\n    a\n    d)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, d, a, c, b]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, d, a, c, b, d, 3, 2, 0]
no
solving: "(Shfl\n  (Vec\n    b\n    d\n    c\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, c, d, b]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, c, d, b, a, 3, 2, 0]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, d]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, d, a, 3, 1, 2]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, d]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, d, a, 3, 1, 2]
solving: "(Shfl\n  (Vec\n    b\n    d\n    c\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, c, d, b]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, c, d, b, a, 3, 2, 0]
selecting took 924.432875ms
vector, []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
built egraph of current ruleset
extending and shrinking took 8.766333ms
solving: "(Shfl\n  (Vec\n    a\n    d\n    b\n    c)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, c, b, d, a]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, c, b, d, a, c, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, d]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, d, a, 3, 1, 2]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, d]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, d, a, 3, 1, 2]
solving: "(Shfl\n  (Vec\n    a\n    d\n    b\n    c)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, c, b, d, a]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, c, b, d, a, c, 0, 3, 2]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, d]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, d, a, 3, 1, 2]
solving: "(Shfl\n  (Vec\n    a\n    d\n    b\n    c)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, c, b, d, a]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, c, b, d, a, c, 0, 3, 2]
no
solving: "(Shfl\n  (Vec\n    a\n    c\n    d\n    b)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, b, d, c, a]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, b, d, c, a, b, 3, 1, 2]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d, a, 2, 1, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d, a, 2, 1, 0]
solving: "(Shfl\n  (Vec\n    a\n    c\n    d\n    b)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, b, d, c, a]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, b, d, c, a, b, 3, 1, 2]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, d, a, 2, 1, 0]
solving: "(Shfl\n  (Vec\n    a\n    c\n    d\n    b)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, b, d, c, a]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, b, d, c, a, b, 3, 1, 2]
no
solving: "(Shfl\n  (Vec\n    a\n    b\n    c\n    d)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, d, c, b, a]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, d, c, b, a, d, 3, 1, 2]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d, a, 0, 2, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d, a, 0, 2, 1]
solving: "(Shfl\n  (Vec\n    a\n    b\n    c\n    d)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, d, c, b, a]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, d, c, b, a, d, 3, 1, 2]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d, a, 0, 2, 1]
solving: "(Shfl\n  (Vec\n    a\n    b\n    c\n    d)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, d, c, b, a]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, d, c, b, a, d, 3, 1, 2]
no
solving: "(Shfl\n  (Vec\n    c\n    b\n    d\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, d, b, c]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, d, b, c, a, 2, 1, 0]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d, a, 0, 2, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d, a, 0, 2, 1]
solving: "(Shfl\n  (Vec\n    c\n    b\n    d\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, d, b, c]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, d, b, c, a, 2, 1, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d, a, 0, 2, 1]
solving: "(Shfl\n  (Vec\n    c\n    b\n    d\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, d, b, c]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, d, b, c, a, 2, 1, 0]
no
solving: "(Shfl\n  (Vec\n    c\n    d\n    a\n    b)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, b, a, d, c]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, b, a, d, c, b, 2, 1, 0]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d, a, 3, 0, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d, a, 3, 0, 1]
solving: "(Shfl\n  (Vec\n    c\n    d\n    a\n    b)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, b, a, d, c]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, b, a, d, c, b, 2, 1, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d, a, 3, 0, 1]
solving: "(Shfl\n  (Vec\n    c\n    d\n    a\n    b)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, b, a, d, c]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, b, a, d, c, b, 2, 1, 0]
no
solving: "(Shfl\n  (Vec\n    a\n    c\n    d\n    b)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, b, d, c, a]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, b, d, c, a, b, 0, 2, 1]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d, a, 3, 0, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d, a, 3, 0, 1]
solving: "(Shfl\n  (Vec\n    a\n    c\n    d\n    b)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, b, d, c, a]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, b, d, c, a, b, 0, 2, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, c, d, a, 3, 0, 1]
solving: "(Shfl\n  (Vec\n    a\n    c\n    d\n    b)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, b, d, c, a]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, b, d, c, a, b, 0, 2, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    a\n    c\n    b)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, b, c, a, d]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, b, c, a, d, b, 3, 1, 2]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
solving: "(Shfl\n  (Vec\n    d\n    a\n    c\n    b)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, b, c, a, d]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, b, c, a, d, b, 3, 1, 2]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
solving: "(Shfl\n  (Vec\n    d\n    a\n    c\n    b)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, b, c, a, d]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, b, c, a, d, b, 3, 1, 2]
no
solving: "(Shfl\n  (Vec\n    c\n    a\n    b\n    d)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, d, b, a, c]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, d, b, a, c, d, 2, 1, 0]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
solving: "(Shfl\n  (Vec\n    c\n    a\n    b\n    d)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, d, b, a, c]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, d, b, a, c, d, 2, 1, 0]
selecting took 773.289459ms
vector, []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
built egraph of current ruleset
extending and shrinking took 8.914ms
solving: "(Shfl\n  (Vec\n    b\n    c\n    a\n    d)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, d, a, c, b]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, d, a, c, b, d, 0, 2, 1]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
solving: "(Shfl\n  (Vec\n    b\n    c\n    a\n    d)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, d, a, c, b]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, d, a, c, b, d, 0, 2, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
solving: "(Shfl\n  (Vec\n    b\n    c\n    a\n    d)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, d, a, c, b]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, d, a, c, b, d, 0, 2, 1]
no
solving: "(Shfl\n  (Vec\n    a\n    c\n    d\n    b)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, b, d, c, a]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, b, d, c, a, b, 3, 0, 1]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
solving: "(Shfl\n  (Vec\n    a\n    c\n    d\n    b)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, b, d, c, a]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, b, d, c, a, b, 3, 0, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, d, a, 2, 3, 1]
solving: "(Shfl\n  (Vec\n    a\n    c\n    d\n    b)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, b, d, c, a]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, b, d, c, a, b, 3, 0, 1]
no
solving: "(Shfl\n  (Vec\n    a\n    c\n    d\n    b)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, b, d, c, a]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, b, d, c, a, b, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d, a, 3, 2, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d, a, 3, 2, 0]
solving: "(Shfl\n  (Vec\n    a\n    c\n    d\n    b)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, b, d, c, a]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, b, d, c, a, b, 0, 3, 2]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, d, a, 3, 2, 0]
solving: "(Shfl\n  (Vec\n    a\n    c\n    d\n    b)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, b, d, c, a]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, b, d, c, a, b, 0, 3, 2]
no
solving: "(Shfl\n  (Vec\n    c\n    d\n    a\n    b)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, b, a, d, c]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, b, a, d, c, b, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d, a, 1, 2, 3]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d, a, 1, 2, 3]
solving: "(Shfl\n  (Vec\n    c\n    d\n    a\n    b)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, b, a, d, c]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, b, a, d, c, b, 0, 3, 2]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d, a, 1, 2, 3]
solving: "(Shfl\n  (Vec\n    c\n    d\n    a\n    b)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, b, a, d, c]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, b, a, d, c, b, 0, 3, 2]
no
solving: "(Shfl\n  (Vec\n    a\n    d\n    b\n    c)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, c, b, d, a]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, c, b, d, a, c, 3, 2, 0]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d, a, 1, 2, 3]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d, a, 1, 2, 3]
solving: "(Shfl\n  (Vec\n    a\n    d\n    b\n    c)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, c, b, d, a]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, c, b, d, a, c, 3, 2, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, d, a, 1, 2, 3]
solving: "(Shfl\n  (Vec\n    a\n    d\n    b\n    c)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, c, b, d, a]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, c, b, d, a, c, 3, 2, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    a\n    c\n    b)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, b, c, a, d]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, b, c, a, d, b, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d, a, 0, 2, 1]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d, a, 0, 2, 1]
solving: "(Shfl\n  (Vec\n    d\n    a\n    c\n    b)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, b, c, a, d]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, b, c, a, d, b, 0, 3, 2]
selecting took 569.260292ms
vector, []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
built egraph of current ruleset
extending and shrinking took 8.220958ms
solving: "(Shfl\n  (Vec\n    c\n    a\n    b\n    d)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, d, b, a, c]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, d, b, a, c, d, 3, 2, 0]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d, a, 0, 2, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d, a, 0, 2, 1]
solving: "(Shfl\n  (Vec\n    c\n    a\n    b\n    d)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, d, b, a, c]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, d, b, a, c, d, 3, 2, 0]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d, a, 0, 2, 1]
solving: "(Shfl\n  (Vec\n    c\n    a\n    b\n    d)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, d, b, a, c]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, d, b, a, c, d, 3, 2, 0]
no
solving: "(Shfl\n  (Vec\n    a\n    d\n    b\n    c)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, b, d, a]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, b, d, a, c, 1, 2, 3]
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d, a, 0, 2, 1]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d, a, 0, 2, 1]
solving: "(Shfl\n  (Vec\n    a\n    d\n    b\n    c)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, b, d, a]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, b, d, a, c, 1, 2, 3]
no
solving: "(Shfl\n  (Vec\n    d\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, d, a, 0, 2, 1]
solving: "(Shfl\n  (Vec\n    a\n    d\n    b\n    c)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, b, d, a]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, c, b, d, a, c, 1, 2, 3]
no
solving: "(Shfl\n  (Vec\n    c\n    b\n    0\n    a)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, 3, 1, 0, 2]
solving: "(Vec\n  c\n  0\n  b\n  a)"
at the beginning of adding vector: [a, b, 0, c]
at the end of adding vector: [a, b, 0, c, c, 0, b, a]
no
solving: "(Vec\n  c\n  0\n  b\n  a)"
at the beginning of adding vector: [a, b, 0, c]
at the end of adding vector: [a, b, 0, c, c, 0, b, a]
solving: "(Shfl\n  (Vec\n    c\n    b\n    0\n    a)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, 3, 1, 0, 2]
no
solving: "(Vec\n  c\n  0\n  b\n  a)"
at the beginning of adding vector: [a, b, 0, c]
at the end of adding vector: [a, b, 0, c, c, 0, b, a]
solving: "(Shfl\n  (Vec\n    c\n    b\n    0\n    a)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, 3, 1, 0, 2]
no
solving: "(Vec\n  c\n  0\n  b\n  a)"
at the beginning of adding vector: [a, b, 0, c]
at the end of adding vector: [a, b, 0, c, c, 0, b, a]
solving: "(Shfl\n  (Vec\n    0\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, 0, 3, 2, 0]
no
solving: "(Shfl\n  (Vec\n    0\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, 0, 3, 2, 0]
solving: "(Vec\n  c\n  0\n  b\n  a)"
at the beginning of adding vector: [a, b, 0, c]
at the end of adding vector: [a, b, 0, c, c, 0, b, a]
no
solving: "(Shfl\n  (Vec\n    0\n    c\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, 0, 3, 2, 0]
solving: "(Vec\n  c\n  0\n  b\n  a)"
at the beginning of adding vector: [a, b, 0, c]
at the end of adding vector: [a, b, 0, c, c, 0, b, a]
no
solving: "(Shfl\n  (Vec\n    c\n    b\n    0\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, 2, 3, 0, 1]
solving: "(Vec\n  c\n  b\n  a\n  0)"
at the beginning of adding vector: [0, a, b, c]
at the end of adding vector: [0, a, b, c, c, b, a, 0]
no
solving: "(Vec\n  c\n  b\n  a\n  0)"
at the beginning of adding vector: [0, a, b, c]
at the end of adding vector: [0, a, b, c, c, b, a, 0]
solving: "(Shfl\n  (Vec\n    c\n    b\n    0\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, 2, 3, 0, 1]
no
solving: "(Vec\n  c\n  b\n  a\n  0)"
at the beginning of adding vector: [0, a, b, c]
at the end of adding vector: [0, a, b, c, c, b, a, 0]
solving: "(Shfl\n  (Vec\n    c\n    b\n    0\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, 2, 3, 0, 1]
no
solving: "(Vec\n  c\n  b\n  a\n  0)"
at the beginning of adding vector: [0, a, b, c]
at the end of adding vector: [0, a, b, c, c, b, a, 0]
solving: "(Shfl\n  (Vec\n    0\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, 0, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    0\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, 0, 0, 3, 2]
solving: "(Vec\n  c\n  b\n  a\n  0)"
at the beginning of adding vector: [0, a, b, c]
at the end of adding vector: [0, a, b, c, c, b, a, 0]
selecting took 581.385334ms
vector, []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
vector, []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
indices are: []
shuffle vec is: []
shuffled is: []
built egraph of current ruleset
extending and shrinking took 7.547791ms
solving: "(Vec\n  0\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, 0]
at the end of adding vector: [a, b, c, 0, 0, c, b, a]
solving: "(Shfl\n  (Vec\n    c\n    b\n    a\n    0)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, 2, 1, 0, 0]
no
solving: "(Shfl\n  (Vec\n    c\n    b\n    a\n    0)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, 2, 1, 0, 0]
solving: "(Vec\n  0\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, 0]
at the end of adding vector: [a, b, c, 0, 0, c, b, a]
no
solving: "(Shfl\n  (Vec\n    c\n    b\n    a\n    0)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, 2, 1, 0, 0]
solving: "(Vec\n  0\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, 0]
at the end of adding vector: [a, b, c, 0, 0, c, b, a]
no
solving: "(Vec\n  0\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, 0]
at the end of adding vector: [a, b, c, 0, 0, c, b, a]
solving: "(Shfl\n  (Vec\n    c\n    0\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, 3, 0, 2, 0]
no
solving: "(Shfl\n  (Vec\n    c\n    0\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, 3, 0, 2, 0]
solving: "(Vec\n  0\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, 0]
at the end of adding vector: [a, b, c, 0, 0, c, b, a]
no
solving: "(Shfl\n  (Vec\n    c\n    0\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, 3, 0, 2, 0]
solving: "(Vec\n  0\n  c\n  b\n  a)"
at the beginning of adding vector: [a, b, c, 0]
at the end of adding vector: [a, b, c, 0, 0, c, b, a]
no
solving: "(Vec\n  c\n  b\n  0\n  a)"
at the beginning of adding vector: [a, 0, b, c]
at the end of adding vector: [a, 0, b, c, c, b, 0, a]
solving: "(Shfl\n  (Vec\n    c\n    0\n    b\n    a)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, 3, 0, 1, 2]
no
solving: "(Shfl\n  (Vec\n    c\n    0\n    b\n    a)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, 3, 0, 1, 2]
solving: "(Vec\n  c\n  b\n  0\n  a)"
at the beginning of adding vector: [a, 0, b, c]
at the end of adding vector: [a, 0, b, c, c, b, 0, a]
no
solving: "(Shfl\n  (Vec\n    c\n    0\n    b\n    a)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, 3, 0, 1, 2]
solving: "(Vec\n  c\n  b\n  0\n  a)"
at the beginning of adding vector: [a, 0, b, c]
at the end of adding vector: [a, 0, b, c, c, b, 0, a]
no
solving: "(Vec\n  c\n  b\n  0\n  a)"
at the beginning of adding vector: [a, 0, b, c]
at the end of adding vector: [a, 0, b, c, c, b, 0, a]
solving: "(Shfl\n  (Vec\n    c\n    b\n    a\n    0)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, 2, 3, 1, 0]
no
solving: "(Shfl\n  (Vec\n    c\n    b\n    a\n    0)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, 2, 3, 1, 0]
solving: "(Vec\n  c\n  b\n  0\n  a)"
at the beginning of adding vector: [a, 0, b, c]
at the end of adding vector: [a, 0, b, c, c, b, 0, a]
no
solving: "(Shfl\n  (Vec\n    c\n    b\n    a\n    0)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, 2, 3, 1, 0]
solving: "(Vec\n  c\n  b\n  0\n  a)"
at the beginning of adding vector: [a, 0, b, c]
at the end of adding vector: [a, 0, b, c, c, b, 0, a]
no
solving: "(Shfl\n  (Vec\n    0\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, 0, 0, 2, 1]
solving: "(Shfl\n  (Vec\n    c\n    b\n    0\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, 2, 1, 0, 0]
no
solving: "(Shfl\n  (Vec\n    c\n    b\n    0\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, 2, 1, 0, 0]
solving: "(Shfl\n  (Vec\n    0\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, 0, 0, 2, 1]
no
solving: "(Shfl\n  (Vec\n    c\n    b\n    0\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, 2, 1, 0, 0]
solving: "(Shfl\n  (Vec\n    0\n    c\n    b\n    a)\n  (Vec\n    3\n    1\n    2\n    0))"
at the beginning of adding vector: [0, 2, 1, 3]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0]
at the beginning of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c]
at the end of adding vector: [0, 2, 1, 3, 3, 1, 2, 0, a, b, c, 0, 0, 2, 1]
no
solving: "(Shfl\n  (Vec\n    c\n    0\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, 1, 0, 2, 3]
solving: "(Shfl\n  (Vec\n    c\n    b\n    a\n    0)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, 3, 1, 2, 0]
no
solving: "(Shfl\n  (Vec\n    c\n    b\n    a\n    0)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, 3, 1, 2, 0]
solving: "(Shfl\n  (Vec\n    c\n    0\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, 1, 0, 2, 3]
no
solving: "(Shfl\n  (Vec\n    c\n    b\n    a\n    0)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, 3, 1, 2, 0]
solving: "(Shfl\n  (Vec\n    c\n    0\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, 1, 0, 2, 3]
no
solving: "(Shfl\n  (Vec\n    c\n    b\n    a\n    0)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, 1, 2, 3, 0]
solving: "(Shfl\n  (Vec\n    c\n    0\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, 2, 0, 3, 1]
no
solving: "(Shfl\n  (Vec\n    c\n    0\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, 2, 0, 3, 1]
solving: "(Shfl\n  (Vec\n    c\n    b\n    a\n    0)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, 1, 2, 3, 0]
no
solving: "(Shfl\n  (Vec\n    c\n    0\n    b\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, 2, 0, 3, 1]
solving: "(Shfl\n  (Vec\n    c\n    b\n    a\n    0)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, c, 1, 2, 3, 0]
no
solving: "(Shfl\n  (Vec\n    c\n    b\n    0\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, 2, 3, 0, 1]
solving: "(Shfl\n  (Vec\n    0\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, 0, 0, 3, 2]
no
solving: "(Shfl\n  (Vec\n    0\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, 0, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    c\n    b\n    0\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, 2, 3, 0, 1]
no
solving: "(Shfl\n  (Vec\n    0\n    c\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, c, 0, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    c\n    b\n    0\n    a)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, 2, 3, 0, 1]
no
solving: "(Shfl\n  (Vec\n    c\n    b\n    a\n    0)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, 2, 1, 0, 0]
solving: "(Shfl\n  (Vec\n    c\n    0\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, 3, 0, 2, 0]
no
solving: "(Shfl\n  (Vec\n    c\n    0\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, 3, 0, 2, 0]
solving: "(Shfl\n  (Vec\n    c\n    b\n    a\n    0)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, 2, 1, 0, 0]
no
solving: "(Shfl\n  (Vec\n    c\n    0\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, c, 3, 0, 2, 0]
solving: "(Shfl\n  (Vec\n    c\n    b\n    a\n    0)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, c, 2, 1, 0, 0]
no
solving: "(Shfl\n  (Vec\n    c\n    0\n    b\n    a)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, 3, 0, 1, 2]
solving: "(Shfl\n  (Vec\n    c\n    b\n    a\n    0)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, 2, 3, 1, 0]
no
solving: "(Shfl\n  (Vec\n    c\n    b\n    a\n    0)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, 2, 3, 1, 0]
solving: "(Shfl\n  (Vec\n    c\n    0\n    b\n    a)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, 3, 0, 1, 2]
no
solving: "(Shfl\n  (Vec\n    c\n    b\n    a\n    0)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, c, 2, 3, 1, 0]
solving: "(Shfl\n  (Vec\n    c\n    0\n    b\n    a)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, b, c, 3, 0, 1, 2]
no
solving: "(Vec\n  b\n  a\n  0\n  0)"
at the beginning of adding vector: [0, a, b]
at the end of adding vector: [0, a, b, b, a, 0, 0]
solving: "(Shfl\n  (Vec\n    b\n    a\n    0\n    0)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, 3, 1, 0, 0]
no
solving: "(Shfl\n  (Vec\n    b\n    a\n    0\n    0)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, 3, 1, 0, 0]
solving: "(Vec\n  b\n  a\n  0\n  0)"
at the beginning of adding vector: [0, a, b]
at the end of adding vector: [0, a, b, b, a, 0, 0]
no
solving: "(Shfl\n  (Vec\n    b\n    a\n    0\n    0)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, b, 3, 1, 0, 0]
solving: "(Vec\n  b\n  a\n  0\n  0)"
at the beginning of adding vector: [0, a, b]
at the end of adding vector: [0, a, b, b, a, 0, 0]
no
solving: "(Shfl\n  (Vec\n    0\n    0\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, 0, 0, 2, 0]
solving: "(Vec\n  0\n  0\n  b\n  a)"
at the beginning of adding vector: [a, b, 0]
at the end of adding vector: [a, b, 0, 0, 0, b, a]
no
solving: "(Vec\n  0\n  0\n  b\n  a)"
at the beginning of adding vector: [a, b, 0]
at the end of adding vector: [a, b, 0, 0, 0, b, a]
solving: "(Shfl\n  (Vec\n    0\n    0\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, 0, 0, 2, 0]
no
solving: "(Vec\n  0\n  0\n  b\n  a)"
at the beginning of adding vector: [a, b, 0]
at the end of adding vector: [a, b, 0, 0, 0, b, a]
solving: "(Shfl\n  (Vec\n    0\n    0\n    b\n    a)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, b, 0, 0, 2, 0]
no
solving: "(Shfl\n  (Vec\n    0\n    0\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, 0, 0, 3, 2]
solving: "(Shfl\n  (Vec\n    b\n    a\n    0\n    0)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, 1, 0, 0, 0]
no
solving: "(Shfl\n  (Vec\n    b\n    a\n    0\n    0)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, 1, 0, 0, 0]
solving: "(Shfl\n  (Vec\n    0\n    0\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, 0, 0, 3, 2]
no
solving: "(Shfl\n  (Vec\n    b\n    a\n    0\n    0)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, 1, 0, 0, 0]
solving: "(Shfl\n  (Vec\n    0\n    0\n    b\n    a)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, 0, 0, 3, 2]
no
solving: "(Shfl\n  (Vec\n    b\n    a\n    0\n    0)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, 2, 3, 0, 0]
solving: "(Shfl\n  (Vec\n    0\n    0\n    b\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, 0, 0, 0, 1]
no
solving: "(Shfl\n  (Vec\n    0\n    0\n    b\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, 0, 0, 0, 1]
solving: "(Shfl\n  (Vec\n    b\n    a\n    0\n    0)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, 2, 3, 0, 0]
no
solving: "(Shfl\n  (Vec\n    0\n    0\n    b\n    a)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, 0, 0, 0, 1]
solving: "(Shfl\n  (Vec\n    b\n    a\n    0\n    0)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, 2, 3, 0, 0]
no
solving: "(Shfl\n  (Vec\n    b\n    a\n    0\n    0)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, 3, 2, 0, 0]
solving: "(Shfl\n  (Vec\n    0\n    0\n    b\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, 0, 0, 1, 0]
no
solving: "(Shfl\n  (Vec\n    0\n    0\n    b\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, 0, 0, 1, 0]
solving: "(Shfl\n  (Vec\n    b\n    a\n    0\n    0)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, 3, 2, 0, 0]
no
solving: "(Shfl\n  (Vec\n    0\n    0\n    b\n    a)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, b, 0, 0, 1, 0]
solving: "(Shfl\n  (Vec\n    b\n    a\n    0\n    0)\n  (Vec\n    1\n    2\n    3\n    0))"
at the beginning of adding vector: [0, 3, 2, 1]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0]
at the beginning of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b]
at the end of adding vector: [0, 3, 2, 1, 1, 2, 3, 0, a, b, 3, 2, 0, 0]
no
solving: "(Shfl\n  (Vec\n    0\n    0\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, 0, 0, 2, 3]
solving: "(Shfl\n  (Vec\n    b\n    a\n    0\n    0)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, 0, 1, 0, 0]
no
solving: "(Shfl\n  (Vec\n    b\n    a\n    0\n    0)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, 0, 1, 0, 0]
solving: "(Shfl\n  (Vec\n    0\n    0\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, 0, 0, 2, 3]
no
solving: "(Shfl\n  (Vec\n    b\n    a\n    0\n    0)\n  (Vec\n    2\n    1\n    0\n    3))"
at the beginning of adding vector: [3, 0, 1, 2]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3]
at the beginning of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b]
at the end of adding vector: [3, 0, 1, 2, 2, 1, 0, 3, a, b, 0, 1, 0, 0]
solving: "(Shfl\n  (Vec\n    0\n    0\n    b\n    a)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, b, 0, 0, 2, 3]
no
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, 2, 0, 0, 0]
solving: "(Vec\n  a\n  0\n  0\n  0)"
at the beginning of adding vector: [0, a]
at the end of adding vector: [0, a, a, 0, 0, 0]
no
solving: "(Vec\n  a\n  0\n  0\n  0)"
at the beginning of adding vector: [0, a]
at the end of adding vector: [0, a, a, 0, 0, 0]
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, 2, 0, 0, 0]
no
solving: "(Vec\n  a\n  0\n  0\n  0)"
at the beginning of adding vector: [0, a]
at the end of adding vector: [0, a, a, 0, 0, 0]
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, 2, 0, 0, 0]
no
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, 1, 0, 0, 0]
solving: "(Vec\n  a\n  0\n  0\n  0)"
at the beginning of adding vector: [0, a]
at the end of adding vector: [0, a, a, 0, 0, 0]
no
solving: "(Vec\n  a\n  0\n  0\n  0)"
at the beginning of adding vector: [0, a]
at the end of adding vector: [0, a, a, 0, 0, 0]
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, 1, 0, 0, 0]
no
solving: "(Vec\n  a\n  0\n  0\n  0)"
at the beginning of adding vector: [0, a]
at the end of adding vector: [0, a, a, 0, 0, 0]
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, 1, 0, 0, 0]
no
solving: "(Vec\n  a\n  0\n  0\n  0)"
at the beginning of adding vector: [0, a]
at the end of adding vector: [0, a, a, 0, 0, 0]
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, 3, 0, 0, 0]
no
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, 3, 0, 0, 0]
solving: "(Vec\n  a\n  0\n  0\n  0)"
at the beginning of adding vector: [0, a]
at the end of adding vector: [0, a, a, 0, 0, 0]
no
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, 3, 0, 0, 0]
solving: "(Vec\n  a\n  0\n  0\n  0)"
at the beginning of adding vector: [0, a]
at the end of adding vector: [0, a, a, 0, 0, 0]
no
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, 0, 0, 0, 0]
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, 0, 0, 0, 0]
no
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, 0, 0, 0, 0]
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, 0, 0, 0, 0]
no
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    3\n    0\n    1\n    2))"
at the beginning of adding vector: [2, 1, 0, 3]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2]
at the beginning of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a]
at the end of adding vector: [2, 1, 0, 3, 3, 0, 1, 2, a, 0, 0, 0, 0]
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    1\n    0\n    2\n    3))"
at the beginning of adding vector: [3, 2, 0, 1]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3]
at the beginning of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a]
at the end of adding vector: [3, 2, 0, 1, 1, 0, 2, 3, a, 0, 0, 0, 0]
no
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, 2, 0, 0, 0]
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, 1, 0, 0, 0]
no
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, 1, 0, 0, 0]
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, 2, 0, 0, 0]
no
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, 1, 0, 0, 0]
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, 2, 0, 0, 0]
no
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, 2, 0, 0, 0]
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, 3, 0, 0, 0]
no
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, 3, 0, 0, 0]
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, 2, 0, 0, 0]
no
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, 3, 0, 0, 0]
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    2\n    1\n    3))"
at the beginning of adding vector: [3, 1, 2, 0]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3]
at the beginning of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a]
at the end of adding vector: [3, 1, 2, 0, 0, 2, 1, 3, a, 2, 0, 0, 0]
no
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, 1, 0, 0, 0]
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, 3, 0, 0, 0]
no
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, 3, 0, 0, 0]
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, 1, 0, 0, 0]
no
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    3\n    2\n    1))"
at the beginning of adding vector: [1, 2, 3, 0]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1]
at the beginning of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a]
at the end of adding vector: [1, 2, 3, 0, 0, 3, 2, 1, a, 3, 0, 0, 0]
solving: "(Shfl\n  (Vec\n    a\n    0\n    0\n    0)\n  (Vec\n    0\n    1\n    3\n    2))"
at the beginning of adding vector: [2, 3, 1, 0]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2]
at the beginning of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a]
at the end of adding vector: [2, 3, 1, 0, 0, 1, 3, 2, a, 1, 0, 0, 0]
no
selecting took 2.362468167s
built egraph of current ruleset
extending and shrinking took 65.208µs
minimizing candidates took 8.452187667s
Learned 5 bidirectional rewrites (10 total rewrites) in 8.524196541 using 0 prior rewrites
(Shfl (Vec ?b ?d ?c ?a) (Vec 2 1 0 3)) <=> (Shfl (Vec ?d ?c ?b ?a) (Vec 1 0 2 3))
(Shfl (Vec ?b ?d ?c ?a) (Vec 1 0 2 3)) <=> (Shfl (Vec ?d ?c ?b ?a) (Vec 0 2 1 3))
(Shfl (Vec ?c ?a ?b ?d) (Vec 3 0 1 2)) <=> (Shfl (Vec ?d ?c ?b ?a) (Vec 0 1 3 2))
(Shfl (Vec ?d ?a ?c ?b) (Vec 1 2 3 0)) <=> (Shfl (Vec ?d ?c ?b ?a) (Vec 3 1 2 0))
(Vec ?c ?b ?a 0) <=> (Shfl (Vec 0 ?c ?b ?a) (Vec 1 2 3 0))
[Object {"lhs": String("(Shfl (Vec ?b ?d ?c ?a) (Vec 2 1 0 3))"), "rhs": String("(Shfl (Vec ?d ?c ?b ?a) (Vec 1 0 2 3))"), "bidirectional": Bool(false)}, Object {"lhs": String("(Shfl (Vec ?d ?c ?b ?a) (Vec 1 0 2 3))"), "rhs": String("(Shfl (Vec ?b ?d ?c ?a) (Vec 2 1 0 3))"), "bidirectional": Bool(false)}, Object {"lhs": String("(Shfl (Vec ?b ?d ?c ?a) (Vec 1 0 2 3))"), "rhs": String("(Shfl (Vec ?d ?c ?b ?a) (Vec 0 2 1 3))"), "bidirectional": Bool(false)}, Object {"lhs": String("(Shfl (Vec ?d ?c ?b ?a) (Vec 0 2 1 3))"), "rhs": String("(Shfl (Vec ?b ?d ?c ?a) (Vec 1 0 2 3))"), "bidirectional": Bool(false)}, Object {"lhs": String("(Shfl (Vec ?c ?a ?b ?d) (Vec 3 0 1 2))"), "rhs": String("(Shfl (Vec ?d ?c ?b ?a) (Vec 0 1 3 2))"), "bidirectional": Bool(false)}, Object {"lhs": String("(Shfl (Vec ?d ?c ?b ?a) (Vec 0 1 3 2))"), "rhs": String("(Shfl (Vec ?c ?a ?b ?d) (Vec 3 0 1 2))"), "bidirectional": Bool(false)}, Object {"lhs": String("(Shfl (Vec ?d ?a ?c ?b) (Vec 1 2 3 0))"), "rhs": String("(Shfl (Vec ?d ?c ?b ?a) (Vec 3 1 2 0))"), "bidirectional": Bool(false)}, Object {"lhs": String("(Shfl (Vec ?d ?c ?b ?a) (Vec 3 1 2 0))"), "rhs": String("(Shfl (Vec ?d ?a ?c ?b) (Vec 1 2 3 0))"), "bidirectional": Bool(false)}, Object {"lhs": String("(Vec ?c ?b ?a 0)"), "rhs": String("(Shfl (Vec 0 ?c ?b ?a) (Vec 1 2 3 0))"), "bidirectional": Bool(false)}, Object {"lhs": String("(Shfl (Vec 0 ?c ?b ?a) (Vec 1 2 3 0))"), "rhs": String("(Vec ?c ?b ?a 0)"), "bidirectional": Bool(false)}]path candidates/depth_3_ruleset_vec.json may not exist
[Object {"lhs": String("(Shfl (Vec ?b ?d ?c ?a) (Vec 2 1 0 3))"), "rhs": String("(Shfl (Vec ?d ?c ?b ?a) (Vec 1 0 2 3))"), "bidirectional": Bool(false)}, Object {"lhs": String("(Shfl (Vec ?d ?c ?b ?a) (Vec 1 0 2 3))"), "rhs": String("(Shfl (Vec ?b ?d ?c ?a) (Vec 2 1 0 3))"), "bidirectional": Bool(false)}, Object {"lhs": String("(Shfl (Vec ?b ?d ?c ?a) (Vec 1 0 2 3))"), "rhs": String("(Shfl (Vec ?d ?c ?b ?a) (Vec 0 2 1 3))"), "bidirectional": Bool(false)}, Object {"lhs": String("(Shfl (Vec ?d ?c ?b ?a) (Vec 0 2 1 3))"), "rhs": String("(Shfl (Vec ?b ?d ?c ?a) (Vec 1 0 2 3))"), "bidirectional": Bool(false)}, Object {"lhs": String("(Shfl (Vec ?c ?a ?b ?d) (Vec 3 0 1 2))"), "rhs": String("(Shfl (Vec ?d ?c ?b ?a) (Vec 0 1 3 2))"), "bidirectional": Bool(false)}, Object {"lhs": String("(Shfl (Vec ?d ?c ?b ?a) (Vec 0 1 3 2))"), "rhs": String("(Shfl (Vec ?c ?a ?b ?d) (Vec 3 0 1 2))"), "bidirectional": Bool(false)}, Object {"lhs": String("(Shfl (Vec ?d ?a ?c ?b) (Vec 1 2 3 0))"), "rhs": String("(Shfl (Vec ?d ?c ?b ?a) (Vec 3 1 2 0))"), "bidirectional": Bool(false)}, Object {"lhs": String("(Shfl (Vec ?d ?c ?b ?a) (Vec 3 1 2 0))"), "rhs": String("(Shfl (Vec ?d ?a ?c ?b) (Vec 1 2 3 0))"), "bidirectional": Bool(false)}, Object {"lhs": String("(Vec ?c ?b ?a 0)"), "rhs": String("(Shfl (Vec 0 ?c ?b ?a) (Vec 1 2 3 0))"), "bidirectional": Bool(false)}, Object {"lhs": String("(Shfl (Vec 0 ?c ?b ?a) (Vec 1 2 3 0))"), "rhs": String("(Vec ?c ?b ?a 0)"), "bidirectional": Bool(false)}]path rulesets/ruleset_desugared.json may not exist
Ok(
    Ruleset(
        {
            "(Shfl (Vec ?b ?d ?c ?a) (Vec 2 1 0 3)) ==> (Shfl (Vec ?d ?c ?b ?a) (Vec 1 0 2 3))": Rule {
                name: "(Shfl (Vec ?b ?d ?c ?a) (Vec 2 1 0 3)) ==> (Shfl (Vec ?d ?c ?b ?a) (Vec 1 0 2 3))",
                lhs: Pattern {
                    ast: RecExpr {
                        nodes: [
                            ENode(
                                Const(
                                    Int(
                                        3,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        0,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        1,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        2,
                                    ),
                                ),
                            ),
                            ENode(
                                Vec(
                                    [
                                        3,
                                        2,
                                        1,
                                        0,
                                    ],
                                ),
                            ),
                            Var(
                                "?a",
                            ),
                            Var(
                                "?c",
                            ),
                            Var(
                                "?d",
                            ),
                            Var(
                                "?b",
                            ),
                            ENode(
                                Vec(
                                    [
                                        8,
                                        7,
                                        6,
                                        5,
                                    ],
                                ),
                            ),
                            ENode(
                                Shfl(
                                    [
                                        9,
                                        4,
                                    ],
                                ),
                            ),
                        ],
                    },
                    program: Program {
                        instructions: [
                            Bind {
                                node: Shfl(
                                    [
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    0,
                                ),
                                out: Reg(
                                    1,
                                ),
                            },
                            Lookup {
                                term: [
                                    ENode(
                                        Const(
                                            Int(
                                                3,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                1,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                2,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Vec(
                                            [
                                                3,
                                                2,
                                                1,
                                                0,
                                            ],
                                        ),
                                    ),
                                ],
                                i: Reg(
                                    2,
                                ),
                            },
                            Bind {
                                node: Vec(
                                    [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    1,
                                ),
                                out: Reg(
                                    3,
                                ),
                            },
                        ],
                        subst: {?b: 3, ?d: 4, ?c: 5, ?a: 6},
                    },
                },
                rhs: Pattern {
                    ast: RecExpr {
                        nodes: [
                            ENode(
                                Const(
                                    Int(
                                        3,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        2,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        0,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        1,
                                    ),
                                ),
                            ),
                            ENode(
                                Vec(
                                    [
                                        3,
                                        2,
                                        1,
                                        0,
                                    ],
                                ),
                            ),
                            Var(
                                "?a",
                            ),
                            Var(
                                "?b",
                            ),
                            Var(
                                "?c",
                            ),
                            Var(
                                "?d",
                            ),
                            ENode(
                                Vec(
                                    [
                                        8,
                                        7,
                                        6,
                                        5,
                                    ],
                                ),
                            ),
                            ENode(
                                Shfl(
                                    [
                                        9,
                                        4,
                                    ],
                                ),
                            ),
                        ],
                    },
                    program: Program {
                        instructions: [
                            Bind {
                                node: Shfl(
                                    [
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    0,
                                ),
                                out: Reg(
                                    1,
                                ),
                            },
                            Lookup {
                                term: [
                                    ENode(
                                        Const(
                                            Int(
                                                3,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                2,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                1,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Vec(
                                            [
                                                3,
                                                2,
                                                1,
                                                0,
                                            ],
                                        ),
                                    ),
                                ],
                                i: Reg(
                                    2,
                                ),
                            },
                            Bind {
                                node: Vec(
                                    [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    1,
                                ),
                                out: Reg(
                                    3,
                                ),
                            },
                        ],
                        subst: {?d: 3, ?c: 4, ?b: 5, ?a: 6},
                    },
                },
                rewrite: Rewrite {
                    name: "(Shfl (Vec ?b ?d ?c ?a) (Vec 2 1 0 3)) ==> (Shfl (Vec ?d ?c ?b ?a) (Vec 1 0 2 3))",
                    searcher: (Shfl (Vec ?b ?d ?c ?a) (Vec 2 1 0 3)),
                    applier: "<< applier >>",
                },
            },
            "(Shfl (Vec ?d ?c ?b ?a) (Vec 1 0 2 3)) ==> (Shfl (Vec ?b ?d ?c ?a) (Vec 2 1 0 3))": Rule {
                name: "(Shfl (Vec ?d ?c ?b ?a) (Vec 1 0 2 3)) ==> (Shfl (Vec ?b ?d ?c ?a) (Vec 2 1 0 3))",
                lhs: Pattern {
                    ast: RecExpr {
                        nodes: [
                            ENode(
                                Const(
                                    Int(
                                        3,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        2,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        0,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        1,
                                    ),
                                ),
                            ),
                            ENode(
                                Vec(
                                    [
                                        3,
                                        2,
                                        1,
                                        0,
                                    ],
                                ),
                            ),
                            Var(
                                "?a",
                            ),
                            Var(
                                "?b",
                            ),
                            Var(
                                "?c",
                            ),
                            Var(
                                "?d",
                            ),
                            ENode(
                                Vec(
                                    [
                                        8,
                                        7,
                                        6,
                                        5,
                                    ],
                                ),
                            ),
                            ENode(
                                Shfl(
                                    [
                                        9,
                                        4,
                                    ],
                                ),
                            ),
                        ],
                    },
                    program: Program {
                        instructions: [
                            Bind {
                                node: Shfl(
                                    [
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    0,
                                ),
                                out: Reg(
                                    1,
                                ),
                            },
                            Lookup {
                                term: [
                                    ENode(
                                        Const(
                                            Int(
                                                3,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                2,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                1,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Vec(
                                            [
                                                3,
                                                2,
                                                1,
                                                0,
                                            ],
                                        ),
                                    ),
                                ],
                                i: Reg(
                                    2,
                                ),
                            },
                            Bind {
                                node: Vec(
                                    [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    1,
                                ),
                                out: Reg(
                                    3,
                                ),
                            },
                        ],
                        subst: {?d: 3, ?c: 4, ?b: 5, ?a: 6},
                    },
                },
                rhs: Pattern {
                    ast: RecExpr {
                        nodes: [
                            ENode(
                                Const(
                                    Int(
                                        3,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        0,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        1,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        2,
                                    ),
                                ),
                            ),
                            ENode(
                                Vec(
                                    [
                                        3,
                                        2,
                                        1,
                                        0,
                                    ],
                                ),
                            ),
                            Var(
                                "?a",
                            ),
                            Var(
                                "?c",
                            ),
                            Var(
                                "?d",
                            ),
                            Var(
                                "?b",
                            ),
                            ENode(
                                Vec(
                                    [
                                        8,
                                        7,
                                        6,
                                        5,
                                    ],
                                ),
                            ),
                            ENode(
                                Shfl(
                                    [
                                        9,
                                        4,
                                    ],
                                ),
                            ),
                        ],
                    },
                    program: Program {
                        instructions: [
                            Bind {
                                node: Shfl(
                                    [
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    0,
                                ),
                                out: Reg(
                                    1,
                                ),
                            },
                            Lookup {
                                term: [
                                    ENode(
                                        Const(
                                            Int(
                                                3,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                1,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                2,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Vec(
                                            [
                                                3,
                                                2,
                                                1,
                                                0,
                                            ],
                                        ),
                                    ),
                                ],
                                i: Reg(
                                    2,
                                ),
                            },
                            Bind {
                                node: Vec(
                                    [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    1,
                                ),
                                out: Reg(
                                    3,
                                ),
                            },
                        ],
                        subst: {?b: 3, ?d: 4, ?c: 5, ?a: 6},
                    },
                },
                rewrite: Rewrite {
                    name: "(Shfl (Vec ?d ?c ?b ?a) (Vec 1 0 2 3)) ==> (Shfl (Vec ?b ?d ?c ?a) (Vec 2 1 0 3))",
                    searcher: (Shfl (Vec ?d ?c ?b ?a) (Vec 1 0 2 3)),
                    applier: "<< applier >>",
                },
            },
            "(Shfl (Vec ?b ?d ?c ?a) (Vec 1 0 2 3)) ==> (Shfl (Vec ?d ?c ?b ?a) (Vec 0 2 1 3))": Rule {
                name: "(Shfl (Vec ?b ?d ?c ?a) (Vec 1 0 2 3)) ==> (Shfl (Vec ?d ?c ?b ?a) (Vec 0 2 1 3))",
                lhs: Pattern {
                    ast: RecExpr {
                        nodes: [
                            ENode(
                                Const(
                                    Int(
                                        3,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        2,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        0,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        1,
                                    ),
                                ),
                            ),
                            ENode(
                                Vec(
                                    [
                                        3,
                                        2,
                                        1,
                                        0,
                                    ],
                                ),
                            ),
                            Var(
                                "?a",
                            ),
                            Var(
                                "?c",
                            ),
                            Var(
                                "?d",
                            ),
                            Var(
                                "?b",
                            ),
                            ENode(
                                Vec(
                                    [
                                        8,
                                        7,
                                        6,
                                        5,
                                    ],
                                ),
                            ),
                            ENode(
                                Shfl(
                                    [
                                        9,
                                        4,
                                    ],
                                ),
                            ),
                        ],
                    },
                    program: Program {
                        instructions: [
                            Bind {
                                node: Shfl(
                                    [
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    0,
                                ),
                                out: Reg(
                                    1,
                                ),
                            },
                            Lookup {
                                term: [
                                    ENode(
                                        Const(
                                            Int(
                                                3,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                2,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                1,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Vec(
                                            [
                                                3,
                                                2,
                                                1,
                                                0,
                                            ],
                                        ),
                                    ),
                                ],
                                i: Reg(
                                    2,
                                ),
                            },
                            Bind {
                                node: Vec(
                                    [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    1,
                                ),
                                out: Reg(
                                    3,
                                ),
                            },
                        ],
                        subst: {?b: 3, ?d: 4, ?c: 5, ?a: 6},
                    },
                },
                rhs: Pattern {
                    ast: RecExpr {
                        nodes: [
                            ENode(
                                Const(
                                    Int(
                                        3,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        1,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        2,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        0,
                                    ),
                                ),
                            ),
                            ENode(
                                Vec(
                                    [
                                        3,
                                        2,
                                        1,
                                        0,
                                    ],
                                ),
                            ),
                            Var(
                                "?a",
                            ),
                            Var(
                                "?b",
                            ),
                            Var(
                                "?c",
                            ),
                            Var(
                                "?d",
                            ),
                            ENode(
                                Vec(
                                    [
                                        8,
                                        7,
                                        6,
                                        5,
                                    ],
                                ),
                            ),
                            ENode(
                                Shfl(
                                    [
                                        9,
                                        4,
                                    ],
                                ),
                            ),
                        ],
                    },
                    program: Program {
                        instructions: [
                            Bind {
                                node: Shfl(
                                    [
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    0,
                                ),
                                out: Reg(
                                    1,
                                ),
                            },
                            Lookup {
                                term: [
                                    ENode(
                                        Const(
                                            Int(
                                                3,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                1,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                2,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Vec(
                                            [
                                                3,
                                                2,
                                                1,
                                                0,
                                            ],
                                        ),
                                    ),
                                ],
                                i: Reg(
                                    2,
                                ),
                            },
                            Bind {
                                node: Vec(
                                    [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    1,
                                ),
                                out: Reg(
                                    3,
                                ),
                            },
                        ],
                        subst: {?d: 3, ?c: 4, ?b: 5, ?a: 6},
                    },
                },
                rewrite: Rewrite {
                    name: "(Shfl (Vec ?b ?d ?c ?a) (Vec 1 0 2 3)) ==> (Shfl (Vec ?d ?c ?b ?a) (Vec 0 2 1 3))",
                    searcher: (Shfl (Vec ?b ?d ?c ?a) (Vec 1 0 2 3)),
                    applier: "<< applier >>",
                },
            },
            "(Shfl (Vec ?d ?c ?b ?a) (Vec 0 2 1 3)) ==> (Shfl (Vec ?b ?d ?c ?a) (Vec 1 0 2 3))": Rule {
                name: "(Shfl (Vec ?d ?c ?b ?a) (Vec 0 2 1 3)) ==> (Shfl (Vec ?b ?d ?c ?a) (Vec 1 0 2 3))",
                lhs: Pattern {
                    ast: RecExpr {
                        nodes: [
                            ENode(
                                Const(
                                    Int(
                                        3,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        1,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        2,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        0,
                                    ),
                                ),
                            ),
                            ENode(
                                Vec(
                                    [
                                        3,
                                        2,
                                        1,
                                        0,
                                    ],
                                ),
                            ),
                            Var(
                                "?a",
                            ),
                            Var(
                                "?b",
                            ),
                            Var(
                                "?c",
                            ),
                            Var(
                                "?d",
                            ),
                            ENode(
                                Vec(
                                    [
                                        8,
                                        7,
                                        6,
                                        5,
                                    ],
                                ),
                            ),
                            ENode(
                                Shfl(
                                    [
                                        9,
                                        4,
                                    ],
                                ),
                            ),
                        ],
                    },
                    program: Program {
                        instructions: [
                            Bind {
                                node: Shfl(
                                    [
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    0,
                                ),
                                out: Reg(
                                    1,
                                ),
                            },
                            Lookup {
                                term: [
                                    ENode(
                                        Const(
                                            Int(
                                                3,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                1,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                2,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Vec(
                                            [
                                                3,
                                                2,
                                                1,
                                                0,
                                            ],
                                        ),
                                    ),
                                ],
                                i: Reg(
                                    2,
                                ),
                            },
                            Bind {
                                node: Vec(
                                    [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    1,
                                ),
                                out: Reg(
                                    3,
                                ),
                            },
                        ],
                        subst: {?d: 3, ?c: 4, ?b: 5, ?a: 6},
                    },
                },
                rhs: Pattern {
                    ast: RecExpr {
                        nodes: [
                            ENode(
                                Const(
                                    Int(
                                        3,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        2,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        0,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        1,
                                    ),
                                ),
                            ),
                            ENode(
                                Vec(
                                    [
                                        3,
                                        2,
                                        1,
                                        0,
                                    ],
                                ),
                            ),
                            Var(
                                "?a",
                            ),
                            Var(
                                "?c",
                            ),
                            Var(
                                "?d",
                            ),
                            Var(
                                "?b",
                            ),
                            ENode(
                                Vec(
                                    [
                                        8,
                                        7,
                                        6,
                                        5,
                                    ],
                                ),
                            ),
                            ENode(
                                Shfl(
                                    [
                                        9,
                                        4,
                                    ],
                                ),
                            ),
                        ],
                    },
                    program: Program {
                        instructions: [
                            Bind {
                                node: Shfl(
                                    [
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    0,
                                ),
                                out: Reg(
                                    1,
                                ),
                            },
                            Lookup {
                                term: [
                                    ENode(
                                        Const(
                                            Int(
                                                3,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                2,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                1,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Vec(
                                            [
                                                3,
                                                2,
                                                1,
                                                0,
                                            ],
                                        ),
                                    ),
                                ],
                                i: Reg(
                                    2,
                                ),
                            },
                            Bind {
                                node: Vec(
                                    [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    1,
                                ),
                                out: Reg(
                                    3,
                                ),
                            },
                        ],
                        subst: {?b: 3, ?d: 4, ?c: 5, ?a: 6},
                    },
                },
                rewrite: Rewrite {
                    name: "(Shfl (Vec ?d ?c ?b ?a) (Vec 0 2 1 3)) ==> (Shfl (Vec ?b ?d ?c ?a) (Vec 1 0 2 3))",
                    searcher: (Shfl (Vec ?d ?c ?b ?a) (Vec 0 2 1 3)),
                    applier: "<< applier >>",
                },
            },
            "(Shfl (Vec ?c ?a ?b ?d) (Vec 3 0 1 2)) ==> (Shfl (Vec ?d ?c ?b ?a) (Vec 0 1 3 2))": Rule {
                name: "(Shfl (Vec ?c ?a ?b ?d) (Vec 3 0 1 2)) ==> (Shfl (Vec ?d ?c ?b ?a) (Vec 0 1 3 2))",
                lhs: Pattern {
                    ast: RecExpr {
                        nodes: [
                            ENode(
                                Const(
                                    Int(
                                        2,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        1,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        0,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        3,
                                    ),
                                ),
                            ),
                            ENode(
                                Vec(
                                    [
                                        3,
                                        2,
                                        1,
                                        0,
                                    ],
                                ),
                            ),
                            Var(
                                "?d",
                            ),
                            Var(
                                "?b",
                            ),
                            Var(
                                "?a",
                            ),
                            Var(
                                "?c",
                            ),
                            ENode(
                                Vec(
                                    [
                                        8,
                                        7,
                                        6,
                                        5,
                                    ],
                                ),
                            ),
                            ENode(
                                Shfl(
                                    [
                                        9,
                                        4,
                                    ],
                                ),
                            ),
                        ],
                    },
                    program: Program {
                        instructions: [
                            Bind {
                                node: Shfl(
                                    [
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    0,
                                ),
                                out: Reg(
                                    1,
                                ),
                            },
                            Lookup {
                                term: [
                                    ENode(
                                        Const(
                                            Int(
                                                2,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                1,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                3,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Vec(
                                            [
                                                3,
                                                2,
                                                1,
                                                0,
                                            ],
                                        ),
                                    ),
                                ],
                                i: Reg(
                                    2,
                                ),
                            },
                            Bind {
                                node: Vec(
                                    [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    1,
                                ),
                                out: Reg(
                                    3,
                                ),
                            },
                        ],
                        subst: {?c: 3, ?a: 4, ?b: 5, ?d: 6},
                    },
                },
                rhs: Pattern {
                    ast: RecExpr {
                        nodes: [
                            ENode(
                                Const(
                                    Int(
                                        2,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        3,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        1,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        0,
                                    ),
                                ),
                            ),
                            ENode(
                                Vec(
                                    [
                                        3,
                                        2,
                                        1,
                                        0,
                                    ],
                                ),
                            ),
                            Var(
                                "?a",
                            ),
                            Var(
                                "?b",
                            ),
                            Var(
                                "?c",
                            ),
                            Var(
                                "?d",
                            ),
                            ENode(
                                Vec(
                                    [
                                        8,
                                        7,
                                        6,
                                        5,
                                    ],
                                ),
                            ),
                            ENode(
                                Shfl(
                                    [
                                        9,
                                        4,
                                    ],
                                ),
                            ),
                        ],
                    },
                    program: Program {
                        instructions: [
                            Bind {
                                node: Shfl(
                                    [
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    0,
                                ),
                                out: Reg(
                                    1,
                                ),
                            },
                            Lookup {
                                term: [
                                    ENode(
                                        Const(
                                            Int(
                                                2,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                3,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                1,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Vec(
                                            [
                                                3,
                                                2,
                                                1,
                                                0,
                                            ],
                                        ),
                                    ),
                                ],
                                i: Reg(
                                    2,
                                ),
                            },
                            Bind {
                                node: Vec(
                                    [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    1,
                                ),
                                out: Reg(
                                    3,
                                ),
                            },
                        ],
                        subst: {?d: 3, ?c: 4, ?b: 5, ?a: 6},
                    },
                },
                rewrite: Rewrite {
                    name: "(Shfl (Vec ?c ?a ?b ?d) (Vec 3 0 1 2)) ==> (Shfl (Vec ?d ?c ?b ?a) (Vec 0 1 3 2))",
                    searcher: (Shfl (Vec ?c ?a ?b ?d) (Vec 3 0 1 2)),
                    applier: "<< applier >>",
                },
            },
            "(Shfl (Vec ?d ?c ?b ?a) (Vec 0 1 3 2)) ==> (Shfl (Vec ?c ?a ?b ?d) (Vec 3 0 1 2))": Rule {
                name: "(Shfl (Vec ?d ?c ?b ?a) (Vec 0 1 3 2)) ==> (Shfl (Vec ?c ?a ?b ?d) (Vec 3 0 1 2))",
                lhs: Pattern {
                    ast: RecExpr {
                        nodes: [
                            ENode(
                                Const(
                                    Int(
                                        2,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        3,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        1,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        0,
                                    ),
                                ),
                            ),
                            ENode(
                                Vec(
                                    [
                                        3,
                                        2,
                                        1,
                                        0,
                                    ],
                                ),
                            ),
                            Var(
                                "?a",
                            ),
                            Var(
                                "?b",
                            ),
                            Var(
                                "?c",
                            ),
                            Var(
                                "?d",
                            ),
                            ENode(
                                Vec(
                                    [
                                        8,
                                        7,
                                        6,
                                        5,
                                    ],
                                ),
                            ),
                            ENode(
                                Shfl(
                                    [
                                        9,
                                        4,
                                    ],
                                ),
                            ),
                        ],
                    },
                    program: Program {
                        instructions: [
                            Bind {
                                node: Shfl(
                                    [
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    0,
                                ),
                                out: Reg(
                                    1,
                                ),
                            },
                            Lookup {
                                term: [
                                    ENode(
                                        Const(
                                            Int(
                                                2,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                3,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                1,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Vec(
                                            [
                                                3,
                                                2,
                                                1,
                                                0,
                                            ],
                                        ),
                                    ),
                                ],
                                i: Reg(
                                    2,
                                ),
                            },
                            Bind {
                                node: Vec(
                                    [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    1,
                                ),
                                out: Reg(
                                    3,
                                ),
                            },
                        ],
                        subst: {?d: 3, ?c: 4, ?b: 5, ?a: 6},
                    },
                },
                rhs: Pattern {
                    ast: RecExpr {
                        nodes: [
                            ENode(
                                Const(
                                    Int(
                                        2,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        1,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        0,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        3,
                                    ),
                                ),
                            ),
                            ENode(
                                Vec(
                                    [
                                        3,
                                        2,
                                        1,
                                        0,
                                    ],
                                ),
                            ),
                            Var(
                                "?d",
                            ),
                            Var(
                                "?b",
                            ),
                            Var(
                                "?a",
                            ),
                            Var(
                                "?c",
                            ),
                            ENode(
                                Vec(
                                    [
                                        8,
                                        7,
                                        6,
                                        5,
                                    ],
                                ),
                            ),
                            ENode(
                                Shfl(
                                    [
                                        9,
                                        4,
                                    ],
                                ),
                            ),
                        ],
                    },
                    program: Program {
                        instructions: [
                            Bind {
                                node: Shfl(
                                    [
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    0,
                                ),
                                out: Reg(
                                    1,
                                ),
                            },
                            Lookup {
                                term: [
                                    ENode(
                                        Const(
                                            Int(
                                                2,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                1,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                3,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Vec(
                                            [
                                                3,
                                                2,
                                                1,
                                                0,
                                            ],
                                        ),
                                    ),
                                ],
                                i: Reg(
                                    2,
                                ),
                            },
                            Bind {
                                node: Vec(
                                    [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    1,
                                ),
                                out: Reg(
                                    3,
                                ),
                            },
                        ],
                        subst: {?c: 3, ?a: 4, ?b: 5, ?d: 6},
                    },
                },
                rewrite: Rewrite {
                    name: "(Shfl (Vec ?d ?c ?b ?a) (Vec 0 1 3 2)) ==> (Shfl (Vec ?c ?a ?b ?d) (Vec 3 0 1 2))",
                    searcher: (Shfl (Vec ?d ?c ?b ?a) (Vec 0 1 3 2)),
                    applier: "<< applier >>",
                },
            },
            "(Shfl (Vec ?d ?a ?c ?b) (Vec 1 2 3 0)) ==> (Shfl (Vec ?d ?c ?b ?a) (Vec 3 1 2 0))": Rule {
                name: "(Shfl (Vec ?d ?a ?c ?b) (Vec 1 2 3 0)) ==> (Shfl (Vec ?d ?c ?b ?a) (Vec 3 1 2 0))",
                lhs: Pattern {
                    ast: RecExpr {
                        nodes: [
                            ENode(
                                Const(
                                    Int(
                                        0,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        3,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        2,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        1,
                                    ),
                                ),
                            ),
                            ENode(
                                Vec(
                                    [
                                        3,
                                        2,
                                        1,
                                        0,
                                    ],
                                ),
                            ),
                            Var(
                                "?b",
                            ),
                            Var(
                                "?c",
                            ),
                            Var(
                                "?a",
                            ),
                            Var(
                                "?d",
                            ),
                            ENode(
                                Vec(
                                    [
                                        8,
                                        7,
                                        6,
                                        5,
                                    ],
                                ),
                            ),
                            ENode(
                                Shfl(
                                    [
                                        9,
                                        4,
                                    ],
                                ),
                            ),
                        ],
                    },
                    program: Program {
                        instructions: [
                            Bind {
                                node: Shfl(
                                    [
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    0,
                                ),
                                out: Reg(
                                    1,
                                ),
                            },
                            Lookup {
                                term: [
                                    ENode(
                                        Const(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                3,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                2,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                1,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Vec(
                                            [
                                                3,
                                                2,
                                                1,
                                                0,
                                            ],
                                        ),
                                    ),
                                ],
                                i: Reg(
                                    2,
                                ),
                            },
                            Bind {
                                node: Vec(
                                    [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    1,
                                ),
                                out: Reg(
                                    3,
                                ),
                            },
                        ],
                        subst: {?d: 3, ?a: 4, ?c: 5, ?b: 6},
                    },
                },
                rhs: Pattern {
                    ast: RecExpr {
                        nodes: [
                            ENode(
                                Const(
                                    Int(
                                        0,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        2,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        1,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        3,
                                    ),
                                ),
                            ),
                            ENode(
                                Vec(
                                    [
                                        3,
                                        2,
                                        1,
                                        0,
                                    ],
                                ),
                            ),
                            Var(
                                "?a",
                            ),
                            Var(
                                "?b",
                            ),
                            Var(
                                "?c",
                            ),
                            Var(
                                "?d",
                            ),
                            ENode(
                                Vec(
                                    [
                                        8,
                                        7,
                                        6,
                                        5,
                                    ],
                                ),
                            ),
                            ENode(
                                Shfl(
                                    [
                                        9,
                                        4,
                                    ],
                                ),
                            ),
                        ],
                    },
                    program: Program {
                        instructions: [
                            Bind {
                                node: Shfl(
                                    [
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    0,
                                ),
                                out: Reg(
                                    1,
                                ),
                            },
                            Lookup {
                                term: [
                                    ENode(
                                        Const(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                2,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                1,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                3,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Vec(
                                            [
                                                3,
                                                2,
                                                1,
                                                0,
                                            ],
                                        ),
                                    ),
                                ],
                                i: Reg(
                                    2,
                                ),
                            },
                            Bind {
                                node: Vec(
                                    [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    1,
                                ),
                                out: Reg(
                                    3,
                                ),
                            },
                        ],
                        subst: {?d: 3, ?c: 4, ?b: 5, ?a: 6},
                    },
                },
                rewrite: Rewrite {
                    name: "(Shfl (Vec ?d ?a ?c ?b) (Vec 1 2 3 0)) ==> (Shfl (Vec ?d ?c ?b ?a) (Vec 3 1 2 0))",
                    searcher: (Shfl (Vec ?d ?a ?c ?b) (Vec 1 2 3 0)),
                    applier: "<< applier >>",
                },
            },
            "(Shfl (Vec ?d ?c ?b ?a) (Vec 3 1 2 0)) ==> (Shfl (Vec ?d ?a ?c ?b) (Vec 1 2 3 0))": Rule {
                name: "(Shfl (Vec ?d ?c ?b ?a) (Vec 3 1 2 0)) ==> (Shfl (Vec ?d ?a ?c ?b) (Vec 1 2 3 0))",
                lhs: Pattern {
                    ast: RecExpr {
                        nodes: [
                            ENode(
                                Const(
                                    Int(
                                        0,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        2,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        1,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        3,
                                    ),
                                ),
                            ),
                            ENode(
                                Vec(
                                    [
                                        3,
                                        2,
                                        1,
                                        0,
                                    ],
                                ),
                            ),
                            Var(
                                "?a",
                            ),
                            Var(
                                "?b",
                            ),
                            Var(
                                "?c",
                            ),
                            Var(
                                "?d",
                            ),
                            ENode(
                                Vec(
                                    [
                                        8,
                                        7,
                                        6,
                                        5,
                                    ],
                                ),
                            ),
                            ENode(
                                Shfl(
                                    [
                                        9,
                                        4,
                                    ],
                                ),
                            ),
                        ],
                    },
                    program: Program {
                        instructions: [
                            Bind {
                                node: Shfl(
                                    [
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    0,
                                ),
                                out: Reg(
                                    1,
                                ),
                            },
                            Lookup {
                                term: [
                                    ENode(
                                        Const(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                2,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                1,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                3,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Vec(
                                            [
                                                3,
                                                2,
                                                1,
                                                0,
                                            ],
                                        ),
                                    ),
                                ],
                                i: Reg(
                                    2,
                                ),
                            },
                            Bind {
                                node: Vec(
                                    [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    1,
                                ),
                                out: Reg(
                                    3,
                                ),
                            },
                        ],
                        subst: {?d: 3, ?c: 4, ?b: 5, ?a: 6},
                    },
                },
                rhs: Pattern {
                    ast: RecExpr {
                        nodes: [
                            ENode(
                                Const(
                                    Int(
                                        0,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        3,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        2,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        1,
                                    ),
                                ),
                            ),
                            ENode(
                                Vec(
                                    [
                                        3,
                                        2,
                                        1,
                                        0,
                                    ],
                                ),
                            ),
                            Var(
                                "?b",
                            ),
                            Var(
                                "?c",
                            ),
                            Var(
                                "?a",
                            ),
                            Var(
                                "?d",
                            ),
                            ENode(
                                Vec(
                                    [
                                        8,
                                        7,
                                        6,
                                        5,
                                    ],
                                ),
                            ),
                            ENode(
                                Shfl(
                                    [
                                        9,
                                        4,
                                    ],
                                ),
                            ),
                        ],
                    },
                    program: Program {
                        instructions: [
                            Bind {
                                node: Shfl(
                                    [
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    0,
                                ),
                                out: Reg(
                                    1,
                                ),
                            },
                            Lookup {
                                term: [
                                    ENode(
                                        Const(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                3,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                2,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                1,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Vec(
                                            [
                                                3,
                                                2,
                                                1,
                                                0,
                                            ],
                                        ),
                                    ),
                                ],
                                i: Reg(
                                    2,
                                ),
                            },
                            Bind {
                                node: Vec(
                                    [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    1,
                                ),
                                out: Reg(
                                    3,
                                ),
                            },
                        ],
                        subst: {?d: 3, ?a: 4, ?c: 5, ?b: 6},
                    },
                },
                rewrite: Rewrite {
                    name: "(Shfl (Vec ?d ?c ?b ?a) (Vec 3 1 2 0)) ==> (Shfl (Vec ?d ?a ?c ?b) (Vec 1 2 3 0))",
                    searcher: (Shfl (Vec ?d ?c ?b ?a) (Vec 3 1 2 0)),
                    applier: "<< applier >>",
                },
            },
            "(Vec ?c ?b ?a 0) ==> (Shfl (Vec 0 ?c ?b ?a) (Vec 1 2 3 0))": Rule {
                name: "(Vec ?c ?b ?a 0) ==> (Shfl (Vec 0 ?c ?b ?a) (Vec 1 2 3 0))",
                lhs: Pattern {
                    ast: RecExpr {
                        nodes: [
                            ENode(
                                Const(
                                    Int(
                                        0,
                                    ),
                                ),
                            ),
                            Var(
                                "?a",
                            ),
                            Var(
                                "?b",
                            ),
                            Var(
                                "?c",
                            ),
                            ENode(
                                Vec(
                                    [
                                        3,
                                        2,
                                        1,
                                        0,
                                    ],
                                ),
                            ),
                        ],
                    },
                    program: Program {
                        instructions: [
                            Bind {
                                node: Vec(
                                    [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    0,
                                ),
                                out: Reg(
                                    1,
                                ),
                            },
                            Bind {
                                node: Const(
                                    Int(
                                        0,
                                    ),
                                ),
                                i: Reg(
                                    4,
                                ),
                                out: Reg(
                                    5,
                                ),
                            },
                        ],
                        subst: {?c: 1, ?b: 2, ?a: 3},
                    },
                },
                rhs: Pattern {
                    ast: RecExpr {
                        nodes: [
                            ENode(
                                Const(
                                    Int(
                                        0,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        3,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        2,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        1,
                                    ),
                                ),
                            ),
                            ENode(
                                Vec(
                                    [
                                        3,
                                        2,
                                        1,
                                        0,
                                    ],
                                ),
                            ),
                            Var(
                                "?a",
                            ),
                            Var(
                                "?b",
                            ),
                            Var(
                                "?c",
                            ),
                            ENode(
                                Vec(
                                    [
                                        0,
                                        7,
                                        6,
                                        5,
                                    ],
                                ),
                            ),
                            ENode(
                                Shfl(
                                    [
                                        8,
                                        4,
                                    ],
                                ),
                            ),
                        ],
                    },
                    program: Program {
                        instructions: [
                            Bind {
                                node: Shfl(
                                    [
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    0,
                                ),
                                out: Reg(
                                    1,
                                ),
                            },
                            Lookup {
                                term: [
                                    ENode(
                                        Const(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                3,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                2,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                1,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Vec(
                                            [
                                                3,
                                                2,
                                                1,
                                                0,
                                            ],
                                        ),
                                    ),
                                ],
                                i: Reg(
                                    2,
                                ),
                            },
                            Bind {
                                node: Vec(
                                    [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    1,
                                ),
                                out: Reg(
                                    3,
                                ),
                            },
                            Bind {
                                node: Const(
                                    Int(
                                        0,
                                    ),
                                ),
                                i: Reg(
                                    3,
                                ),
                                out: Reg(
                                    7,
                                ),
                            },
                        ],
                        subst: {?c: 4, ?b: 5, ?a: 6},
                    },
                },
                rewrite: Rewrite {
                    name: "(Vec ?c ?b ?a 0) ==> (Shfl (Vec 0 ?c ?b ?a) (Vec 1 2 3 0))",
                    searcher: (Vec ?c ?b ?a 0),
                    applier: "<< applier >>",
                },
            },
            "(Shfl (Vec 0 ?c ?b ?a) (Vec 1 2 3 0)) ==> (Vec ?c ?b ?a 0)": Rule {
                name: "(Shfl (Vec 0 ?c ?b ?a) (Vec 1 2 3 0)) ==> (Vec ?c ?b ?a 0)",
                lhs: Pattern {
                    ast: RecExpr {
                        nodes: [
                            ENode(
                                Const(
                                    Int(
                                        0,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        3,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        2,
                                    ),
                                ),
                            ),
                            ENode(
                                Const(
                                    Int(
                                        1,
                                    ),
                                ),
                            ),
                            ENode(
                                Vec(
                                    [
                                        3,
                                        2,
                                        1,
                                        0,
                                    ],
                                ),
                            ),
                            Var(
                                "?a",
                            ),
                            Var(
                                "?b",
                            ),
                            Var(
                                "?c",
                            ),
                            ENode(
                                Vec(
                                    [
                                        0,
                                        7,
                                        6,
                                        5,
                                    ],
                                ),
                            ),
                            ENode(
                                Shfl(
                                    [
                                        8,
                                        4,
                                    ],
                                ),
                            ),
                        ],
                    },
                    program: Program {
                        instructions: [
                            Bind {
                                node: Shfl(
                                    [
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    0,
                                ),
                                out: Reg(
                                    1,
                                ),
                            },
                            Lookup {
                                term: [
                                    ENode(
                                        Const(
                                            Int(
                                                0,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                3,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                2,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Const(
                                            Int(
                                                1,
                                            ),
                                        ),
                                    ),
                                    ENode(
                                        Vec(
                                            [
                                                3,
                                                2,
                                                1,
                                                0,
                                            ],
                                        ),
                                    ),
                                ],
                                i: Reg(
                                    2,
                                ),
                            },
                            Bind {
                                node: Vec(
                                    [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    1,
                                ),
                                out: Reg(
                                    3,
                                ),
                            },
                            Bind {
                                node: Const(
                                    Int(
                                        0,
                                    ),
                                ),
                                i: Reg(
                                    3,
                                ),
                                out: Reg(
                                    7,
                                ),
                            },
                        ],
                        subst: {?c: 4, ?b: 5, ?a: 6},
                    },
                },
                rhs: Pattern {
                    ast: RecExpr {
                        nodes: [
                            ENode(
                                Const(
                                    Int(
                                        0,
                                    ),
                                ),
                            ),
                            Var(
                                "?a",
                            ),
                            Var(
                                "?b",
                            ),
                            Var(
                                "?c",
                            ),
                            ENode(
                                Vec(
                                    [
                                        3,
                                        2,
                                        1,
                                        0,
                                    ],
                                ),
                            ),
                        ],
                    },
                    program: Program {
                        instructions: [
                            Bind {
                                node: Vec(
                                    [
                                        0,
                                        0,
                                        0,
                                        0,
                                    ],
                                ),
                                i: Reg(
                                    0,
                                ),
                                out: Reg(
                                    1,
                                ),
                            },
                            Bind {
                                node: Const(
                                    Int(
                                        0,
                                    ),
                                ),
                                i: Reg(
                                    4,
                                ),
                                out: Reg(
                                    5,
                                ),
                            },
                        ],
                        subst: {?c: 1, ?b: 2, ?a: 3},
                    },
                },
                rewrite: Rewrite {
                    name: "(Shfl (Vec 0 ?c ?b ?a) (Vec 1 2 3 0)) ==> (Vec ?c ?b ?a 0)",
                    searcher: (Shfl (Vec 0 ?c ?b ?a) (Vec 1 2 3 0)),
                    applier: "<< applier >>",
                },
            },
        },
    ),
)
