warning: unused import: `log::debug`
  --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/enumo/scheduler.rs:44:13
   |
44 |         use log::debug;
   |             ^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `iter::FromIterator`
 --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/enumo/sexp.rs:1:25
  |
1 | use std::{str::FromStr, iter::FromIterator};
  |                         ^^^^^^^^^^^^^^^^^^

warning: unused import: `fmt::Display`
 --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/enumo/sexp.rs:2:34
  |
2 | use std::{collections::VecDeque, fmt::Display};
  |                                  ^^^^^^^^^^^^

warning: unused imports: `Mutex`, `RwLock`
 --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/enumo/workload.rs:6:25
  |
6 | use std::sync::{atomic, Mutex, RwLock};
  |                         ^^^^^  ^^^^^^

warning: unused import: `lazy_static::lazy_static`
 --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/enumo/workload.rs:7:5
  |
7 | use lazy_static::lazy_static;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::cell::RefCell`
 --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/enumo/workload.rs:8:5
  |
8 | use std::cell::RefCell;
  |     ^^^^^^^^^^^^^^^^^^

warning: the item `Display` is imported redundantly
  --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/language.rs:2:18
   |
2  |     fmt::{Debug, Display},
   |                  ^^^^^^^
...
10 | use crate::*;
   |     -------- the item `Display` is already imported here

warning: unused import: `log::debug`
  --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/language.rs:69:13
   |
69 |         use log::debug;
   |             ^^^^^^^^^^

warning: unused import: `File`
 --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/logger.rs:2:29
  |
2 |     fs::{self, OpenOptions, File},
  |                             ^^^^

warning: unused import: `io::Write`
 --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/recipe_utils.rs:1:26
  |
1 | use std::{time::Instant, io::Write};
  |                          ^^^^^^^^^

warning: the item `Instant` is imported redundantly
  --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/recipe_utils.rs:36:9
   |
1  | use std::{time::Instant, io::Write};
   |           ------------- the item `Instant` is already imported here
...
36 |     use std::time::Instant;
   |         ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::fs::File`
  --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/recipe_utils.rs:38:9
   |
38 |     use std::fs::File;
   |         ^^^^^^^^^^^^^

warning: unused variable: `now`
  --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/recipe_utils.rs:82:9
   |
82 |     let now = Instant::now();
   |         ^^^ help: if this is intentional, prefix it with an underscore: `_now`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: associated functions `substitute_inner` and `substitute` are never used
   --> /Users/benginow/Projects/isaria/comp-gen/ruler/src/enumo/workload.rs:192:19
    |
84  | impl Workload {
    | ------------- associated functions in this implementation
...
192 |     pub(crate) fn substitute_inner(name: std::string::String, peg: Sexp, hole: Sexp) -> Vec<Sexp> {
    |                   ^^^^^^^^^^^^^^^^
...
209 |     pub(crate) fn substitute(name: std::string::String, peg: Sexp, hole: Sexp) -> Sexp {
    |                   ^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: `ruler` (lib) generated 14 warnings (run `cargo fix --lib -p ruler` to apply 10 suggestions)
warning: unused import: `ptr::null`
 --> /Users/benginow/Projects/isaria/comp-gen/comp-gen/src/config.rs:1:26
  |
1 | use std::{path::PathBuf, ptr::null};
  |                          ^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `ruler::Phase`
 --> /Users/benginow/Projects/isaria/comp-gen/comp-gen/src/config.rs:3:5
  |
3 | use ruler::Phase;
  |     ^^^^^^^^^^^^

warning: unused import: `egg`
 --> /Users/benginow/Projects/isaria/comp-gen/comp-gen/src/phases.rs:2:5
  |
2 | use egg::*;
  |     ^^^

warning: unused import: `egg`
 --> /Users/benginow/Projects/isaria/comp-gen/comp-gen/src/run.rs:4:5
  |
4 | use egg::*;
  |     ^^^

warning: `comp-gen` (lib) generated 4 warnings (run `cargo fix --lib -p comp-gen` to apply 2 suggestions)
warning: the item `egg` is imported redundantly
 --> src/cost.rs:1:11
  |
1 | use egg::{self, CostFunction, Language};
  |           ^^^^ the item `egg` is already defined here
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `egg::*`
 --> src/error.rs:1:5
  |
1 | use egg::*;
  |     ^^^^^^

warning: unused import: `ruler::SynthLanguage`
 --> src/fuzz.rs:5:5
  |
5 |     ruler::SynthLanguage,
  |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `egg::*`
 --> src/handwritten.rs:1:5
  |
1 | use egg::*;
  |     ^^^^^^

warning: unused imports: `FromOp`, `define_language`
 --> src/lang.rs:1:11
  |
1 | use egg::{define_language, Id, Language, FromOp, EGraph};
  |           ^^^^^^^^^^^^^^^                ^^^^^^

warning: unused import: `self`
 --> src/lang.rs:6:23
  |
6 | use comp_gen::ruler::{self, SynthLanguage, enumo::*, map, self_product, SynthAnalysis, CVec, ValidationResult};
  |                       ^^^^

warning: unused import: `ToPrimitive`
  --> src/lang.rs:10:27
   |
10 | use num::{integer::Roots, ToPrimitive};
   |                           ^^^^^^^^^^^

warning: unused import: `log::debug`
 --> src/synthesis.rs:4:5
  |
4 | use log::debug;
  |     ^^^^^^^^^^

warning: unused imports: `ToPrimitive`, `integer::Roots`
 --> src/synthesis.rs:5:11
  |
5 | use num::{integer::Roots, ToPrimitive};
  |           ^^^^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `std::thread::JoinHandle`
  --> src/synthesis.rs:12:5
   |
12 | use std::thread::JoinHandle;
   |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `synth`
  --> src/synthesis.rs:14:19
   |
14 | use crate::{lang, synth, Res};
   |                   ^^^^^

warning: unused import: `generate_rules`
  --> src/synthesis.rs:15:19
   |
15 | use crate::util::{generate_rules, handpicked, handpicked_thinner, iter_dios_lt, vals, vars};
   |                   ^^^^^^^^^^^^^^

warning: unused imports: `FromOp`, `define_language`
 --> src/desugared_lang.rs:1:17
  |
1 | use egg::{self, define_language, Id, Language, FromOp};
  |                 ^^^^^^^^^^^^^^^                ^^^^^^

warning: the item `egg` is imported redundantly
 --> src/desugared_lang.rs:1:11
  |
1 | use egg::{self, define_language, Id, Language, FromOp};
  |           ^^^^ the item `egg` is already defined here

warning: unused import: `enumo::*`
 --> src/desugared_lang.rs:7:11
  |
7 |     self, enumo::*, ValidationResult,
  |           ^^^^^^^^

warning: unused imports: `Res`, `desugared_workloads::*`, `util`
  --> src/desugared_lang.rs:15:29
   |
15 | use crate::{desugared_lang, desugared_workloads::*, smt::SmtEquals, Res, util};
   |                             ^^^^^^^^^^^^^^^^^^^^^^                  ^^^  ^^^^

warning: unused imports: `EGraph`, `Id`
 --> src/desugared_synthesis.rs:4:11
  |
4 | use egg::{EGraph, Id};
  |           ^^^^^^  ^^

warning: unused import: `log::debug`
 --> src/desugared_synthesis.rs:5:5
  |
5 | use log::debug;
  |     ^^^^^^^^^^

warning: unused import: `rand::Rng`
 --> src/desugared_synthesis.rs:6:5
  |
6 | use rand::Rng;
  |     ^^^^^^^^^

warning: unused import: `rand_pcg::Pcg32`
 --> src/desugared_synthesis.rs:7:5
  |
7 | use rand_pcg::Pcg32;
  |     ^^^^^^^^^^^^^^^

warning: unused imports: `CVec`, `SynthAnalysis`, `SynthLanguage`, `map`, `self_product`
 --> src/desugared_synthesis.rs:9:5
  |
9 |     map, self_product, CVec, SynthAnalysis, SynthLanguage
  |     ^^^  ^^^^^^^^^^^^  ^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^

warning: unused import: `smt::SmtEquals`
  --> src/desugared_synthesis.rs:12:53
   |
12 | use crate::{desugared_lang, desugared_workloads::*, smt::SmtEquals, Res, util::*};
   |                                                     ^^^^^^^^^^^^^^

warning: unused import: `ValidationResult`
  --> src/desugared_synthesis.rs:49:25
   |
49 |         self, enumo::*, ValidationResult,
   |                         ^^^^^^^^^^^^^^^^

warning: unused imports: `EGraph`, `Id`
  --> src/desugared_synthesis.rs:51:15
   |
51 |     use egg::{EGraph, Id};
   |               ^^^^^^  ^^

warning: unused import: `log::debug`
  --> src/desugared_synthesis.rs:52:9
   |
52 |     use log::debug;
   |         ^^^^^^^^^^

warning: unused import: `rand::Rng`
  --> src/desugared_synthesis.rs:53:9
   |
53 |     use rand::Rng;
   |         ^^^^^^^^^

warning: unused import: `rand_pcg::Pcg32`
  --> src/desugared_synthesis.rs:54:9
   |
54 |     use rand_pcg::Pcg32;
   |         ^^^^^^^^^^^^^^^

warning: unused imports: `CVec`, `SynthAnalysis`, `SynthLanguage`, `map`, `self_product`
  --> src/desugared_synthesis.rs:56:9
   |
56 |         map, self_product, CVec, SynthAnalysis, SynthLanguage
   |         ^^^  ^^^^^^^^^^^^  ^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^

warning: unused imports: `Res`, `desugared_lang`, `desugared_workloads::*`, `smt::SmtEquals`
  --> src/desugared_synthesis.rs:58:17
   |
58 |     use crate::{desugared_lang, desugared_workloads::*, smt::SmtEquals, Res};
   |                 ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^  ^^^

warning: unused imports: `default_compiler_config`, `self`
  --> src/main.rs:19:24
   |
19 | use comp_gen::config::{self, default_compiler_config};
   |                        ^^^^  ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `egg::*`
  --> src/main.rs:20:5
   |
20 | use egg::*;
   |     ^^^^^^

warning: unreachable statement
  --> src/fuzz.rs:34:9
   |
31 |         return false;
   |         ------------ any code following this expression is unreachable
...
34 |         let mut rng = Lcg64Xsh32::new(0,0);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused import: `egg`
 --> src/desugar.rs:3:5
  |
3 | use egg::*;
  |     ^^^

warning: unused import: `Language`
 --> src/desugared_lang.rs:1:38
  |
1 | use egg::{self, define_language, Id, Language, FromOp};
  |                                      ^^^^^^^^

warning: variable `length` is assigned to, but never used
  --> src/fuzz.rs:79:17
   |
79 |         let mut length = 0;
   |                 ^^^^^^
   |
   = note: consider using `_length` instead
   = note: `#[warn(unused_variables)]` on by default

warning: value assigned to `length` is never read
  --> src/fuzz.rs:95:13
   |
95 |             length = cvec.len();
   |             ^^^^^^
   |
   = help: maybe it is overwritten before being read?
   = note: `#[warn(unused_assignments)]` on by default

warning: unused variable: `lhs`
  --> src/fuzz.rs:25:9
   |
25 |         lhs: &egg::Pattern<Self>,
   |         ^^^ help: if this is intentional, prefix it with an underscore: `_lhs`

warning: unused variable: `rhs`
  --> src/fuzz.rs:26:9
   |
26 |         rhs: &egg::Pattern<Self>,
   |         ^^^ help: if this is intentional, prefix it with an underscore: `_rhs`

warning: unused variable: `graph`
   --> src/synthesis.rs:155:13
    |
155 |     let mut graph: HashMap<String, HashSet<String>> = HashMap::new();
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_graph`

warning: variable does not need to be mutable
   --> src/synthesis.rs:155:9
    |
155 |     let mut graph: HashMap<String, HashSet<String>> = HashMap::new();
    |         ----^^^^^
    |         |
    |         help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `seed_rules`
  --> src/desugared_synthesis.rs:30:13
   |
30 |     let mut seed_rules : ruler::enumo::Ruleset<desugared_lang::VecLangDesugared> = ruler::enumo::Ruleset::default();
   |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_seed_rules`

warning: variable does not need to be mutable
  --> src/desugared_synthesis.rs:30:9
   |
30 |     let mut seed_rules : ruler::enumo::Ruleset<desugared_lang::VecLangDesugared> = ruler::enumo::Ruleset::default();
   |         ----^^^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: type `Operations` is more private than the item `SynthesisConfig::operation_matching`
  --> src/synthesis.rs:39:5
   |
39 |     pub operation_matching: Operations,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ field `SynthesisConfig::operation_matching` is reachable at visibility `pub(crate)`
   |
note: but type `Operations` is only usable at visibility `pub(self)`
  --> src/synthesis.rs:30:1
   |
30 | enum Operations {
   | ^^^^^^^^^^^^^^^
   = note: `#[warn(private_interfaces)]` on by default

warning: associated function `dios` is never used
  --> src/cost.rs:84:12
   |
83 | impl VecCostFnDesugared {
   | ----------------------- associated function in this implementation
84 |     pub fn dios() -> Self {
   |            ^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: function `build_litvec_rule_desugared` is never used
 --> src/handwritten.rs:6:8
  |
6 | pub fn build_litvec_rule_desugared(vec_width: usize) -> Vec<egg::Rewrite<VecLangDesugared, ()>> {
  |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `vecs_eq` is never used
  --> src/synthesis.rs:90:8
   |
90 | pub fn vecs_eq(lvec: &CVec<lang::VecLang>, rvec: &CVec<lang::VecLang>) -> bool {
   |        ^^^^^^^

warning: function `randomly_generate_operation_sets` is never used
   --> src/synthesis.rs:150:4
    |
150 | fn randomly_generate_operation_sets(set_size: usize, ops: Vec<Vec<String>>) -> Vec<(Vec<Vec<String>>, usize)> {
    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: associated functions `bool2`, `vec1`, `vec3`, and `vec1_op` are never used
   --> src/desugared_lang.rs:156:8
    |
132 | impl desugared_lang::Value {
    | -------------------------- associated functions in this implementation
...
156 |     fn bool2<F>(lhs: &Self, rhs: &Self, f: F) -> Option<desugared_lang::Value>
    |        ^^^^^
...
167 |     fn vec1<F>(val: &Self, f: F) -> Option<desugared_lang::Value>
    |        ^^^^
...
193 |     fn vec3<F>(v1: &Self, v2: &Self, v3: &Self, f: F) -> Option<desugared_lang::Value>
    |        ^^^^
...
217 |     fn vec1_op<F>(vec: &Self, f: F) -> Option<desugared_lang::Value>
    |        ^^^^^^^

warning: function `sum_rules` is never used
  --> src/desugared_synthesis.rs:14:4
   |
14 | fn sum_rules(
   |    ^^^^^^^^^

warning: function `run` is never used
  --> src/desugared_synthesis.rs:26:8
   |
26 | pub fn run(
   |        ^^^

warning: function `debugging_workload` is never used
  --> src/desugared_synthesis.rs:60:8
   |
60 |     fn debugging_workload() -> Workload {
   |        ^^^^^^^^^^^^^^^^^^

warning: function `workload_sum` is never used
 --> src/desugared_workloads.rs:6:8
  |
6 | pub fn workload_sum(ops: Vec<Vec<String>>) -> Workload {
  |        ^^^^^^^^^^^^

warning: function `workload_shfl` is never used
  --> src/desugared_workloads.rs:20:8
   |
20 | pub fn workload_shfl(ops: Vec<Vec<String>>) -> Workload
   |        ^^^^^^^^^^^^^

warning: function `number_of_terms` is never used
  --> src/util.rs:49:4
   |
49 | fn number_of_terms(operations: Vec<Vec<String>>, depth: usize, vars: usize) -> u64 {
   |    ^^^^^^^^^^^^^^^

warning: function `sum_workload_depth` is never used
  --> src/util.rs:57:15
   |
57 | pub(crate) fn sum_workload_depth() -> usize {
   |               ^^^^^^^^^^^^^^^^^^

warning: function `generate_rules` is never used
  --> src/util.rs:61:15
   |
61 | pub(crate) fn generate_rules(workload: &Workload, prior_rules: &mut Ruleset<desugared_lang::VecLangDesugared>, run_name: &str, vec_ops: b...
   |               ^^^^^^^^^^^^^^

warning: function `permutation_vectors` is never used
  --> src/util.rs:71:15
   |
71 | pub(crate) fn permutation_vectors() -> Vec<String> {
   |               ^^^^^^^^^^^^^^^^^^^

warning: function `interesting_vectors` is never used
  --> src/util.rs:83:15
   |
83 | pub(crate) fn interesting_vectors(scalar_ops: Vec<Vec<String>>) -> Workload {
   |               ^^^^^^^^^^^^^^^^^^^

warning: function `scalar_exprs` is never used
   --> src/util.rs:101:15
    |
101 | pub(crate) fn scalar_exprs(scalar_ops: Vec<Vec<String>>) -> Workload {
    |               ^^^^^^^^^^^^

warning: function `extract_vector_operations` is never used
   --> src/util.rs:109:15
    |
109 | pub(crate) fn extract_vector_operations(operations: Vec<Vec<String>>) -> (Vec<Vec<String>>, Vec<Vec<String>>) {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `iter_dios_eq` is never used
   --> src/util.rs:151:15
    |
151 | pub(crate) fn iter_dios_eq(depth: usize, values: Workload, variable_names: Workload, filters: &mut Vec<Filter>, operations: Vec<Vec<Strin...
    |               ^^^^^^^^^^^^

warning: `dios-lang` (bin "dios-lang") generated 61 warnings (run `cargo fix --bin "dios-lang"` to apply 31 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.09s
warning: the following packages contain code that will be rejected by a future version of Rust: svg v0.7.2
note: to see what the problems were, use the option `--future-incompat-report`, or run `cargo report future-incompatibilities --id 1`
     Running `target/debug/dios-lang synth ruleset.json --config synth.json --synth synth_config.json`
[2024-04-01T18:15:53Z INFO  dios_lang::synthesis] running with config: DiosConfig {
        constants: [
            DiosConstant {
                kind: "int",
                value: 0,
            },
            DiosConstant {
                kind: "int",
                value: 1,
            },
        ],
        seed_rules: [],
        unops: [
            "sqrt",
            "sgn",
            "neg",
            "VecSgn",
            "VecSqrt",
            "VecNeg",
            "Vec",
        ],
        binops: [
            "/",
            "+",
            "*",
            "-",
            "VecAdd",
            "VecMinus",
            "VecMul",
            "VecDiv",
        ],
        triops: [
            "VecMAC",
            "VecMULS",
        ],
        use_scalar: true,
        use_vector: true,
        variable_duplication: false,
        vector_size: 1,
        always_smt: true,
        smt_fallback: true,
    }
[2024-04-01T18:15:53Z INFO  dios_lang::synthesis] running with synth config: SynthesisConfig {
        name: "10.json",
        operation_matching: AllAtOnce,
        canon_force: true,
        arity_shorting: true,
    }
calling arity truncation for [["sqrt", "sgn", "neg", "VecSgn", "VecSqrt", "VecNeg", "Vec"], ["/", "+", "*", "-", "VecAdd", "VecMinus", "VecMul", "VecDiv"], ["VecMAC", "VecMULS"]]
depth is 2
[2024-04-01T18:15:53Z INFO  dios_lang::util] Workload is Filter(MetricLt(Depth, 3), Plug(Plug(Plug(Plug(Filter(MetricLt(Depth, 3), Plug(Set([Atom("VAR"), Atom("VAL"), List([Atom("OP1"), Atom("EXPR")]), List([Atom("OP2"), Atom("EXPR"), Atom("EXPR")])]), "EXPR", Filter(And([MetricLt(Depth, 2)]), Plug(Set([Atom("VAR"), Atom("VAL"), List([Atom("OP1"), Atom("EXPR")]), List([Atom("OP2"), Atom("EXPR"), Atom("EXPR")])]), "EXPR", Filter(And([MetricLt(Depth, 2)]), Set([Atom("VAR"), Atom("VAL"), List([Atom("OP1"), Atom("EXPR")]), List([Atom("OP2"), Atom("EXPR"), Atom("EXPR")])])))))), "VAL", Set([Atom("0"), Atom("1")])), "VAR", Set([Atom("a"), Atom("b"), Atom("c"), Atom("d")])), "OP1", Set([Atom("sqrt"), Atom("sgn"), Atom("neg"), Atom("VecSgn"), Atom("VecSqrt"), Atom("VecNeg"), Atom("Vec")])), "OP2", Filter(MetricLt(Depth, 3), Set([Atom("/"), Atom("+"), Atom("*"), Atom("-"), Atom("VecAdd"), Atom("VecMinus"), Atom("VecMul"), Atom("VecDiv")]))))
workload: Plug(Plug(Plug(Plug(Plug(Plug(Set([Atom("VAR"), Atom("VAL"), List([Atom("OP1"), Atom("EXPR")]), List([Atom("OP2"), Atom("EXPR"), Atom("EXPR")]), List([Atom("OP3"), Atom("EXPR"), Atom("EXPR"), Atom("EXPR")])]), "VAL", Set([Atom("0"), Atom("1")])), "VAR", Set([Atom("a"), Atom("b"), Atom("c"), Atom("d")])), "OP1", Set([Atom("sqrt"), Atom("sgn"), Atom("neg"), Atom("VecSgn"), Atom("VecSqrt"), Atom("VecNeg"), Atom("Vec")])), "OP2", Set([Atom("/"), Atom("+"), Atom("*"), Atom("-"), Atom("VecAdd"), Atom("VecMinus"), Atom("VecMul"), Atom("VecDiv")])), "OP3", Set([Atom("VecMAC"), Atom("VecMULS")])), "EXPR", Filter(MetricLt(Depth, 3), Plug(Plug(Plug(Plug(Filter(MetricLt(Depth, 3), Plug(Set([Atom("VAR"), Atom("VAL"), List([Atom("OP1"), Atom("EXPR")]), List([Atom("OP2"), Atom("EXPR"), Atom("EXPR")])]), "EXPR", Filter(And([MetricLt(Depth, 2)]), Plug(Set([Atom("VAR"), Atom("VAL"), List([Atom("OP1"), Atom("EXPR")]), List([Atom("OP2"), Atom("EXPR"), Atom("EXPR")])]), "EXPR", Filter(And([MetricLt(Depth, 2)]), Set([Atom("VAR"), Atom("VAL"), List([Atom("OP1"), Atom("EXPR")]), List([Atom("OP2"), Atom("EXPR"), Atom("EXPR")])])))))), "VAL", Set([Atom("0"), Atom("1")])), "VAR", Set([Atom("a"), Atom("b"), Atom("c"), Atom("d")])), "OP1", Set([Atom("sqrt"), Atom("sgn"), Atom("neg"), Atom("VecSgn"), Atom("VecSqrt"), Atom("VecNeg"), Atom("Vec")])), "OP2", Filter(MetricLt(Depth, 3), Set([Atom("/"), Atom("+"), Atom("*"), Atom("-"), Atom("VecAdd"), Atom("VecMinus"), Atom("VecMul"), Atom("VecDiv")])))))
depth is 3
workload is Plug(
    Plug(
        Plug(
            Plug(
                Plug(
                    Plug(
                        Set(
                            [
                                Atom(
                                    "VAR",
                                ),
                                Atom(
                                    "VAL",
                                ),
                                List(
                                    [
                                        Atom(
                                            "OP1",
                                        ),
                                        Atom(
                                            "EXPR",
                                        ),
                                    ],
                                ),
                                List(
                                    [
                                        Atom(
                                            "OP2",
                                        ),
                                        Atom(
                                            "EXPR",
                                        ),
                                        Atom(
                                            "EXPR",
                                        ),
                                    ],
                                ),
                                List(
                                    [
                                        Atom(
                                            "OP3",
                                        ),
                                        Atom(
                                            "EXPR",
                                        ),
                                        Atom(
                                            "EXPR",
                                        ),
                                        Atom(
                                            "EXPR",
                                        ),
                                    ],
                                ),
                            ],
                        ),
                        "VAL",
                        Set(
                            [
                                Atom(
                                    "0",
                                ),
                                Atom(
                                    "1",
                                ),
                            ],
                        ),
                    ),
                    "VAR",
                    Set(
                        [
                            Atom(
                                "a",
                            ),
                            Atom(
                                "b",
                            ),
                            Atom(
                                "c",
                            ),
                            Atom(
                                "d",
                            ),
                        ],
                    ),
                ),
                "OP1",
                Set(
                    [
                        Atom(
                            "sqrt",
                        ),
                        Atom(
                            "sgn",
                        ),
                        Atom(
                            "neg",
                        ),
                        Atom(
                            "VecSgn",
                        ),
                        Atom(
                            "VecSqrt",
                        ),
                        Atom(
                            "VecNeg",
                        ),
                        Atom(
                            "Vec",
                        ),
                    ],
                ),
            ),
            "OP2",
            Set(
                [
                    Atom(
                        "/",
                    ),
                    Atom(
                        "+",
                    ),
                    Atom(
                        "*",
                    ),
                    Atom(
                        "-",
                    ),
                    Atom(
                        "VecAdd",
                    ),
                    Atom(
                        "VecMinus",
                    ),
                    Atom(
                        "VecMul",
                    ),
                    Atom(
                        "VecDiv",
                    ),
                ],
            ),
        ),
        "OP3",
        Set(
            [
                Atom(
                    "VecMAC",
                ),
                Atom(
                    "VecMULS",
                ),
            ],
        ),
    ),
    "EXPR",
    Filter(
        MetricLt(
            Depth,
            3,
        ),
        Plug(
            Plug(
                Plug(
                    Plug(
                        Filter(
                            MetricLt(
                                Depth,
                                3,
                            ),
                            Plug(
                                Set(
                                    [
                                        Atom(
                                            "VAR",
                                        ),
                                        Atom(
                                            "VAL",
                                        ),
                                        List(
                                            [
                                                Atom(
                                                    "OP1",
                                                ),
                                                Atom(
                                                    "EXPR",
                                                ),
                                            ],
                                        ),
                                        List(
                                            [
                                                Atom(
                                                    "OP2",
                                                ),
                                                Atom(
                                                    "EXPR",
                                                ),
                                                Atom(
                                                    "EXPR",
                                                ),
                                            ],
                                        ),
                                    ],
                                ),
                                "EXPR",
                                Filter(
                                    And(
                                        [
                                            MetricLt(
                                                Depth,
                                                2,
                                            ),
                                        ],
                                    ),
                                    Plug(
                                        Set(
                                            [
                                                Atom(
                                                    "VAR",
                                                ),
                                                Atom(
                                                    "VAL",
                                                ),
                                                List(
                                                    [
                                                        Atom(
                                                            "OP1",
                                                        ),
                                                        Atom(
                                                            "EXPR",
                                                        ),
                                                    ],
                                                ),
                                                List(
                                                    [
                                                        Atom(
                                                            "OP2",
                                                        ),
                                                        Atom(
                                                            "EXPR",
                                                        ),
                                                        Atom(
                                                            "EXPR",
                                                        ),
                                                    ],
                                                ),
                                            ],
                                        ),
                                        "EXPR",
                                        Filter(
                                            And(
                                                [
                                                    MetricLt(
                                                        Depth,
                                                        2,
                                                    ),
                                                ],
                                            ),
                                            Set(
                                                [
                                                    Atom(
                                                        "VAR",
                                                    ),
                                                    Atom(
                                                        "VAL",
                                                    ),
                                                    List(
                                                        [
                                                            Atom(
                                                                "OP1",
                                                            ),
                                                            Atom(
                                                                "EXPR",
                                                            ),
                                                        ],
                                                    ),
                                                    List(
                                                        [
                                                            Atom(
                                                                "OP2",
                                                            ),
                                                            Atom(
                                                                "EXPR",
                                                            ),
                                                            Atom(
                                                                "EXPR",
                                                            ),
                                                        ],
                                                    ),
                                                ],
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                        "VAL",
                        Set(
                            [
                                Atom(
                                    "0",
                                ),
                                Atom(
                                    "1",
                                ),
                            ],
                        ),
                    ),
                    "VAR",
                    Set(
                        [
                            Atom(
                                "a",
                            ),
                            Atom(
                                "b",
                            ),
                            Atom(
                                "c",
                            ),
                            Atom(
                                "d",
                            ),
                        ],
                    ),
                ),
                "OP1",
                Set(
                    [
                        Atom(
                            "sqrt",
                        ),
                        Atom(
                            "sgn",
                        ),
                        Atom(
                            "neg",
                        ),
                        Atom(
                            "VecSgn",
                        ),
                        Atom(
                            "VecSqrt",
                        ),
                        Atom(
                            "VecNeg",
                        ),
                        Atom(
                            "Vec",
                        ),
                    ],
                ),
            ),
            "OP2",
            Filter(
                MetricLt(
                    Depth,
                    3,
                ),
                Set(
                    [
                        Atom(
                            "/",
                        ),
                        Atom(
                            "+",
                        ),
                        Atom(
                            "*",
                        ),
                        Atom(
                            "-",
                        ),
                        Atom(
                            "VecAdd",
                        ),
                        Atom(
                            "VecMinus",
                        ),
                        Atom(
                            "VecMul",
                        ),
                        Atom(
                            "VecDiv",
                        ),
                    ],
                ),
            ),
        ),
    ),
)
