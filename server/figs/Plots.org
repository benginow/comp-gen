* Start jobs and sync data

Create jobs.

#+begin_src async-shell :dir (sgt/dir "server") :results none :name sync
./jobs.py
ls jobs
#+end_src

Sync jobs.

#+begin_src async-shell :dir (sgt/dir "server") :results none :name sync
./sync.py both
#+end_src

* Getting Diospyros Numbers

Run Diospyros experiments on the server. We're using =master= instead of the ASPLOS tag because we want to use the latest version of Rosette.

#+begin_src async-shell :dir (ec2/tramp "exp" "diospyros") :results none :name dios
# git checkout master
# git pull -r

make
cargo build --release --manifest-path /home/ubuntu/diospyros/src/dios-egraphs/Cargo.toml
python3 evaluation/eval_benchmarks.py --timeout 180 --skiplargemem --skiprun -o results
#+end_src

Copy the results back here, so that we can analyze them.

#+begin_src async-shell :dir (sgt/dir "server") :var IP=(ec2/get-ip "exp") :results none :name dios
rsync -avh ubuntu@$IP:~/diospyros/results/ diospyros-results-log
#+end_src

Some changes to diospyros are needed before we can run estimation. We need to go into =evaluation/shared.mk= and edit the paths so that they point to the right places.

I don't have the expert matrix kernel, so I comment out that from the =mat-mul/harness.c=

The nature files seem to be in a different location than what Dios expects. So I symlinked the =.c= files into where they are supposed to be. Here's the command (from the fusion_g3 library):

#+begin_src async-shell :name dios :dir ~/Research/xtensa/fusiong3_library
# mat-mul nature objects
ln -s matrix/matmmltf_pdx4.c matmmltf_pdx4.c

# 2d-conv nature objects
ln -s filter/2d/conv2df_pdx4.c conv2df_pdx4.c

# qr-decomp nature objects
ln -s matinv/qrf/matinvqrf_pdx4.c matinvqrf_pdx4.c
ln -s matinv/qrf/matinvqrrotf_pdx4.c matinvqrrotf_pdx4.c
ln -s matrix/transpmf_pdx4.c transpmf_pdx4.c
ln -s matrix/transpm32cache_pdx4.c transpm32cache_pdx4.c
#+end_src

Finally, the command to actually perform cycle estimates on all the benchmarks.

#+header: :dir (sgt/dir ".." "cucapra-diospyros")
#+begin_src async-shell :name dios :results none
python3 evaluation/eval_benchmarks.py \
        --skipsynth \
        -o ~/Research/comp-gen/server/diospyros-results
#+end_src

** Syncing diospyros-results between machines

#+begin_src async-shell :name dios :dir (sgt/dir "server") :results none
rsync -avh samthomas@sgt.csres.utexas.edu:~/Research/comp-gen/server/diospyros-results-log/ \
      diospyros-results-log
#+end_src

* Data processing
:PROPERTIES:
:header-args:async-shell: :dir (sgt/dir "server") :results none
:END:

Testing my cycle-estimation script. At the moment, this will assume a completely compile =kernel.c= file. At some point I'll want to make this work for an arbitrary egg input.

(header args for doing cycle estimation from non-thelio computers)

#+header: :dir (sgt/dir "server")
#+begin_src async-shell :name estimation
# ./estimate.py many latest --key noeqsat --override-name noeqsat --force
# ./estimate.py many Mar29-1443 --key performance --force
./estimate.py many Apr08-1237 --key ruleset_ablation
#+end_src

#+begin_src async-shell :name estimation
rsync -avh samthomas@sgt.csres.utexas.edu:~/Research/comp-gen/server/completed/ completed
#+end_src

Process all the log files and generate data csvs.

#+begin_src async-shell :name processed
./process.py all completed/
#+end_src

Run query to generate aggregated data files

#+begin_src async-shell :name query
python3.11 query.py
#+end_src

* Tables

Generate the SLoC table for the evaluation section

#+begin_src async-shell :dir (sgt/dir) :results none :ansi t
# compgen library
cd comp-gen
compgen=$(tokei src -o json | jq .Total.code)
cd ..

cd dios-lang
spec=$(tokei src -o json | \
           jq ".Rust.reports[] | select(.name == \"src/synthesis.rs\") | .stats.code")
cost=$(tokei src -o json | \
           jq ".Rust.reports[] | select(.name == \"src/cost.rs\") | .stats.code")
harness=$(tokei src -o json | jq .Total.code)

echo "\\\newcommand{\\\sloccompgen}{$compgen}"
echo "\\\newcommand{\\\slocspec}{$spec}"
echo "\\\newcommand{\\\sloccost}{$cost}"
echo "\\\newcommand{\\\slocharness}{$((harness - spec - cost))}"
echo "\\\newcommand{\\\sloctotal}{$((compgen + harness))}"
#+end_src

* Pictures!!
:PROPERTIES:
:header-args:R: :session cycest :colnames yes
:END:

Import the R libraries that we will use.

#+begin_src R :results none
library(tidyverse)
library(extrafont)
#+end_src

** Performance graphs

*** DONE Cycle count
CLOSED: [2023-03-29 Wed 10:03]
:LOGBOOK:
- State "DONE"       from "WAITING"    [2023-03-29 Wed 10:03]
:END:

#+header: :width 13 :height 4
#+begin_src R :results graphics file :file cycles-performance.svg
data <- full_join(full_join(
  read_csv("data/stock_cycles.csv"),
  read_csv("data/est_cycles.csv")
), read_csv("data/noeqsat.csv"))

data <- data %>%
  ## filter(benchmark == "2d-conv" | benchmark == "mat-mul") %>%
  select(benchmark, params, kernel, cycles) %>%
  group_by(benchmark) %>%
  pivot_wider(
    names_from=kernel,
    values_from=cycles
  ) %>%
  mutate(
    name = str_c(str_replace_all(params, "_", "\n"), "\n", benchmark),
    norm = naive.fixed,
    compgen = norm / compgen,
    dios = norm / dios,
    nature = norm / nature,
    noeqsat = norm / noeqsat,
    naive = norm / naive,
    naive.fixed = norm / naive.fixed,
    naive.clang = norm / naive.clang
  ) %>%
  pivot_longer(
    cols = c("naive.fixed", "naive.clang", "nature", "dios", "compgen"),
    names_to = "kernel",
    values_to = "cycles"
  ) %>%
  select(name, kernel, cycles) %>%
  print(n=60)

data %>%
  ggplot(aes(
    xmin=as.numeric(factor(name, levels=unique(name))) - 0.35,
    xmax=as.numeric(factor(name, levels=unique(name))) + 0.35,
    ymin=0,
    ymax=cycles,
    fill=factor(kernel, levels=unique(kernel))
  )) +
  geom_rect(
    position="dodge",
    color="black",
  ) +
  geom_hline(yintercept=1, linetype="solid", color="black") +
  labs(y="Speed up over Naive (fixed size)", fill="Compiler") +
  scale_x_continuous(
    label=unique(data$name),
    breaks=1:length(unique(data$name))
  ) +
  scale_y_continuous(
    trans="log2",
  ) +
  scale_fill_brewer(
    palette = "Paired",
    labels=c(
      "Naive (fixed size + no vec)",
      "Naive (fixed size + clang vec)",
      "Nature",
      "Diospyros",
      "Compgen"
    )
  ) +
  theme_minimal() +
  theme(
    axis.title.x = element_blank(),
    ## legend.position = c(0.80, 0.77),
    legend.position = "top",
    legend.background = element_rect(fill = "white"),
    text = element_text(size=12, face="bold"),
    panel.spacing.x = unit(0, "lines")
  )
#+end_src

#+RESULTS:
[[file:cycles-performance.svg]]

*** NEXT Compilation time

#+header: :width 9 :height 4
#+begin_src R :results graphics file :file compile-times.svg
data <- full_join(
  read_csv("data/stock_cycles.csv"),
  read_csv("data/est_cycles.csv")
  ## comment
)

# fix the order of params cat var
## data$params <- factor(data$params, levels=unique(data$params))

data <- data %>%
  ##  %>%
  ## filter(greedy == "True") %>%
  ## filter(benchmark == "2d-conv" | benchmark == "mat-mul") %>%
  select(benchmark, params, kernel, compile_time) %>%
  group_by(benchmark) %>%
  pivot_wider(
    names_from=kernel,
    values_from=compile_time
  ) %>%
  mutate(
    benchmark=recode(benchmark, "qr-decomp"="qr"),
    name = str_replace_all(params, "_", "\n")
    ## compgen = compgen / dios,
    ## dios = 1.0,
  ) %>%
  pivot_longer(
    cols = c("dios", "compgen"),
    names_to = "kernel",
    values_to = "compile_time"
  )
  ## pivot_longer(
  ##   cols = !benchmark,
  ##   names_to = "compiler",
  ##   values_to = "cycles"
  ## ) %>% 
  ## filter(compiler == "stock_norm" | compiler == "compgen_norm") %>%
data %>%
  ggplot(aes(
    x=factor(name, levels=unique(name)),
    y=compile_time,
    fill=factor(kernel, levels=unique(kernel))
  )) +
  facet_grid(
    ~benchmark,
    switch="x",
    scales = "free_x", space="free_x"
  ) +
  geom_col(
    position="dodge",
    color="black",
    width=0.5
  ) +
  ## scale_y_log10() +
  ## ylim(0, 1.5) +
  scale_fill_manual(
    values = c("#33a02c", "#fb9a99"),
    labels=c("Diospyros", "Compgen")
  ) +
  labs(y="Compile Time", fill="Compiler") +
  theme_minimal() +
  theme(
    axis.title.x = element_blank(),
    ## legend.position = c(0.9, 0.9),
    legend.position = "top",
    legend.background = element_rect(fill = "white"),
    text = element_text(size=12, face="bold"),
    panel.spacing.x = unit(0, "lines"),
    strip.placement = "outside",
    strip.text.x = element_text(
      angle=0
    ),
    ## strip.background.x = element_rect(
    ##   color="black", linetype="solid",
    ## ),
  )
#+end_src

#+RESULTS:
[[file:compile-times.svg]]

*** Memory Usage

#+header: :width 13 :height 5
#+begin_src R :results graphics file :file memory-performance.svg
data <- full_join(
  read_csv("data/stock_cycles.csv"),
  read_csv("data/est_cycles.csv")
  ## comment
)

data$params <- factor(data$params, levels=unique(data$params))

data <- data %>%
  ##  %>%
  ## filter(greedy == "True") %>%
  filter(benchmark == "2d-conv" | benchmark == "mat-mul") %>%
  filter(kernel == "dios" | kernel == "compgen") %>%
  select(benchmark, params, kernel, max_ram_used) %>%
  group_by(benchmark) %>%
  pivot_wider(
    names_from=kernel,
    values_from=max_ram_used
  ) %>%
  ## mutate(
  ##   compgen = compgen / dios,
  ##   dios = dios / dios,
  ## ) %>%
  pivot_longer(
    cols = c("dios", "compgen"),
    names_to = "kernel",
    values_to = "memory"
  ) %>%
  print()

data %>%
  ggplot(aes(
    x=params,
    y=memory,
    fill=kernel
  )) +
  facet_wrap(~benchmark, strip.position = "bottom", scales = "free_x") +
  geom_bar(position="dodge", stat="identity", color="black") +
  ## ylim(0, 1.5) +
  ## scale_fill_discrete(labels=c("Compgen", "Stock Dios")) +
  labs(y="Max Memory Used (GiB)", fill="Compiler") +
  ## scale_y_log10() +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, vjust = 0.9, hjust=1),
    axis.title.x = element_blank(),
    legend.position = c(0.15, 0.9),
    legend.background = element_rect(fill = "white"),
    text = element_text(size=12, face="bold")
  ) +
  scale_fill_brewer(palette = "Set2")
#+end_src

#+RESULTS:
[[file:memory-performance.svg]]

*** Equality Saturation Ablation

Actually use 11 as the width
#+header: :width 9 :height 4
#+begin_src R :results graphics file :file cycles-performance.svg
data <- full_join(full_join(
  read_csv("data/stock_cycles.csv"),
  read_csv("data/est_cycles.csv")
), read_csv("data/noeqsat.csv"))

data <- data %>%
  filter(benchmark == "2d-conv") %>%
  select(benchmark, params, kernel, cycles) %>%
  group_by(benchmark) %>%
  pivot_wider(
    names_from=kernel,
    values_from=cycles
  ) %>%
  mutate(
    name = str_c(str_replace_all(params, "_", "\n")),
    norm = noeqsat,
    compgen = norm / compgen,
    dios = norm / dios,
    nature = norm / nature,
    noeqsat = norm / noeqsat,
    naive = norm / naive,
    naive.fixed = norm / naive.fixed,
    naive.clang = norm / naive.clang
  ) %>%
  pivot_longer(
    cols = c("dios", "compgen", "noeqsat"),
    names_to = "kernel",
    values_to = "cycles"
  ) %>%
  select(name, kernel, cycles) %>%
  print(n=60)

data %>%
  ggplot(aes(
    xmin=as.numeric(factor(name, levels=unique(name))) - 0.35,
    xmax=as.numeric(factor(name, levels=unique(name))) + 0.35,
    ymin=0,
    ymax=cycles,
    fill=factor(kernel, levels=unique(kernel))
  )) +
  geom_rect(
    position="dodge",
    color="black",
  ) +
  geom_hline(yintercept=1, linetype="solid", color="black") +
  labs(x="2d-conv", y="Speed up", fill="Compiler") +
  scale_x_continuous(
    label=unique(data$name),
    breaks=1:length(unique(data$name))
  ) +
  scale_y_continuous(
    trans="log2",
  ) +
  scale_fill_brewer(
    palette = "Paired",
    ## labels=c(
    ##   "Diospyros",
    ##   "Compgen"
    ## )
  ) +
  theme_minimal() +
  theme(
    ## axis.title.x = element_blank(),
    ## legend.position = c(0.80, 0.77),
    legend.position = "top",
    legend.background = element_rect(fill = "white"),
    text = element_text(size=12, face="bold"),
    panel.spacing.x = unit(0, "lines")
  )
#+end_src

#+RESULTS:
[[file:cycles-performance.svg]]

** TODO Greedy Cost Works

The data here is wrong I think. Fix the data

#+begin_src R :results graphics file :file greedy_cost.svg
data <- read.csv("data/greedy_cost_works.csv")

# fix the order of the df in place
data$params <- factor(data$params, levels=rev(unique(data$params)))

data %>%
  filter(benchmark == "2d-conv") %>%
  ggplot(aes(fill=costfn, x=params, y=egraph_cost)) +
  geom_bar(position="dodge", stat="identity", color="black") +
  ## geom_text(
  ##   aes(label=round(egraph_cost)),
  ##   color="black",
  ##   size=3.5,
  ##   position=position_dodge(0.9)) +
  labs(x="Params", y="EGraph Cost", fill="Cost Function") +
  coord_flip() + theme_minimal() +
  theme(
    legend.position = c(0.80, 0.90),
    legend.background = element_rect(fill = "white"),
    text = element_text(size=16, face="bold")
  )
  ## theme(axis.text.x = element_text(angle = 45, vjust = 0.9, hjust=1))
#+end_src

#+RESULTS:
[[file:greedy_cost.svg]]

** TODO Pruning Works

Things to fix:
- [X] Put true first in the legend
- [ ] Get rid of the last data point (from the python generation script)
- [ ] Make the =y-axis= use estimated cycles rather than cost (so that we know that we are doing the right thing)

old R code
#+begin_src R :results graphics file :file iter_size.svg
data <- read_csv("data/pruning.csv")
data %>%
  select(-iter) %>%
  filter(benchmark == "2d-conv_3x3_3x3") %>%
  pivot_wider(
    names_from=name,
    values_from=value,
  ) %>%
  group_by(pruning) %>%
  mutate(
    cost=cost / max(cost),
    phase=str_split_i(phase, "-", 1)
  ) %>%
  ggplot(aes(
    x=nodes,
    y=cost,
    group=pruning,
    ## linetype=pruning,
    color=phase
  )) +
  geom_path(
    linewidth=1.5,
    arrow=arrow(),
    show.legend=F
    ) + geom_point(size=4) +
  scale_x_log10() + scale_y_log10() +
  scale_color_discrete(
    breaks=c(TRUE, FALSE),
    labels=c("Enabled", "Disabled")
    ) +
  labs(
    x="Log10(Node Count)",
    y="Normalized Cost",
    color="Pruning"
  ) +
  theme_minimal() +
  theme(
    legend.position = c(0.9, 0.9),
    legend.background = element_rect(fill = "white"),
    text = element_text(size=16, face="bold")
  ) +
  scale_fill_brewer(palette = "Paired")
#+end_src

#+RESULTS:
[[file:iter_size.svg]]

#+begin_src R :results graphics file :file pruning.svg
data <- read_csv("data/pruning.csv")
data %>%
  select(-iteration) %>%
  filter(benchmark == "2d-conv" & params == "8x8_3x3") %>%
  ## pivot_wider(
  ##   names_from=name,
  ##   values_from=value
  ## ) %>%
  group_by(pruning) %>%
  print(n=10) %>%
  mutate(
    cost=cost / max(cost),
    ## cycles=cycles / max(cycles),
    ## cycles,
    timestamp=timestamp - min(timestamp)
  ) %>%
  ggplot(aes(
    x=timestamp,
    y=cycles,
    color=pruning,
  )) +
  geom_line(
    linewidth=1.5,
    show.legend=F
  ) + geom_point(size=3) +
  scale_color_brewer(
    palette = "Paired",
    breaks=c(TRUE, FALSE),
    labels=c("Enabled", "Disabled")
  ) +
  ## scale_x_log10() + annotation_logticks(sides = "b") +
  labs(
    x="Log Timestamp (secs)",
    y="Normalized Cost",
    color="Pruning"
  ) +
  ## guides(linetype="none") +
  theme_minimal() +
  theme(
    legend.position = c(0.9, 0.9),
    legend.background = element_rect(fill = "white"),
    text = element_text(size=16, face="bold")
  )
#+end_src

#+RESULTS:
[[file:pruning.svg]]

** Backoff scheduler doesn't work

#+begin_src R :results graphics file :file scheduler-backoff.svg
data <- read.csv("~/Research/comp-gen/server/completed/2d-conv_3x3_3x3/20/data.csv")

data %>%
  filter(name == "nodes" | name == "cost" & iteration != "report") %>%
  pivot_wider(
    names_from = name,
    values_from = value
  ) %>%
  mutate(
    cost = as.numeric(cost),
    nodes = as.numeric(nodes),
  ) %>%
  ggplot(aes(
    x=log10(nodes),
    y=cost/max(cost)
  )) +
  geom_path(linewidth=1.5) + geom_point(size=2) +
  ylim(0, 1) +
  theme_minimal() + theme(
    legend.position = c(0.85, 0.9),
    legend.background = element_rect(fill = "white"),
    text = element_text(size=16, face="bold")
  )
#+end_src

#+RESULTS:
[[file:scheduler-backoff.svg]]

#+begin_src R :results graphics file :file scheduler-backoff-cost.svg
data <- read.csv("data/backoff_cost.csv")

data %>%
  filter(benchmark == "2d-conv") %>%
  filter(params == "3x3_2x2") %>%
  ggplot(aes(
    x=iteration,
    y=value)) +
  geom_path() +
  theme_minimal() + theme(
    legend.position = c(0.85, 0.9),
    legend.background = element_rect(fill = "white"),
    text = element_text(size=16, face="bold")
  )
  
  ## filter(name == "nodes" | name == "cost" & iteration != "report") %>%
  ## pivot_wider(
  ##   names_from = name,
  ##   values_from = value
  ## ) %>%
  ## mutate(
  ##   cost = as.numeric(cost),
  ##   nodes = as.numeric(nodes),
  ## ) %>%
  ## ggplot(aes(
  ##   x=log10(nodes),
  ##   y=cost/max(cost)
  ## )) +
  ## geom_path(linewidth=1.5) + geom_point(size=2) +
  ## ylim(0, 1) +
#+end_src

#+RESULTS:
[[file:scheduler-backoff-cost.svg]]

** Ruleset ablation

#+header: :width 9 :height 4
#+begin_src R :results graphics file :file ruleset-ablation.svg
data <- read_csv("data/ruleset_ablation.csv") %>% select(-index)
noeqsat <- read_csv("data/noeqsat.csv") %>%
  mutate(ruleset=0, noeqsat=cycles) %>%
  select(-c(kernel, correct, cycles, ruleset)) %>%
  filter(benchmark == "2d-conv")

data <- left_join(
  data,
  noeqsat,
  by=c("benchmark", "params"),
)

data <- data %>%
  select(benchmark, params, exp, ruleset, cycles, cost, noeqsat) %>%
  filter(ruleset != -1) %>%
  mutate(
    name=str_c(str_replace_all(params, "_", "\n"), "\n", benchmark),
  ) %>%
  group_by(params) %>%
  print(n=10) %>%
  mutate(
    # calculate speedup against the second item in every group
    ## across(cycles:cost, ~ .[2] / .)
    ## cycles=noeqsat / cycles
    across(cost, ~ .[2] / .)
  ) %>%
  print(n=100)
data %>%
  ggplot(aes(
    ## x=names,
    ## y=cycles,
    xmin=as.numeric(factor(name, levels=unique(name))) - 0.35,
    xmax=as.numeric(factor(name, levels=unique(name))) + 0.35,
    ymin=0, ymax=cost,
    fill=factor(ruleset)
  )) +
  geom_rect(
    position="dodge",
    color="black"
  ) +
  geom_hline(yintercept=1, linetype="solid", color="black") +
  scale_x_continuous(
    label=unique(data$name),
    breaks=1:length(unique(data$name))
  ) +
  ## coord_flip() +
  scale_y_continuous(
    trans="log2"
  ) + annotation_logticks(sides = "l") + 
  scale_fill_brewer(
    palette = "YlOrBr",
  ) +
  labs(fill="Timeout", y="Speedup") +
  theme_minimal() +
  theme(
    axis.title.x = element_blank(),
    ## legend.position = c(0.80, 0.77),
    ## legend.position = "top",
    legend.background = element_rect(fill = "white"),
    text = element_text(size=20, face="bold"),
    panel.spacing.x = unit(0, "lines")
  )
#+end_src

#+RESULTS:
[[file:ruleset-ablation.svg]]

** Misc

#+begin_src R :results graphics file :file iter_cost.svg
data <- read.csv("data/2d-conv-3x3_3x3_iter.csv")

data %>%
  group_by(pruning) %>%
  mutate(cost = cost / max(cost)) %>%
  ggplot(aes(x=index, y=cost, group=pruning, color=pruning)) +
  geom_line() + geom_point() +
  theme_minimal() +
  labs(x="Iteration", y="Cost / max(Cost)", color="Cost Function") +
  theme(
    legend.position = c(0.80, 0.90),
    legend.background = element_rect(fill = "white"),
    text = element_text(size=16, face="bold")
  )
#+end_src

#+RESULTS:
[[file:iter_cost.svg]]

* Copy Images to paper

#+begin_src async-shell :results none
DEST=$(realpath ~/Research/comp-gen-paper/figures)
for f in $(echo *.svg); do
    echo "Exporting $f to $DEST/${f%.*}.pdf"
    inkscape $f --export-filename="$DEST/${f%.*}.pdf"
done
#+end_src

* Debugging

#+header: :dir (sgt/dir "server" "test")
#+begin_src async-shell :name test :results none
ROOT="/home/samthomas/Research/xtensa/RI-2021.8-linux/XtensaTools/bin"

$ROOT/xt-clang++ -std=c++11 -mlongcalls \
                 -O3 -LNO:simd -LNO:simd_v -fvectorize -mtext-section-literals \
                 -DXCHAL_HAVE_FUSIONG_SP_VFPU=1 \
                 kernel.c -S

$ROOT/xt-clang++ -std=c++11 -mlongcalls \
                 -O3 -LNO:simd -fvectorize -mtext-section-literals \
                 -DXCHAL_HAVE_FUSIONG_SP_VFPU=1 \
                 kernel.c harness.c -o run.o

$ROOT/xt-run --client_commands='trace --level=0 trace.out' run.o
#+end_src

#+header: :dir (sgt/dir "server")
#+begin_src async-shell :name test
EXP="diospyros-results-log/2d-conv/3x3_3x3_4r"
make -C ~/Research/diospyros dios
~/Research/diospyros/dios -w 4 --egg --suppress-git -o $EXP/kernel.c $EXP
cp harnesses/utils.h $EXP
cp harnesses/2d-conv.c $EXP/harness.c
./estimate.py single --force --results "." --name 2d-conv --params 3x3_3x3 $EXP
#+end_src

#+begin_src async-shell :name test :dir (sgt/dir "server") :results none
DIR=completed/mat-mul_8x8_8x8/18
# ~/Research/diospyros/dios -w 4 --egg --suppress-git \
#                           -o $DIR/results/kernel.c \
#                           $DIR/results
./estimate.py log $DIR
#+end_src
